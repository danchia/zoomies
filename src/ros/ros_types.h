// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ros_types.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ROS_TYPES_H_
#define _FAST_DDS_GENERATED_ROS_TYPES_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ros_types_SOURCE)
#define ros_types_DllAPI __declspec( dllexport )
#else
#define ros_types_DllAPI __declspec( dllimport )
#endif // ros_types_SOURCE
#else
#define ros_types_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ros_types_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure builtins__Time defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class builtins__Time
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport builtins__Time();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~builtins__Time();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object builtins__Time that will be copied.
     */
    eProsima_user_DllExport builtins__Time(
            const builtins__Time& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object builtins__Time that will be copied.
     */
    eProsima_user_DllExport builtins__Time(
            builtins__Time&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object builtins__Time that will be copied.
     */
    eProsima_user_DllExport builtins__Time& operator =(
            const builtins__Time& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object builtins__Time that will be copied.
     */
    eProsima_user_DllExport builtins__Time& operator =(
            builtins__Time&& x);

    /*!
     * @brief Comparison operator.
     * @param x builtins__Time object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const builtins__Time& x) const;

    /*!
     * @brief Comparison operator.
     * @param x builtins__Time object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const builtins__Time& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nsec
     * @param _nsec New value for member nsec
     */
    eProsima_user_DllExport void nsec(
            int32_t _nsec);

    /*!
     * @brief This function returns the value of member nsec
     * @return Value of member nsec
     */
    eProsima_user_DllExport int32_t nsec() const;

    /*!
     * @brief This function returns a reference to member nsec
     * @return Reference to member nsec
     */
    eProsima_user_DllExport int32_t& nsec();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const builtins__Time& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_sec;
    int32_t m_nsec;
};
/*!
 * @brief This class represents the structure builtins__Duration defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class builtins__Duration
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport builtins__Duration();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~builtins__Duration();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object builtins__Duration that will be copied.
     */
    eProsima_user_DllExport builtins__Duration(
            const builtins__Duration& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object builtins__Duration that will be copied.
     */
    eProsima_user_DllExport builtins__Duration(
            builtins__Duration&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object builtins__Duration that will be copied.
     */
    eProsima_user_DllExport builtins__Duration& operator =(
            const builtins__Duration& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object builtins__Duration that will be copied.
     */
    eProsima_user_DllExport builtins__Duration& operator =(
            builtins__Duration&& x);

    /*!
     * @brief Comparison operator.
     * @param x builtins__Duration object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const builtins__Duration& x) const;

    /*!
     * @brief Comparison operator.
     * @param x builtins__Duration object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const builtins__Duration& x) const;

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nsec
     * @param _nsec New value for member nsec
     */
    eProsima_user_DllExport void nsec(
            int32_t _nsec);

    /*!
     * @brief This function returns the value of member nsec
     * @return Value of member nsec
     */
    eProsima_user_DllExport int32_t nsec() const;

    /*!
     * @brief This function returns a reference to member nsec
     * @return Reference to member nsec
     */
    eProsima_user_DllExport int32_t& nsec();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const builtins__Duration& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_sec;
    int32_t m_nsec;
};
/*!
 * @brief This class represents the structure std_msgs__Header defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class std_msgs__Header
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport std_msgs__Header();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~std_msgs__Header();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object std_msgs__Header that will be copied.
     */
    eProsima_user_DllExport std_msgs__Header(
            const std_msgs__Header& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object std_msgs__Header that will be copied.
     */
    eProsima_user_DllExport std_msgs__Header(
            std_msgs__Header&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object std_msgs__Header that will be copied.
     */
    eProsima_user_DllExport std_msgs__Header& operator =(
            const std_msgs__Header& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object std_msgs__Header that will be copied.
     */
    eProsima_user_DllExport std_msgs__Header& operator =(
            std_msgs__Header&& x);

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Header object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const std_msgs__Header& x) const;

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Header object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const std_msgs__Header& x) const;

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const builtins__Time& _stamp);

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            builtins__Time&& _stamp);

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const builtins__Time& stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport builtins__Time& stamp();
    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const std_msgs__Header& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    builtins__Time m_stamp;
    std::string m_frame_id;
};
/*!
 * @brief This class represents the structure std_msgs__ColorRGBA defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class std_msgs__ColorRGBA
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport std_msgs__ColorRGBA();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~std_msgs__ColorRGBA();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object std_msgs__ColorRGBA that will be copied.
     */
    eProsima_user_DllExport std_msgs__ColorRGBA(
            const std_msgs__ColorRGBA& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object std_msgs__ColorRGBA that will be copied.
     */
    eProsima_user_DllExport std_msgs__ColorRGBA(
            std_msgs__ColorRGBA&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object std_msgs__ColorRGBA that will be copied.
     */
    eProsima_user_DllExport std_msgs__ColorRGBA& operator =(
            const std_msgs__ColorRGBA& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object std_msgs__ColorRGBA that will be copied.
     */
    eProsima_user_DllExport std_msgs__ColorRGBA& operator =(
            std_msgs__ColorRGBA&& x);

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__ColorRGBA object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const std_msgs__ColorRGBA& x) const;

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__ColorRGBA object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const std_msgs__ColorRGBA& x) const;

    /*!
     * @brief This function sets a value in member r
     * @param _r New value for member r
     */
    eProsima_user_DllExport void r(
            float _r);

    /*!
     * @brief This function returns the value of member r
     * @return Value of member r
     */
    eProsima_user_DllExport float r() const;

    /*!
     * @brief This function returns a reference to member r
     * @return Reference to member r
     */
    eProsima_user_DllExport float& r();

    /*!
     * @brief This function sets a value in member g
     * @param _g New value for member g
     */
    eProsima_user_DllExport void g(
            float _g);

    /*!
     * @brief This function returns the value of member g
     * @return Value of member g
     */
    eProsima_user_DllExport float g() const;

    /*!
     * @brief This function returns a reference to member g
     * @return Reference to member g
     */
    eProsima_user_DllExport float& g();

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const std_msgs__ColorRGBA& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_r;
    float m_g;
    float m_b;
    float m_a;
};
/*!
 * @brief This class represents the structure std_msgs__Int32 defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class std_msgs__Int32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport std_msgs__Int32();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~std_msgs__Int32();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object std_msgs__Int32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Int32(
            const std_msgs__Int32& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object std_msgs__Int32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Int32(
            std_msgs__Int32&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object std_msgs__Int32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Int32& operator =(
            const std_msgs__Int32& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object std_msgs__Int32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Int32& operator =(
            std_msgs__Int32&& x);

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Int32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const std_msgs__Int32& x) const;

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Int32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const std_msgs__Int32& x) const;

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            int32_t _data);

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport int32_t data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport int32_t& data();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const std_msgs__Int32& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_data;
};
/*!
 * @brief This class represents the structure std_msgs__Float32 defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class std_msgs__Float32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport std_msgs__Float32();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~std_msgs__Float32();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object std_msgs__Float32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Float32(
            const std_msgs__Float32& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object std_msgs__Float32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Float32(
            std_msgs__Float32&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object std_msgs__Float32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Float32& operator =(
            const std_msgs__Float32& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object std_msgs__Float32 that will be copied.
     */
    eProsima_user_DllExport std_msgs__Float32& operator =(
            std_msgs__Float32&& x);

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Float32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const std_msgs__Float32& x) const;

    /*!
     * @brief Comparison operator.
     * @param x std_msgs__Float32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const std_msgs__Float32& x) const;

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            float _data);

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport float data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport float& data();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const std_msgs__Float32& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_data;
};
/*!
 * @brief This class represents the structure geometry_msgs__Vector3 defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__Vector3
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__Vector3();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__Vector3();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__Vector3 that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Vector3(
            const geometry_msgs__Vector3& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__Vector3 that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Vector3(
            geometry_msgs__Vector3&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__Vector3 that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Vector3& operator =(
            const geometry_msgs__Vector3& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__Vector3 that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Vector3& operator =(
            geometry_msgs__Vector3&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Vector3 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__Vector3& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Vector3 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__Vector3& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__Vector3& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
};
/*!
 * @brief This class represents the structure geometry_msgs__Point defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__Point
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__Point();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__Point();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__Point that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Point(
            const geometry_msgs__Point& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__Point that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Point(
            geometry_msgs__Point&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__Point that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Point& operator =(
            const geometry_msgs__Point& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__Point that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Point& operator =(
            geometry_msgs__Point&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Point object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__Point& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Point object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__Point& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__Point& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
};
/*!
 * @brief This class represents the structure geometry_msgs__Quaternion defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__Quaternion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__Quaternion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__Quaternion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__Quaternion that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Quaternion(
            const geometry_msgs__Quaternion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__Quaternion that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Quaternion(
            geometry_msgs__Quaternion&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__Quaternion that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Quaternion& operator =(
            const geometry_msgs__Quaternion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__Quaternion that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Quaternion& operator =(
            geometry_msgs__Quaternion&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Quaternion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__Quaternion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Quaternion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__Quaternion& x) const;

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            double _x);

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport double x() const;

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport double& x();

    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            double _y);

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport double y() const;

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport double& y();

    /*!
     * @brief This function sets a value in member z
     * @param _z New value for member z
     */
    eProsima_user_DllExport void z(
            double _z);

    /*!
     * @brief This function returns the value of member z
     * @return Value of member z
     */
    eProsima_user_DllExport double z() const;

    /*!
     * @brief This function returns a reference to member z
     * @return Reference to member z
     */
    eProsima_user_DllExport double& z();

    /*!
     * @brief This function sets a value in member w
     * @param _w New value for member w
     */
    eProsima_user_DllExport void w(
            double _w);

    /*!
     * @brief This function returns the value of member w
     * @return Value of member w
     */
    eProsima_user_DllExport double w() const;

    /*!
     * @brief This function returns a reference to member w
     * @return Reference to member w
     */
    eProsima_user_DllExport double& w();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__Quaternion& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_x;
    double m_y;
    double m_z;
    double m_w;
};
/*!
 * @brief This class represents the structure geometry_msgs__Twist defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__Twist
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__Twist();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__Twist();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__Twist that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Twist(
            const geometry_msgs__Twist& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__Twist that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Twist(
            geometry_msgs__Twist&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__Twist that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Twist& operator =(
            const geometry_msgs__Twist& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__Twist that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Twist& operator =(
            geometry_msgs__Twist&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Twist object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__Twist& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Twist object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__Twist& x) const;

    /*!
     * @brief This function copies the value in member linear
     * @param _linear New value to be copied in member linear
     */
    eProsima_user_DllExport void linear(
            const geometry_msgs__Vector3& _linear);

    /*!
     * @brief This function moves the value in member linear
     * @param _linear New value to be moved in member linear
     */
    eProsima_user_DllExport void linear(
            geometry_msgs__Vector3&& _linear);

    /*!
     * @brief This function returns a constant reference to member linear
     * @return Constant reference to member linear
     */
    eProsima_user_DllExport const geometry_msgs__Vector3& linear() const;

    /*!
     * @brief This function returns a reference to member linear
     * @return Reference to member linear
     */
    eProsima_user_DllExport geometry_msgs__Vector3& linear();
    /*!
     * @brief This function copies the value in member angular
     * @param _angular New value to be copied in member angular
     */
    eProsima_user_DllExport void angular(
            const geometry_msgs__Vector3& _angular);

    /*!
     * @brief This function moves the value in member angular
     * @param _angular New value to be moved in member angular
     */
    eProsima_user_DllExport void angular(
            geometry_msgs__Vector3&& _angular);

    /*!
     * @brief This function returns a constant reference to member angular
     * @return Constant reference to member angular
     */
    eProsima_user_DllExport const geometry_msgs__Vector3& angular() const;

    /*!
     * @brief This function returns a reference to member angular
     * @return Reference to member angular
     */
    eProsima_user_DllExport geometry_msgs__Vector3& angular();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__Twist& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    geometry_msgs__Vector3 m_linear;
    geometry_msgs__Vector3 m_angular;
};
/*!
 * @brief This class represents the structure geometry_msgs__TwistStamped defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__TwistStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__TwistStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__TwistStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__TwistStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistStamped(
            const geometry_msgs__TwistStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__TwistStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistStamped(
            geometry_msgs__TwistStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__TwistStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistStamped& operator =(
            const geometry_msgs__TwistStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__TwistStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistStamped& operator =(
            geometry_msgs__TwistStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__TwistStamped& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__TwistStamped& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const geometry_msgs__Twist& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            geometry_msgs__Twist&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const geometry_msgs__Twist& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport geometry_msgs__Twist& twist();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__TwistStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    geometry_msgs__Twist m_twist;
};
/*!
 * @brief This class represents the structure geometry_msgs__TwistWithCovariance defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__TwistWithCovariance
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__TwistWithCovariance();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance(
            const geometry_msgs__TwistWithCovariance& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance(
            geometry_msgs__TwistWithCovariance&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance& operator =(
            const geometry_msgs__TwistWithCovariance& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__TwistWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance& operator =(
            geometry_msgs__TwistWithCovariance&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__TwistWithCovariance& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__TwistWithCovariance& x) const;

    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const geometry_msgs__Twist& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            geometry_msgs__Twist&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const geometry_msgs__Twist& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport geometry_msgs__Twist& twist();
    /*!
     * @brief This function copies the value in member covariance
     * @param _covariance New value to be copied in member covariance
     */
    eProsima_user_DllExport void covariance(
            const std::array<double, 36>& _covariance);

    /*!
     * @brief This function moves the value in member covariance
     * @param _covariance New value to be moved in member covariance
     */
    eProsima_user_DllExport void covariance(
            std::array<double, 36>&& _covariance);

    /*!
     * @brief This function returns a constant reference to member covariance
     * @return Constant reference to member covariance
     */
    eProsima_user_DllExport const std::array<double, 36>& covariance() const;

    /*!
     * @brief This function returns a reference to member covariance
     * @return Reference to member covariance
     */
    eProsima_user_DllExport std::array<double, 36>& covariance();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__TwistWithCovariance& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    geometry_msgs__Twist m_twist;
    std::array<double, 36> m_covariance;
};
/*!
 * @brief This class represents the structure geometry_msgs__TwistWithCovarianceStamped defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__TwistWithCovarianceStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovarianceStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__TwistWithCovarianceStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovarianceStamped(
            const geometry_msgs__TwistWithCovarianceStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovarianceStamped(
            geometry_msgs__TwistWithCovarianceStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovarianceStamped& operator =(
            const geometry_msgs__TwistWithCovarianceStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__TwistWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovarianceStamped& operator =(
            geometry_msgs__TwistWithCovarianceStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__TwistWithCovarianceStamped& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__TwistWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__TwistWithCovarianceStamped& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member twist
     * @param _twist New value to be copied in member twist
     */
    eProsima_user_DllExport void twist(
            const geometry_msgs__TwistWithCovariance& _twist);

    /*!
     * @brief This function moves the value in member twist
     * @param _twist New value to be moved in member twist
     */
    eProsima_user_DllExport void twist(
            geometry_msgs__TwistWithCovariance&& _twist);

    /*!
     * @brief This function returns a constant reference to member twist
     * @return Constant reference to member twist
     */
    eProsima_user_DllExport const geometry_msgs__TwistWithCovariance& twist() const;

    /*!
     * @brief This function returns a reference to member twist
     * @return Reference to member twist
     */
    eProsima_user_DllExport geometry_msgs__TwistWithCovariance& twist();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__TwistWithCovarianceStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    geometry_msgs__TwistWithCovariance m_twist;
};
/*!
 * @brief This class represents the structure geometry_msgs__Pose defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__Pose
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__Pose();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__Pose();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__Pose that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Pose(
            const geometry_msgs__Pose& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__Pose that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Pose(
            geometry_msgs__Pose&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__Pose that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Pose& operator =(
            const geometry_msgs__Pose& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__Pose that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__Pose& operator =(
            geometry_msgs__Pose&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Pose object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__Pose& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__Pose object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__Pose& x) const;

    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    eProsima_user_DllExport void position(
            const geometry_msgs__Point& _position);

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    eProsima_user_DllExport void position(
            geometry_msgs__Point&& _position);

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    eProsima_user_DllExport const geometry_msgs__Point& position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport geometry_msgs__Point& position();
    /*!
     * @brief This function copies the value in member orientation
     * @param _orientation New value to be copied in member orientation
     */
    eProsima_user_DllExport void orientation(
            const geometry_msgs__Quaternion& _orientation);

    /*!
     * @brief This function moves the value in member orientation
     * @param _orientation New value to be moved in member orientation
     */
    eProsima_user_DllExport void orientation(
            geometry_msgs__Quaternion&& _orientation);

    /*!
     * @brief This function returns a constant reference to member orientation
     * @return Constant reference to member orientation
     */
    eProsima_user_DllExport const geometry_msgs__Quaternion& orientation() const;

    /*!
     * @brief This function returns a reference to member orientation
     * @return Reference to member orientation
     */
    eProsima_user_DllExport geometry_msgs__Quaternion& orientation();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__Pose& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    geometry_msgs__Point m_position;
    geometry_msgs__Quaternion m_orientation;
};
/*!
 * @brief This class represents the structure geometry_msgs__PoseStamped defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__PoseStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__PoseStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__PoseStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__PoseStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseStamped(
            const geometry_msgs__PoseStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__PoseStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseStamped(
            geometry_msgs__PoseStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__PoseStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseStamped& operator =(
            const geometry_msgs__PoseStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__PoseStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseStamped& operator =(
            geometry_msgs__PoseStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__PoseStamped& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__PoseStamped& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs__Pose& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs__Pose&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs__Pose& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs__Pose& pose();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__PoseStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    geometry_msgs__Pose m_pose;
};
/*!
 * @brief This class represents the structure geometry_msgs__PoseWithCovariance defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__PoseWithCovariance
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__PoseWithCovariance();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__PoseWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance(
            const geometry_msgs__PoseWithCovariance& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__PoseWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance(
            geometry_msgs__PoseWithCovariance&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__PoseWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance& operator =(
            const geometry_msgs__PoseWithCovariance& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__PoseWithCovariance that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance& operator =(
            geometry_msgs__PoseWithCovariance&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__PoseWithCovariance& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseWithCovariance object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__PoseWithCovariance& x) const;

    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs__Pose& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs__Pose&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs__Pose& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs__Pose& pose();
    /*!
     * @brief This function copies the value in member covariance
     * @param _covariance New value to be copied in member covariance
     */
    eProsima_user_DllExport void covariance(
            const std::array<double, 36>& _covariance);

    /*!
     * @brief This function moves the value in member covariance
     * @param _covariance New value to be moved in member covariance
     */
    eProsima_user_DllExport void covariance(
            std::array<double, 36>&& _covariance);

    /*!
     * @brief This function returns a constant reference to member covariance
     * @return Constant reference to member covariance
     */
    eProsima_user_DllExport const std::array<double, 36>& covariance() const;

    /*!
     * @brief This function returns a reference to member covariance
     * @return Reference to member covariance
     */
    eProsima_user_DllExport std::array<double, 36>& covariance();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__PoseWithCovariance& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    geometry_msgs__Pose m_pose;
    std::array<double, 36> m_covariance;
};
/*!
 * @brief This class represents the structure geometry_msgs__PoseWithCovarianceStamped defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class geometry_msgs__PoseWithCovarianceStamped
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovarianceStamped();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~geometry_msgs__PoseWithCovarianceStamped();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geometry_msgs__PoseWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovarianceStamped(
            const geometry_msgs__PoseWithCovarianceStamped& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geometry_msgs__PoseWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovarianceStamped(
            geometry_msgs__PoseWithCovarianceStamped&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geometry_msgs__PoseWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovarianceStamped& operator =(
            const geometry_msgs__PoseWithCovarianceStamped& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geometry_msgs__PoseWithCovarianceStamped that will be copied.
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovarianceStamped& operator =(
            geometry_msgs__PoseWithCovarianceStamped&& x);

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const geometry_msgs__PoseWithCovarianceStamped& x) const;

    /*!
     * @brief Comparison operator.
     * @param x geometry_msgs__PoseWithCovarianceStamped object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const geometry_msgs__PoseWithCovarianceStamped& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member pose
     * @param _pose New value to be copied in member pose
     */
    eProsima_user_DllExport void pose(
            const geometry_msgs__PoseWithCovariance& _pose);

    /*!
     * @brief This function moves the value in member pose
     * @param _pose New value to be moved in member pose
     */
    eProsima_user_DllExport void pose(
            geometry_msgs__PoseWithCovariance&& _pose);

    /*!
     * @brief This function returns a constant reference to member pose
     * @return Constant reference to member pose
     */
    eProsima_user_DllExport const geometry_msgs__PoseWithCovariance& pose() const;

    /*!
     * @brief This function returns a reference to member pose
     * @return Reference to member pose
     */
    eProsima_user_DllExport geometry_msgs__PoseWithCovariance& pose();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const geometry_msgs__PoseWithCovarianceStamped& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    geometry_msgs__PoseWithCovariance m_pose;
};
/*!
 * @brief This class represents the structure sensor_msgs__Imu defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__Imu
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__Imu();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__Imu();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__Imu that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Imu(
            const sensor_msgs__Imu& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__Imu that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Imu(
            sensor_msgs__Imu&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__Imu that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Imu& operator =(
            const sensor_msgs__Imu& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__Imu that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Imu& operator =(
            sensor_msgs__Imu&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__Imu object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__Imu& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__Imu object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__Imu& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member orientation
     * @param _orientation New value to be copied in member orientation
     */
    eProsima_user_DllExport void orientation(
            const geometry_msgs__Quaternion& _orientation);

    /*!
     * @brief This function moves the value in member orientation
     * @param _orientation New value to be moved in member orientation
     */
    eProsima_user_DllExport void orientation(
            geometry_msgs__Quaternion&& _orientation);

    /*!
     * @brief This function returns a constant reference to member orientation
     * @return Constant reference to member orientation
     */
    eProsima_user_DllExport const geometry_msgs__Quaternion& orientation() const;

    /*!
     * @brief This function returns a reference to member orientation
     * @return Reference to member orientation
     */
    eProsima_user_DllExport geometry_msgs__Quaternion& orientation();
    /*!
     * @brief This function copies the value in member orientation_covariance
     * @param _orientation_covariance New value to be copied in member orientation_covariance
     */
    eProsima_user_DllExport void orientation_covariance(
            const std::array<double, 9>& _orientation_covariance);

    /*!
     * @brief This function moves the value in member orientation_covariance
     * @param _orientation_covariance New value to be moved in member orientation_covariance
     */
    eProsima_user_DllExport void orientation_covariance(
            std::array<double, 9>&& _orientation_covariance);

    /*!
     * @brief This function returns a constant reference to member orientation_covariance
     * @return Constant reference to member orientation_covariance
     */
    eProsima_user_DllExport const std::array<double, 9>& orientation_covariance() const;

    /*!
     * @brief This function returns a reference to member orientation_covariance
     * @return Reference to member orientation_covariance
     */
    eProsima_user_DllExport std::array<double, 9>& orientation_covariance();
    /*!
     * @brief This function copies the value in member angular_velocity
     * @param _angular_velocity New value to be copied in member angular_velocity
     */
    eProsima_user_DllExport void angular_velocity(
            const geometry_msgs__Vector3& _angular_velocity);

    /*!
     * @brief This function moves the value in member angular_velocity
     * @param _angular_velocity New value to be moved in member angular_velocity
     */
    eProsima_user_DllExport void angular_velocity(
            geometry_msgs__Vector3&& _angular_velocity);

    /*!
     * @brief This function returns a constant reference to member angular_velocity
     * @return Constant reference to member angular_velocity
     */
    eProsima_user_DllExport const geometry_msgs__Vector3& angular_velocity() const;

    /*!
     * @brief This function returns a reference to member angular_velocity
     * @return Reference to member angular_velocity
     */
    eProsima_user_DllExport geometry_msgs__Vector3& angular_velocity();
    /*!
     * @brief This function copies the value in member angular_velocity_covariance
     * @param _angular_velocity_covariance New value to be copied in member angular_velocity_covariance
     */
    eProsima_user_DllExport void angular_velocity_covariance(
            const std::array<double, 9>& _angular_velocity_covariance);

    /*!
     * @brief This function moves the value in member angular_velocity_covariance
     * @param _angular_velocity_covariance New value to be moved in member angular_velocity_covariance
     */
    eProsima_user_DllExport void angular_velocity_covariance(
            std::array<double, 9>&& _angular_velocity_covariance);

    /*!
     * @brief This function returns a constant reference to member angular_velocity_covariance
     * @return Constant reference to member angular_velocity_covariance
     */
    eProsima_user_DllExport const std::array<double, 9>& angular_velocity_covariance() const;

    /*!
     * @brief This function returns a reference to member angular_velocity_covariance
     * @return Reference to member angular_velocity_covariance
     */
    eProsima_user_DllExport std::array<double, 9>& angular_velocity_covariance();
    /*!
     * @brief This function copies the value in member linear_acceleration
     * @param _linear_acceleration New value to be copied in member linear_acceleration
     */
    eProsima_user_DllExport void linear_acceleration(
            const geometry_msgs__Vector3& _linear_acceleration);

    /*!
     * @brief This function moves the value in member linear_acceleration
     * @param _linear_acceleration New value to be moved in member linear_acceleration
     */
    eProsima_user_DllExport void linear_acceleration(
            geometry_msgs__Vector3&& _linear_acceleration);

    /*!
     * @brief This function returns a constant reference to member linear_acceleration
     * @return Constant reference to member linear_acceleration
     */
    eProsima_user_DllExport const geometry_msgs__Vector3& linear_acceleration() const;

    /*!
     * @brief This function returns a reference to member linear_acceleration
     * @return Reference to member linear_acceleration
     */
    eProsima_user_DllExport geometry_msgs__Vector3& linear_acceleration();
    /*!
     * @brief This function copies the value in member linear_acceleration_covariance
     * @param _linear_acceleration_covariance New value to be copied in member linear_acceleration_covariance
     */
    eProsima_user_DllExport void linear_acceleration_covariance(
            const std::array<double, 9>& _linear_acceleration_covariance);

    /*!
     * @brief This function moves the value in member linear_acceleration_covariance
     * @param _linear_acceleration_covariance New value to be moved in member linear_acceleration_covariance
     */
    eProsima_user_DllExport void linear_acceleration_covariance(
            std::array<double, 9>&& _linear_acceleration_covariance);

    /*!
     * @brief This function returns a constant reference to member linear_acceleration_covariance
     * @return Constant reference to member linear_acceleration_covariance
     */
    eProsima_user_DllExport const std::array<double, 9>& linear_acceleration_covariance() const;

    /*!
     * @brief This function returns a reference to member linear_acceleration_covariance
     * @return Reference to member linear_acceleration_covariance
     */
    eProsima_user_DllExport std::array<double, 9>& linear_acceleration_covariance();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__Imu& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    geometry_msgs__Quaternion m_orientation;
    std::array<double, 9> m_orientation_covariance;
    geometry_msgs__Vector3 m_angular_velocity;
    std::array<double, 9> m_angular_velocity_covariance;
    geometry_msgs__Vector3 m_linear_acceleration;
    std::array<double, 9> m_linear_acceleration_covariance;
};
/*!
 * @brief This class represents the structure sensor_msgs__RegionOfInterest defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__RegionOfInterest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__RegionOfInterest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__RegionOfInterest that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest(
            const sensor_msgs__RegionOfInterest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__RegionOfInterest that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest(
            sensor_msgs__RegionOfInterest&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__RegionOfInterest that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest& operator =(
            const sensor_msgs__RegionOfInterest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__RegionOfInterest that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest& operator =(
            sensor_msgs__RegionOfInterest&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__RegionOfInterest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__RegionOfInterest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__RegionOfInterest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__RegionOfInterest& x) const;

    /*!
     * @brief This function sets a value in member x_offset
     * @param _x_offset New value for member x_offset
     */
    eProsima_user_DllExport void x_offset(
            uint32_t _x_offset);

    /*!
     * @brief This function returns the value of member x_offset
     * @return Value of member x_offset
     */
    eProsima_user_DllExport uint32_t x_offset() const;

    /*!
     * @brief This function returns a reference to member x_offset
     * @return Reference to member x_offset
     */
    eProsima_user_DllExport uint32_t& x_offset();

    /*!
     * @brief This function sets a value in member y_offset
     * @param _y_offset New value for member y_offset
     */
    eProsima_user_DllExport void y_offset(
            uint32_t _y_offset);

    /*!
     * @brief This function returns the value of member y_offset
     * @return Value of member y_offset
     */
    eProsima_user_DllExport uint32_t y_offset() const;

    /*!
     * @brief This function returns a reference to member y_offset
     * @return Reference to member y_offset
     */
    eProsima_user_DllExport uint32_t& y_offset();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function sets a value in member do_rectify
     * @param _do_rectify New value for member do_rectify
     */
    eProsima_user_DllExport void do_rectify(
            bool _do_rectify);

    /*!
     * @brief This function returns the value of member do_rectify
     * @return Value of member do_rectify
     */
    eProsima_user_DllExport bool do_rectify() const;

    /*!
     * @brief This function returns a reference to member do_rectify
     * @return Reference to member do_rectify
     */
    eProsima_user_DllExport bool& do_rectify();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__RegionOfInterest& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_x_offset;
    uint32_t m_y_offset;
    uint32_t m_height;
    uint32_t m_width;
    bool m_do_rectify;
};
/*!
 * @brief This class represents the structure sensor_msgs__CameraInfo defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__CameraInfo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__CameraInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__CameraInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__CameraInfo that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CameraInfo(
            const sensor_msgs__CameraInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__CameraInfo that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CameraInfo(
            sensor_msgs__CameraInfo&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__CameraInfo that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CameraInfo& operator =(
            const sensor_msgs__CameraInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__CameraInfo that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CameraInfo& operator =(
            sensor_msgs__CameraInfo&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__CameraInfo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__CameraInfo& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__CameraInfo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__CameraInfo& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function copies the value in member distortion_model
     * @param _distortion_model New value to be copied in member distortion_model
     */
    eProsima_user_DllExport void distortion_model(
            const std::string& _distortion_model);

    /*!
     * @brief This function moves the value in member distortion_model
     * @param _distortion_model New value to be moved in member distortion_model
     */
    eProsima_user_DllExport void distortion_model(
            std::string&& _distortion_model);

    /*!
     * @brief This function returns a constant reference to member distortion_model
     * @return Constant reference to member distortion_model
     */
    eProsima_user_DllExport const std::string& distortion_model() const;

    /*!
     * @brief This function returns a reference to member distortion_model
     * @return Reference to member distortion_model
     */
    eProsima_user_DllExport std::string& distortion_model();
    /*!
     * @brief This function copies the value in member D
     * @param _D New value to be copied in member D
     */
    eProsima_user_DllExport void D(
            const std::vector<double>& _D);

    /*!
     * @brief This function moves the value in member D
     * @param _D New value to be moved in member D
     */
    eProsima_user_DllExport void D(
            std::vector<double>&& _D);

    /*!
     * @brief This function returns a constant reference to member D
     * @return Constant reference to member D
     */
    eProsima_user_DllExport const std::vector<double>& D() const;

    /*!
     * @brief This function returns a reference to member D
     * @return Reference to member D
     */
    eProsima_user_DllExport std::vector<double>& D();
    /*!
     * @brief This function copies the value in member K
     * @param _K New value to be copied in member K
     */
    eProsima_user_DllExport void K(
            const std::array<double, 9>& _K);

    /*!
     * @brief This function moves the value in member K
     * @param _K New value to be moved in member K
     */
    eProsima_user_DllExport void K(
            std::array<double, 9>&& _K);

    /*!
     * @brief This function returns a constant reference to member K
     * @return Constant reference to member K
     */
    eProsima_user_DllExport const std::array<double, 9>& K() const;

    /*!
     * @brief This function returns a reference to member K
     * @return Reference to member K
     */
    eProsima_user_DllExport std::array<double, 9>& K();
    /*!
     * @brief This function copies the value in member R
     * @param _R New value to be copied in member R
     */
    eProsima_user_DllExport void R(
            const std::array<double, 9>& _R);

    /*!
     * @brief This function moves the value in member R
     * @param _R New value to be moved in member R
     */
    eProsima_user_DllExport void R(
            std::array<double, 9>&& _R);

    /*!
     * @brief This function returns a constant reference to member R
     * @return Constant reference to member R
     */
    eProsima_user_DllExport const std::array<double, 9>& R() const;

    /*!
     * @brief This function returns a reference to member R
     * @return Reference to member R
     */
    eProsima_user_DllExport std::array<double, 9>& R();
    /*!
     * @brief This function copies the value in member P
     * @param _P New value to be copied in member P
     */
    eProsima_user_DllExport void P(
            const std::array<double, 12>& _P);

    /*!
     * @brief This function moves the value in member P
     * @param _P New value to be moved in member P
     */
    eProsima_user_DllExport void P(
            std::array<double, 12>&& _P);

    /*!
     * @brief This function returns a constant reference to member P
     * @return Constant reference to member P
     */
    eProsima_user_DllExport const std::array<double, 12>& P() const;

    /*!
     * @brief This function returns a reference to member P
     * @return Reference to member P
     */
    eProsima_user_DllExport std::array<double, 12>& P();
    /*!
     * @brief This function sets a value in member binning_x
     * @param _binning_x New value for member binning_x
     */
    eProsima_user_DllExport void binning_x(
            uint32_t _binning_x);

    /*!
     * @brief This function returns the value of member binning_x
     * @return Value of member binning_x
     */
    eProsima_user_DllExport uint32_t binning_x() const;

    /*!
     * @brief This function returns a reference to member binning_x
     * @return Reference to member binning_x
     */
    eProsima_user_DllExport uint32_t& binning_x();

    /*!
     * @brief This function sets a value in member binning_y
     * @param _binning_y New value for member binning_y
     */
    eProsima_user_DllExport void binning_y(
            uint32_t _binning_y);

    /*!
     * @brief This function returns the value of member binning_y
     * @return Value of member binning_y
     */
    eProsima_user_DllExport uint32_t binning_y() const;

    /*!
     * @brief This function returns a reference to member binning_y
     * @return Reference to member binning_y
     */
    eProsima_user_DllExport uint32_t& binning_y();

    /*!
     * @brief This function copies the value in member roi
     * @param _roi New value to be copied in member roi
     */
    eProsima_user_DllExport void roi(
            const sensor_msgs__RegionOfInterest& _roi);

    /*!
     * @brief This function moves the value in member roi
     * @param _roi New value to be moved in member roi
     */
    eProsima_user_DllExport void roi(
            sensor_msgs__RegionOfInterest&& _roi);

    /*!
     * @brief This function returns a constant reference to member roi
     * @return Constant reference to member roi
     */
    eProsima_user_DllExport const sensor_msgs__RegionOfInterest& roi() const;

    /*!
     * @brief This function returns a reference to member roi
     * @return Reference to member roi
     */
    eProsima_user_DllExport sensor_msgs__RegionOfInterest& roi();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__CameraInfo& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    uint32_t m_height;
    uint32_t m_width;
    std::string m_distortion_model;
    std::vector<double> m_D;
    std::array<double, 9> m_K;
    std::array<double, 9> m_R;
    std::array<double, 12> m_P;
    uint32_t m_binning_x;
    uint32_t m_binning_y;
    sensor_msgs__RegionOfInterest m_roi;
};
/*!
 * @brief This class represents the structure sensor_msgs__Image defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__Image
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__Image();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__Image();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__Image that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Image(
            const sensor_msgs__Image& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__Image that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Image(
            sensor_msgs__Image&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__Image that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Image& operator =(
            const sensor_msgs__Image& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__Image that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__Image& operator =(
            sensor_msgs__Image&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__Image object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__Image& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__Image object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__Image& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function copies the value in member encoding
     * @param _encoding New value to be copied in member encoding
     */
    eProsima_user_DllExport void encoding(
            const std::string& _encoding);

    /*!
     * @brief This function moves the value in member encoding
     * @param _encoding New value to be moved in member encoding
     */
    eProsima_user_DllExport void encoding(
            std::string&& _encoding);

    /*!
     * @brief This function returns a constant reference to member encoding
     * @return Constant reference to member encoding
     */
    eProsima_user_DllExport const std::string& encoding() const;

    /*!
     * @brief This function returns a reference to member encoding
     * @return Reference to member encoding
     */
    eProsima_user_DllExport std::string& encoding();
    /*!
     * @brief This function sets a value in member is_bigendian
     * @param _is_bigendian New value for member is_bigendian
     */
    eProsima_user_DllExport void is_bigendian(
            uint8_t _is_bigendian);

    /*!
     * @brief This function returns the value of member is_bigendian
     * @return Value of member is_bigendian
     */
    eProsima_user_DllExport uint8_t is_bigendian() const;

    /*!
     * @brief This function returns a reference to member is_bigendian
     * @return Reference to member is_bigendian
     */
    eProsima_user_DllExport uint8_t& is_bigendian();

    /*!
     * @brief This function sets a value in member step
     * @param _step New value for member step
     */
    eProsima_user_DllExport void step(
            uint32_t _step);

    /*!
     * @brief This function returns the value of member step
     * @return Value of member step
     */
    eProsima_user_DllExport uint32_t step() const;

    /*!
     * @brief This function returns a reference to member step
     * @return Reference to member step
     */
    eProsima_user_DllExport uint32_t& step();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__Image& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    uint32_t m_height;
    uint32_t m_width;
    std::string m_encoding;
    uint8_t m_is_bigendian;
    uint32_t m_step;
    std::vector<uint8_t> m_data;
};
/*!
 * @brief This class represents the structure sensor_msgs__CompressedImage defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__CompressedImage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__CompressedImage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__CompressedImage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__CompressedImage that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CompressedImage(
            const sensor_msgs__CompressedImage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__CompressedImage that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CompressedImage(
            sensor_msgs__CompressedImage&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__CompressedImage that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CompressedImage& operator =(
            const sensor_msgs__CompressedImage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__CompressedImage that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__CompressedImage& operator =(
            sensor_msgs__CompressedImage&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__CompressedImage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__CompressedImage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__CompressedImage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__CompressedImage& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member format
     * @param _format New value to be copied in member format
     */
    eProsima_user_DllExport void format(
            const std::string& _format);

    /*!
     * @brief This function moves the value in member format
     * @param _format New value to be moved in member format
     */
    eProsima_user_DllExport void format(
            std::string&& _format);

    /*!
     * @brief This function returns a constant reference to member format
     * @return Constant reference to member format
     */
    eProsima_user_DllExport const std::string& format() const;

    /*!
     * @brief This function returns a reference to member format
     * @return Reference to member format
     */
    eProsima_user_DllExport std::string& format();
    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__CompressedImage& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    std::string m_format;
    std::vector<uint8_t> m_data;
};
/*!
 * @brief This class represents the structure sensor_msgs__PointField defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__PointField
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__PointField();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__PointField();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__PointField that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointField(
            const sensor_msgs__PointField& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__PointField that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointField(
            sensor_msgs__PointField&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__PointField that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointField& operator =(
            const sensor_msgs__PointField& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__PointField that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointField& operator =(
            sensor_msgs__PointField&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__PointField object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__PointField& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__PointField object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__PointField& x) const;

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function sets a value in member offset
     * @param _offset New value for member offset
     */
    eProsima_user_DllExport void offset(
            uint32_t _offset);

    /*!
     * @brief This function returns the value of member offset
     * @return Value of member offset
     */
    eProsima_user_DllExport uint32_t offset() const;

    /*!
     * @brief This function returns a reference to member offset
     * @return Reference to member offset
     */
    eProsima_user_DllExport uint32_t& offset();

    /*!
     * @brief This function sets a value in member datatype
     * @param _datatype New value for member datatype
     */
    eProsima_user_DllExport void datatype(
            uint8_t _datatype);

    /*!
     * @brief This function returns the value of member datatype
     * @return Value of member datatype
     */
    eProsima_user_DllExport uint8_t datatype() const;

    /*!
     * @brief This function returns a reference to member datatype
     * @return Reference to member datatype
     */
    eProsima_user_DllExport uint8_t& datatype();

    /*!
     * @brief This function sets a value in member count
     * @param _count New value for member count
     */
    eProsima_user_DllExport void count(
            uint32_t _count);

    /*!
     * @brief This function returns the value of member count
     * @return Value of member count
     */
    eProsima_user_DllExport uint32_t count() const;

    /*!
     * @brief This function returns a reference to member count
     * @return Reference to member count
     */
    eProsima_user_DllExport uint32_t& count();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__PointField& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_name;
    uint32_t m_offset;
    uint8_t m_datatype;
    uint32_t m_count;
};
/*!
 * @brief This class represents the structure sensor_msgs__PointCloud2 defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class sensor_msgs__PointCloud2
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport sensor_msgs__PointCloud2();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~sensor_msgs__PointCloud2();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object sensor_msgs__PointCloud2 that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointCloud2(
            const sensor_msgs__PointCloud2& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object sensor_msgs__PointCloud2 that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointCloud2(
            sensor_msgs__PointCloud2&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object sensor_msgs__PointCloud2 that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointCloud2& operator =(
            const sensor_msgs__PointCloud2& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object sensor_msgs__PointCloud2 that will be copied.
     */
    eProsima_user_DllExport sensor_msgs__PointCloud2& operator =(
            sensor_msgs__PointCloud2&& x);

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__PointCloud2 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const sensor_msgs__PointCloud2& x) const;

    /*!
     * @brief Comparison operator.
     * @param x sensor_msgs__PointCloud2 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const sensor_msgs__PointCloud2& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function copies the value in member fields
     * @param _fields New value to be copied in member fields
     */
    eProsima_user_DllExport void fields(
            const std::vector<sensor_msgs__PointField>& _fields);

    /*!
     * @brief This function moves the value in member fields
     * @param _fields New value to be moved in member fields
     */
    eProsima_user_DllExport void fields(
            std::vector<sensor_msgs__PointField>&& _fields);

    /*!
     * @brief This function returns a constant reference to member fields
     * @return Constant reference to member fields
     */
    eProsima_user_DllExport const std::vector<sensor_msgs__PointField>& fields() const;

    /*!
     * @brief This function returns a reference to member fields
     * @return Reference to member fields
     */
    eProsima_user_DllExport std::vector<sensor_msgs__PointField>& fields();
    /*!
     * @brief This function sets a value in member is_bigendian
     * @param _is_bigendian New value for member is_bigendian
     */
    eProsima_user_DllExport void is_bigendian(
            bool _is_bigendian);

    /*!
     * @brief This function returns the value of member is_bigendian
     * @return Value of member is_bigendian
     */
    eProsima_user_DllExport bool is_bigendian() const;

    /*!
     * @brief This function returns a reference to member is_bigendian
     * @return Reference to member is_bigendian
     */
    eProsima_user_DllExport bool& is_bigendian();

    /*!
     * @brief This function sets a value in member point_step
     * @param _point_step New value for member point_step
     */
    eProsima_user_DllExport void point_step(
            uint32_t _point_step);

    /*!
     * @brief This function returns the value of member point_step
     * @return Value of member point_step
     */
    eProsima_user_DllExport uint32_t point_step() const;

    /*!
     * @brief This function returns a reference to member point_step
     * @return Reference to member point_step
     */
    eProsima_user_DllExport uint32_t& point_step();

    /*!
     * @brief This function sets a value in member row_step
     * @param _row_step New value for member row_step
     */
    eProsima_user_DllExport void row_step(
            uint32_t _row_step);

    /*!
     * @brief This function returns the value of member row_step
     * @return Value of member row_step
     */
    eProsima_user_DllExport uint32_t row_step() const;

    /*!
     * @brief This function returns a reference to member row_step
     * @return Reference to member row_step
     */
    eProsima_user_DllExport uint32_t& row_step();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();
    /*!
     * @brief This function sets a value in member is_dense
     * @param _is_dense New value for member is_dense
     */
    eProsima_user_DllExport void is_dense(
            bool _is_dense);

    /*!
     * @brief This function returns the value of member is_dense
     * @return Value of member is_dense
     */
    eProsima_user_DllExport bool is_dense() const;

    /*!
     * @brief This function returns a reference to member is_dense
     * @return Reference to member is_dense
     */
    eProsima_user_DllExport bool& is_dense();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const sensor_msgs__PointCloud2& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    uint32_t m_height;
    uint32_t m_width;
    std::vector<sensor_msgs__PointField> m_fields;
    bool m_is_bigendian;
    uint32_t m_point_step;
    uint32_t m_row_step;
    std::vector<uint8_t> m_data;
    bool m_is_dense;
};
/*!
 * @brief This class represents the structure visualization_msgs__ImageMarker defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class visualization_msgs__ImageMarker
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport visualization_msgs__ImageMarker();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~visualization_msgs__ImageMarker();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object visualization_msgs__ImageMarker that will be copied.
     */
    eProsima_user_DllExport visualization_msgs__ImageMarker(
            const visualization_msgs__ImageMarker& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object visualization_msgs__ImageMarker that will be copied.
     */
    eProsima_user_DllExport visualization_msgs__ImageMarker(
            visualization_msgs__ImageMarker&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object visualization_msgs__ImageMarker that will be copied.
     */
    eProsima_user_DllExport visualization_msgs__ImageMarker& operator =(
            const visualization_msgs__ImageMarker& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object visualization_msgs__ImageMarker that will be copied.
     */
    eProsima_user_DllExport visualization_msgs__ImageMarker& operator =(
            visualization_msgs__ImageMarker&& x);

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs__ImageMarker object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const visualization_msgs__ImageMarker& x) const;

    /*!
     * @brief Comparison operator.
     * @param x visualization_msgs__ImageMarker object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const visualization_msgs__ImageMarker& x) const;

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const std_msgs__Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            std_msgs__Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const std_msgs__Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport std_msgs__Header& header();
    /*!
     * @brief This function copies the value in member ns
     * @param _ns New value to be copied in member ns
     */
    eProsima_user_DllExport void ns(
            const std::string& _ns);

    /*!
     * @brief This function moves the value in member ns
     * @param _ns New value to be moved in member ns
     */
    eProsima_user_DllExport void ns(
            std::string&& _ns);

    /*!
     * @brief This function returns a constant reference to member ns
     * @return Constant reference to member ns
     */
    eProsima_user_DllExport const std::string& ns() const;

    /*!
     * @brief This function returns a reference to member ns
     * @return Reference to member ns
     */
    eProsima_user_DllExport std::string& ns();
    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id();

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            int32_t _type);

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport int32_t type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport int32_t& type();

    /*!
     * @brief This function sets a value in member action
     * @param _action New value for member action
     */
    eProsima_user_DllExport void action(
            int32_t _action);

    /*!
     * @brief This function returns the value of member action
     * @return Value of member action
     */
    eProsima_user_DllExport int32_t action() const;

    /*!
     * @brief This function returns a reference to member action
     * @return Reference to member action
     */
    eProsima_user_DllExport int32_t& action();

    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    eProsima_user_DllExport void position(
            const geometry_msgs__Point& _position);

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    eProsima_user_DllExport void position(
            geometry_msgs__Point&& _position);

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    eProsima_user_DllExport const geometry_msgs__Point& position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport geometry_msgs__Point& position();
    /*!
     * @brief This function sets a value in member scale
     * @param _scale New value for member scale
     */
    eProsima_user_DllExport void scale(
            float _scale);

    /*!
     * @brief This function returns the value of member scale
     * @return Value of member scale
     */
    eProsima_user_DllExport float scale() const;

    /*!
     * @brief This function returns a reference to member scale
     * @return Reference to member scale
     */
    eProsima_user_DllExport float& scale();

    /*!
     * @brief This function copies the value in member outline_color
     * @param _outline_color New value to be copied in member outline_color
     */
    eProsima_user_DllExport void outline_color(
            const std_msgs__ColorRGBA& _outline_color);

    /*!
     * @brief This function moves the value in member outline_color
     * @param _outline_color New value to be moved in member outline_color
     */
    eProsima_user_DllExport void outline_color(
            std_msgs__ColorRGBA&& _outline_color);

    /*!
     * @brief This function returns a constant reference to member outline_color
     * @return Constant reference to member outline_color
     */
    eProsima_user_DllExport const std_msgs__ColorRGBA& outline_color() const;

    /*!
     * @brief This function returns a reference to member outline_color
     * @return Reference to member outline_color
     */
    eProsima_user_DllExport std_msgs__ColorRGBA& outline_color();
    /*!
     * @brief This function sets a value in member filled
     * @param _filled New value for member filled
     */
    eProsima_user_DllExport void filled(
            uint8_t _filled);

    /*!
     * @brief This function returns the value of member filled
     * @return Value of member filled
     */
    eProsima_user_DllExport uint8_t filled() const;

    /*!
     * @brief This function returns a reference to member filled
     * @return Reference to member filled
     */
    eProsima_user_DllExport uint8_t& filled();

    /*!
     * @brief This function copies the value in member fill_color
     * @param _fill_color New value to be copied in member fill_color
     */
    eProsima_user_DllExport void fill_color(
            const std_msgs__ColorRGBA& _fill_color);

    /*!
     * @brief This function moves the value in member fill_color
     * @param _fill_color New value to be moved in member fill_color
     */
    eProsima_user_DllExport void fill_color(
            std_msgs__ColorRGBA&& _fill_color);

    /*!
     * @brief This function returns a constant reference to member fill_color
     * @return Constant reference to member fill_color
     */
    eProsima_user_DllExport const std_msgs__ColorRGBA& fill_color() const;

    /*!
     * @brief This function returns a reference to member fill_color
     * @return Reference to member fill_color
     */
    eProsima_user_DllExport std_msgs__ColorRGBA& fill_color();
    /*!
     * @brief This function copies the value in member lifetime
     * @param _lifetime New value to be copied in member lifetime
     */
    eProsima_user_DllExport void lifetime(
            const builtins__Duration& _lifetime);

    /*!
     * @brief This function moves the value in member lifetime
     * @param _lifetime New value to be moved in member lifetime
     */
    eProsima_user_DllExport void lifetime(
            builtins__Duration&& _lifetime);

    /*!
     * @brief This function returns a constant reference to member lifetime
     * @return Constant reference to member lifetime
     */
    eProsima_user_DllExport const builtins__Duration& lifetime() const;

    /*!
     * @brief This function returns a reference to member lifetime
     * @return Reference to member lifetime
     */
    eProsima_user_DllExport builtins__Duration& lifetime();
    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const std::vector<geometry_msgs__Point>& _points);

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            std::vector<geometry_msgs__Point>&& _points);

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const std::vector<geometry_msgs__Point>& points() const;

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport std::vector<geometry_msgs__Point>& points();
    /*!
     * @brief This function copies the value in member outline_colors
     * @param _outline_colors New value to be copied in member outline_colors
     */
    eProsima_user_DllExport void outline_colors(
            const std::vector<std_msgs__ColorRGBA>& _outline_colors);

    /*!
     * @brief This function moves the value in member outline_colors
     * @param _outline_colors New value to be moved in member outline_colors
     */
    eProsima_user_DllExport void outline_colors(
            std::vector<std_msgs__ColorRGBA>&& _outline_colors);

    /*!
     * @brief This function returns a constant reference to member outline_colors
     * @return Constant reference to member outline_colors
     */
    eProsima_user_DllExport const std::vector<std_msgs__ColorRGBA>& outline_colors() const;

    /*!
     * @brief This function returns a reference to member outline_colors
     * @return Reference to member outline_colors
     */
    eProsima_user_DllExport std::vector<std_msgs__ColorRGBA>& outline_colors();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const visualization_msgs__ImageMarker& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std_msgs__Header m_header;
    std::string m_ns;
    int32_t m_id;
    int32_t m_type;
    int32_t m_action;
    geometry_msgs__Point m_position;
    float m_scale;
    std_msgs__ColorRGBA m_outline_color;
    uint8_t m_filled;
    std_msgs__ColorRGBA m_fill_color;
    builtins__Duration m_lifetime;
    std::vector<geometry_msgs__Point> m_points;
    std::vector<std_msgs__ColorRGBA> m_outline_colors;
};
/*!
 * @brief This class represents the structure foxglove_msgs__ImageMarkerArray defined by the user in the IDL file.
 * @ingroup ROS_TYPES
 */
class foxglove_msgs__ImageMarkerArray
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport foxglove_msgs__ImageMarkerArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~foxglove_msgs__ImageMarkerArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object foxglove_msgs__ImageMarkerArray that will be copied.
     */
    eProsima_user_DllExport foxglove_msgs__ImageMarkerArray(
            const foxglove_msgs__ImageMarkerArray& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object foxglove_msgs__ImageMarkerArray that will be copied.
     */
    eProsima_user_DllExport foxglove_msgs__ImageMarkerArray(
            foxglove_msgs__ImageMarkerArray&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object foxglove_msgs__ImageMarkerArray that will be copied.
     */
    eProsima_user_DllExport foxglove_msgs__ImageMarkerArray& operator =(
            const foxglove_msgs__ImageMarkerArray& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object foxglove_msgs__ImageMarkerArray that will be copied.
     */
    eProsima_user_DllExport foxglove_msgs__ImageMarkerArray& operator =(
            foxglove_msgs__ImageMarkerArray&& x);

    /*!
     * @brief Comparison operator.
     * @param x foxglove_msgs__ImageMarkerArray object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const foxglove_msgs__ImageMarkerArray& x) const;

    /*!
     * @brief Comparison operator.
     * @param x foxglove_msgs__ImageMarkerArray object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const foxglove_msgs__ImageMarkerArray& x) const;

    /*!
     * @brief This function copies the value in member markers
     * @param _markers New value to be copied in member markers
     */
    eProsima_user_DllExport void markers(
            const std::vector<visualization_msgs__ImageMarker>& _markers);

    /*!
     * @brief This function moves the value in member markers
     * @param _markers New value to be moved in member markers
     */
    eProsima_user_DllExport void markers(
            std::vector<visualization_msgs__ImageMarker>&& _markers);

    /*!
     * @brief This function returns a constant reference to member markers
     * @return Constant reference to member markers
     */
    eProsima_user_DllExport const std::vector<visualization_msgs__ImageMarker>& markers() const;

    /*!
     * @brief This function returns a reference to member markers
     * @return Reference to member markers
     */
    eProsima_user_DllExport std::vector<visualization_msgs__ImageMarker>& markers();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const foxglove_msgs__ImageMarkerArray& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<visualization_msgs__ImageMarker> m_markers;
};

#endif // _FAST_DDS_GENERATED_ROS_TYPES_H_