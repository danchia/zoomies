// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/rosgraph_msgs/TopicStatistics.proto

#include "ros/rosgraph_msgs/TopicStatistics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace rosgraph_msgs {
constexpr TopicStatistics::TopicStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_pub_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_sub_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_start_(nullptr)
  , window_stop_(nullptr)
  , period_mean_(nullptr)
  , period_stddev_(nullptr)
  , period_max_(nullptr)
  , stamp_age_mean_(nullptr)
  , stamp_age_stddev_(nullptr)
  , stamp_age_max_(nullptr)
  , delivered_msgs_(0)
  , dropped_msgs_(0)
  , traffic_(0){}
struct TopicStatisticsDefaultTypeInternal {
  constexpr TopicStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopicStatisticsDefaultTypeInternal() {}
  union {
    TopicStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopicStatisticsDefaultTypeInternal _TopicStatistics_default_instance_;
}  // namespace rosgraph_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto = nullptr;

const uint32_t TableStruct_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, topic_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, node_pub_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, node_sub_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, window_start_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, window_stop_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, delivered_msgs_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, dropped_msgs_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, traffic_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, period_mean_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, period_stddev_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, period_max_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, stamp_age_mean_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, stamp_age_stddev_),
  PROTOBUF_FIELD_OFFSET(::ros::rosgraph_msgs::TopicStatistics, stamp_age_max_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::rosgraph_msgs::TopicStatistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::rosgraph_msgs::_TopicStatistics_default_instance_),
};

const char descriptor_table_protodef_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'ros/rosgraph_msgs/TopicStatistics.prot"
  "o\022\021ros.rosgraph_msgs\032\022ros/builtins.proto"
  "\"\247\003\n\017TopicStatistics\022\r\n\005topic\030\001 \001(\t\022\020\n\010n"
  "ode_pub\030\002 \001(\t\022\020\n\010node_sub\030\003 \001(\t\022\037\n\014windo"
  "w_start\030\004 \001(\0132\t.ros.Time\022\036\n\013window_stop\030"
  "\005 \001(\0132\t.ros.Time\022\026\n\016delivered_msgs\030\006 \001(\005"
  "\022\024\n\014dropped_msgs\030\007 \001(\005\022\017\n\007traffic\030\010 \001(\005\022"
  "\"\n\013period_mean\030\t \001(\0132\r.ros.Duration\022$\n\rp"
  "eriod_stddev\030\n \001(\0132\r.ros.Duration\022!\n\nper"
  "iod_max\030\013 \001(\0132\r.ros.Duration\022%\n\016stamp_ag"
  "e_mean\030\014 \001(\0132\r.ros.Duration\022\'\n\020stamp_age"
  "_stddev\030\r \001(\0132\r.ros.Duration\022$\n\rstamp_ag"
  "e_max\030\016 \001(\0132\r.ros.Durationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_deps[1] = {
  &::descriptor_table_ros_2fbuiltins_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto = {
  false, false, 514, descriptor_table_protodef_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto, "ros/rosgraph_msgs/TopicStatistics.proto", 
  &descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_once, descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto::offsets,
  file_level_metadata_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto, file_level_enum_descriptors_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto, file_level_service_descriptors_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_getter() {
  return &descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto(&descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto);
namespace ros {
namespace rosgraph_msgs {

// ===================================================================

class TopicStatistics::_Internal {
 public:
  static const ::ros::Time& window_start(const TopicStatistics* msg);
  static const ::ros::Time& window_stop(const TopicStatistics* msg);
  static const ::ros::Duration& period_mean(const TopicStatistics* msg);
  static const ::ros::Duration& period_stddev(const TopicStatistics* msg);
  static const ::ros::Duration& period_max(const TopicStatistics* msg);
  static const ::ros::Duration& stamp_age_mean(const TopicStatistics* msg);
  static const ::ros::Duration& stamp_age_stddev(const TopicStatistics* msg);
  static const ::ros::Duration& stamp_age_max(const TopicStatistics* msg);
};

const ::ros::Time&
TopicStatistics::_Internal::window_start(const TopicStatistics* msg) {
  return *msg->window_start_;
}
const ::ros::Time&
TopicStatistics::_Internal::window_stop(const TopicStatistics* msg) {
  return *msg->window_stop_;
}
const ::ros::Duration&
TopicStatistics::_Internal::period_mean(const TopicStatistics* msg) {
  return *msg->period_mean_;
}
const ::ros::Duration&
TopicStatistics::_Internal::period_stddev(const TopicStatistics* msg) {
  return *msg->period_stddev_;
}
const ::ros::Duration&
TopicStatistics::_Internal::period_max(const TopicStatistics* msg) {
  return *msg->period_max_;
}
const ::ros::Duration&
TopicStatistics::_Internal::stamp_age_mean(const TopicStatistics* msg) {
  return *msg->stamp_age_mean_;
}
const ::ros::Duration&
TopicStatistics::_Internal::stamp_age_stddev(const TopicStatistics* msg) {
  return *msg->stamp_age_stddev_;
}
const ::ros::Duration&
TopicStatistics::_Internal::stamp_age_max(const TopicStatistics* msg) {
  return *msg->stamp_age_max_;
}
void TopicStatistics::clear_window_start() {
  if (GetArenaForAllocation() == nullptr && window_start_ != nullptr) {
    delete window_start_;
  }
  window_start_ = nullptr;
}
void TopicStatistics::clear_window_stop() {
  if (GetArenaForAllocation() == nullptr && window_stop_ != nullptr) {
    delete window_stop_;
  }
  window_stop_ = nullptr;
}
void TopicStatistics::clear_period_mean() {
  if (GetArenaForAllocation() == nullptr && period_mean_ != nullptr) {
    delete period_mean_;
  }
  period_mean_ = nullptr;
}
void TopicStatistics::clear_period_stddev() {
  if (GetArenaForAllocation() == nullptr && period_stddev_ != nullptr) {
    delete period_stddev_;
  }
  period_stddev_ = nullptr;
}
void TopicStatistics::clear_period_max() {
  if (GetArenaForAllocation() == nullptr && period_max_ != nullptr) {
    delete period_max_;
  }
  period_max_ = nullptr;
}
void TopicStatistics::clear_stamp_age_mean() {
  if (GetArenaForAllocation() == nullptr && stamp_age_mean_ != nullptr) {
    delete stamp_age_mean_;
  }
  stamp_age_mean_ = nullptr;
}
void TopicStatistics::clear_stamp_age_stddev() {
  if (GetArenaForAllocation() == nullptr && stamp_age_stddev_ != nullptr) {
    delete stamp_age_stddev_;
  }
  stamp_age_stddev_ = nullptr;
}
void TopicStatistics::clear_stamp_age_max() {
  if (GetArenaForAllocation() == nullptr && stamp_age_max_ != nullptr) {
    delete stamp_age_max_;
  }
  stamp_age_max_ = nullptr;
}
TopicStatistics::TopicStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.rosgraph_msgs.TopicStatistics)
}
TopicStatistics::TopicStatistics(const TopicStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic(), 
      GetArenaForAllocation());
  }
  node_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_pub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_pub().empty()) {
    node_pub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_pub(), 
      GetArenaForAllocation());
  }
  node_sub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_sub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_sub().empty()) {
    node_sub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_sub(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_window_start()) {
    window_start_ = new ::ros::Time(*from.window_start_);
  } else {
    window_start_ = nullptr;
  }
  if (from._internal_has_window_stop()) {
    window_stop_ = new ::ros::Time(*from.window_stop_);
  } else {
    window_stop_ = nullptr;
  }
  if (from._internal_has_period_mean()) {
    period_mean_ = new ::ros::Duration(*from.period_mean_);
  } else {
    period_mean_ = nullptr;
  }
  if (from._internal_has_period_stddev()) {
    period_stddev_ = new ::ros::Duration(*from.period_stddev_);
  } else {
    period_stddev_ = nullptr;
  }
  if (from._internal_has_period_max()) {
    period_max_ = new ::ros::Duration(*from.period_max_);
  } else {
    period_max_ = nullptr;
  }
  if (from._internal_has_stamp_age_mean()) {
    stamp_age_mean_ = new ::ros::Duration(*from.stamp_age_mean_);
  } else {
    stamp_age_mean_ = nullptr;
  }
  if (from._internal_has_stamp_age_stddev()) {
    stamp_age_stddev_ = new ::ros::Duration(*from.stamp_age_stddev_);
  } else {
    stamp_age_stddev_ = nullptr;
  }
  if (from._internal_has_stamp_age_max()) {
    stamp_age_max_ = new ::ros::Duration(*from.stamp_age_max_);
  } else {
    stamp_age_max_ = nullptr;
  }
  ::memcpy(&delivered_msgs_, &from.delivered_msgs_,
    static_cast<size_t>(reinterpret_cast<char*>(&traffic_) -
    reinterpret_cast<char*>(&delivered_msgs_)) + sizeof(traffic_));
  // @@protoc_insertion_point(copy_constructor:ros.rosgraph_msgs.TopicStatistics)
}

inline void TopicStatistics::SharedCtor() {
topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
node_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_pub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
node_sub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_sub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traffic_) -
    reinterpret_cast<char*>(&window_start_)) + sizeof(traffic_));
}

TopicStatistics::~TopicStatistics() {
  // @@protoc_insertion_point(destructor:ros.rosgraph_msgs.TopicStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TopicStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_sub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete window_start_;
  if (this != internal_default_instance()) delete window_stop_;
  if (this != internal_default_instance()) delete period_mean_;
  if (this != internal_default_instance()) delete period_stddev_;
  if (this != internal_default_instance()) delete period_max_;
  if (this != internal_default_instance()) delete stamp_age_mean_;
  if (this != internal_default_instance()) delete stamp_age_stddev_;
  if (this != internal_default_instance()) delete stamp_age_max_;
}

void TopicStatistics::ArenaDtor(void* object) {
  TopicStatistics* _this = reinterpret_cast< TopicStatistics* >(object);
  (void)_this;
}
void TopicStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopicStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopicStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.rosgraph_msgs.TopicStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty();
  node_pub_.ClearToEmpty();
  node_sub_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && window_start_ != nullptr) {
    delete window_start_;
  }
  window_start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && window_stop_ != nullptr) {
    delete window_stop_;
  }
  window_stop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && period_mean_ != nullptr) {
    delete period_mean_;
  }
  period_mean_ = nullptr;
  if (GetArenaForAllocation() == nullptr && period_stddev_ != nullptr) {
    delete period_stddev_;
  }
  period_stddev_ = nullptr;
  if (GetArenaForAllocation() == nullptr && period_max_ != nullptr) {
    delete period_max_;
  }
  period_max_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stamp_age_mean_ != nullptr) {
    delete stamp_age_mean_;
  }
  stamp_age_mean_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stamp_age_stddev_ != nullptr) {
    delete stamp_age_stddev_;
  }
  stamp_age_stddev_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stamp_age_max_ != nullptr) {
    delete stamp_age_max_;
  }
  stamp_age_max_ = nullptr;
  ::memset(&delivered_msgs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traffic_) -
      reinterpret_cast<char*>(&delivered_msgs_)) + sizeof(traffic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.rosgraph_msgs.TopicStatistics.topic"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_pub = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.rosgraph_msgs.TopicStatistics.node_pub"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_sub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_node_sub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.rosgraph_msgs.TopicStatistics.node_sub"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Time window_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Time window_stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_window_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delivered_msgs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          delivered_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dropped_msgs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          dropped_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 traffic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          traffic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration period_mean = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_mean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration period_stddev = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_stddev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration period_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration stamp_age_mean = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stamp_age_mean(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration stamp_age_stddev = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stamp_age_stddev(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration stamp_age_max = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_stamp_age_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.rosgraph_msgs.TopicStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.rosgraph_msgs.TopicStatistics.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string node_pub = 2;
  if (!this->_internal_node_pub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_pub().data(), static_cast<int>(this->_internal_node_pub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.rosgraph_msgs.TopicStatistics.node_pub");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_pub(), target);
  }

  // string node_sub = 3;
  if (!this->_internal_node_sub().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_sub().data(), static_cast<int>(this->_internal_node_sub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.rosgraph_msgs.TopicStatistics.node_sub");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_sub(), target);
  }

  // .ros.Time window_start = 4;
  if (this->_internal_has_window_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::window_start(this), target, stream);
  }

  // .ros.Time window_stop = 5;
  if (this->_internal_has_window_stop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::window_stop(this), target, stream);
  }

  // int32 delivered_msgs = 6;
  if (this->_internal_delivered_msgs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_delivered_msgs(), target);
  }

  // int32 dropped_msgs = 7;
  if (this->_internal_dropped_msgs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dropped_msgs(), target);
  }

  // int32 traffic = 8;
  if (this->_internal_traffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_traffic(), target);
  }

  // .ros.Duration period_mean = 9;
  if (this->_internal_has_period_mean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::period_mean(this), target, stream);
  }

  // .ros.Duration period_stddev = 10;
  if (this->_internal_has_period_stddev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::period_stddev(this), target, stream);
  }

  // .ros.Duration period_max = 11;
  if (this->_internal_has_period_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::period_max(this), target, stream);
  }

  // .ros.Duration stamp_age_mean = 12;
  if (this->_internal_has_stamp_age_mean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stamp_age_mean(this), target, stream);
  }

  // .ros.Duration stamp_age_stddev = 13;
  if (this->_internal_has_stamp_age_stddev()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stamp_age_stddev(this), target, stream);
  }

  // .ros.Duration stamp_age_max = 14;
  if (this->_internal_has_stamp_age_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::stamp_age_max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.rosgraph_msgs.TopicStatistics)
  return target;
}

size_t TopicStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.rosgraph_msgs.TopicStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string node_pub = 2;
  if (!this->_internal_node_pub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_pub());
  }

  // string node_sub = 3;
  if (!this->_internal_node_sub().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_sub());
  }

  // .ros.Time window_start = 4;
  if (this->_internal_has_window_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_start_);
  }

  // .ros.Time window_stop = 5;
  if (this->_internal_has_window_stop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_stop_);
  }

  // .ros.Duration period_mean = 9;
  if (this->_internal_has_period_mean()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_mean_);
  }

  // .ros.Duration period_stddev = 10;
  if (this->_internal_has_period_stddev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_stddev_);
  }

  // .ros.Duration period_max = 11;
  if (this->_internal_has_period_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_max_);
  }

  // .ros.Duration stamp_age_mean = 12;
  if (this->_internal_has_stamp_age_mean()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stamp_age_mean_);
  }

  // .ros.Duration stamp_age_stddev = 13;
  if (this->_internal_has_stamp_age_stddev()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stamp_age_stddev_);
  }

  // .ros.Duration stamp_age_max = 14;
  if (this->_internal_has_stamp_age_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stamp_age_max_);
  }

  // int32 delivered_msgs = 6;
  if (this->_internal_delivered_msgs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delivered_msgs());
  }

  // int32 dropped_msgs = 7;
  if (this->_internal_dropped_msgs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dropped_msgs());
  }

  // int32 traffic = 8;
  if (this->_internal_traffic() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_traffic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicStatistics::GetClassData() const { return &_class_data_; }

void TopicStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicStatistics *>(to)->MergeFrom(
      static_cast<const TopicStatistics &>(from));
}


void TopicStatistics::MergeFrom(const TopicStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.rosgraph_msgs.TopicStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _internal_set_topic(from._internal_topic());
  }
  if (!from._internal_node_pub().empty()) {
    _internal_set_node_pub(from._internal_node_pub());
  }
  if (!from._internal_node_sub().empty()) {
    _internal_set_node_sub(from._internal_node_sub());
  }
  if (from._internal_has_window_start()) {
    _internal_mutable_window_start()->::ros::Time::MergeFrom(from._internal_window_start());
  }
  if (from._internal_has_window_stop()) {
    _internal_mutable_window_stop()->::ros::Time::MergeFrom(from._internal_window_stop());
  }
  if (from._internal_has_period_mean()) {
    _internal_mutable_period_mean()->::ros::Duration::MergeFrom(from._internal_period_mean());
  }
  if (from._internal_has_period_stddev()) {
    _internal_mutable_period_stddev()->::ros::Duration::MergeFrom(from._internal_period_stddev());
  }
  if (from._internal_has_period_max()) {
    _internal_mutable_period_max()->::ros::Duration::MergeFrom(from._internal_period_max());
  }
  if (from._internal_has_stamp_age_mean()) {
    _internal_mutable_stamp_age_mean()->::ros::Duration::MergeFrom(from._internal_stamp_age_mean());
  }
  if (from._internal_has_stamp_age_stddev()) {
    _internal_mutable_stamp_age_stddev()->::ros::Duration::MergeFrom(from._internal_stamp_age_stddev());
  }
  if (from._internal_has_stamp_age_max()) {
    _internal_mutable_stamp_age_max()->::ros::Duration::MergeFrom(from._internal_stamp_age_max());
  }
  if (from._internal_delivered_msgs() != 0) {
    _internal_set_delivered_msgs(from._internal_delivered_msgs());
  }
  if (from._internal_dropped_msgs() != 0) {
    _internal_set_dropped_msgs(from._internal_dropped_msgs());
  }
  if (from._internal_traffic() != 0) {
    _internal_set_traffic(from._internal_traffic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicStatistics::CopyFrom(const TopicStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.rosgraph_msgs.TopicStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicStatistics::IsInitialized() const {
  return true;
}

void TopicStatistics::InternalSwap(TopicStatistics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &topic_, lhs_arena,
      &other->topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_pub_, lhs_arena,
      &other->node_pub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_sub_, lhs_arena,
      &other->node_sub_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopicStatistics, traffic_)
      + sizeof(TopicStatistics::traffic_)
      - PROTOBUF_FIELD_OFFSET(TopicStatistics, window_start_)>(
          reinterpret_cast<char*>(&window_start_),
          reinterpret_cast<char*>(&other->window_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_getter, &descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto_once,
      file_level_metadata_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rosgraph_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::rosgraph_msgs::TopicStatistics* Arena::CreateMaybeMessage< ::ros::rosgraph_msgs::TopicStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::rosgraph_msgs::TopicStatistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
