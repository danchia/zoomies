// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/rosgraph_msgs/TopicStatistics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/builtins.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto;
namespace ros {
namespace rosgraph_msgs {
class TopicStatistics;
struct TopicStatisticsDefaultTypeInternal;
extern TopicStatisticsDefaultTypeInternal _TopicStatistics_default_instance_;
}  // namespace rosgraph_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::rosgraph_msgs::TopicStatistics* Arena::CreateMaybeMessage<::ros::rosgraph_msgs::TopicStatistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace rosgraph_msgs {

// ===================================================================

class TopicStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.rosgraph_msgs.TopicStatistics) */ {
 public:
  inline TopicStatistics() : TopicStatistics(nullptr) {}
  ~TopicStatistics() override;
  explicit constexpr TopicStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicStatistics(const TopicStatistics& from);
  TopicStatistics(TopicStatistics&& from) noexcept
    : TopicStatistics() {
    *this = ::std::move(from);
  }

  inline TopicStatistics& operator=(const TopicStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicStatistics& operator=(TopicStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicStatistics* internal_default_instance() {
    return reinterpret_cast<const TopicStatistics*>(
               &_TopicStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicStatistics& a, TopicStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicStatistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicStatistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicStatistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.rosgraph_msgs.TopicStatistics";
  }
  protected:
  explicit TopicStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kNodePubFieldNumber = 2,
    kNodeSubFieldNumber = 3,
    kWindowStartFieldNumber = 4,
    kWindowStopFieldNumber = 5,
    kPeriodMeanFieldNumber = 9,
    kPeriodStddevFieldNumber = 10,
    kPeriodMaxFieldNumber = 11,
    kStampAgeMeanFieldNumber = 12,
    kStampAgeStddevFieldNumber = 13,
    kStampAgeMaxFieldNumber = 14,
    kDeliveredMsgsFieldNumber = 6,
    kDroppedMsgsFieldNumber = 7,
    kTrafficFieldNumber = 8,
  };
  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string node_pub = 2;
  void clear_node_pub();
  const std::string& node_pub() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_pub(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_pub();
  PROTOBUF_NODISCARD std::string* release_node_pub();
  void set_allocated_node_pub(std::string* node_pub);
  private:
  const std::string& _internal_node_pub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_pub(const std::string& value);
  std::string* _internal_mutable_node_pub();
  public:

  // string node_sub = 3;
  void clear_node_sub();
  const std::string& node_sub() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_sub(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_sub();
  PROTOBUF_NODISCARD std::string* release_node_sub();
  void set_allocated_node_sub(std::string* node_sub);
  private:
  const std::string& _internal_node_sub() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_sub(const std::string& value);
  std::string* _internal_mutable_node_sub();
  public:

  // .ros.Time window_start = 4;
  bool has_window_start() const;
  private:
  bool _internal_has_window_start() const;
  public:
  void clear_window_start();
  const ::ros::Time& window_start() const;
  PROTOBUF_NODISCARD ::ros::Time* release_window_start();
  ::ros::Time* mutable_window_start();
  void set_allocated_window_start(::ros::Time* window_start);
  private:
  const ::ros::Time& _internal_window_start() const;
  ::ros::Time* _internal_mutable_window_start();
  public:
  void unsafe_arena_set_allocated_window_start(
      ::ros::Time* window_start);
  ::ros::Time* unsafe_arena_release_window_start();

  // .ros.Time window_stop = 5;
  bool has_window_stop() const;
  private:
  bool _internal_has_window_stop() const;
  public:
  void clear_window_stop();
  const ::ros::Time& window_stop() const;
  PROTOBUF_NODISCARD ::ros::Time* release_window_stop();
  ::ros::Time* mutable_window_stop();
  void set_allocated_window_stop(::ros::Time* window_stop);
  private:
  const ::ros::Time& _internal_window_stop() const;
  ::ros::Time* _internal_mutable_window_stop();
  public:
  void unsafe_arena_set_allocated_window_stop(
      ::ros::Time* window_stop);
  ::ros::Time* unsafe_arena_release_window_stop();

  // .ros.Duration period_mean = 9;
  bool has_period_mean() const;
  private:
  bool _internal_has_period_mean() const;
  public:
  void clear_period_mean();
  const ::ros::Duration& period_mean() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_period_mean();
  ::ros::Duration* mutable_period_mean();
  void set_allocated_period_mean(::ros::Duration* period_mean);
  private:
  const ::ros::Duration& _internal_period_mean() const;
  ::ros::Duration* _internal_mutable_period_mean();
  public:
  void unsafe_arena_set_allocated_period_mean(
      ::ros::Duration* period_mean);
  ::ros::Duration* unsafe_arena_release_period_mean();

  // .ros.Duration period_stddev = 10;
  bool has_period_stddev() const;
  private:
  bool _internal_has_period_stddev() const;
  public:
  void clear_period_stddev();
  const ::ros::Duration& period_stddev() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_period_stddev();
  ::ros::Duration* mutable_period_stddev();
  void set_allocated_period_stddev(::ros::Duration* period_stddev);
  private:
  const ::ros::Duration& _internal_period_stddev() const;
  ::ros::Duration* _internal_mutable_period_stddev();
  public:
  void unsafe_arena_set_allocated_period_stddev(
      ::ros::Duration* period_stddev);
  ::ros::Duration* unsafe_arena_release_period_stddev();

  // .ros.Duration period_max = 11;
  bool has_period_max() const;
  private:
  bool _internal_has_period_max() const;
  public:
  void clear_period_max();
  const ::ros::Duration& period_max() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_period_max();
  ::ros::Duration* mutable_period_max();
  void set_allocated_period_max(::ros::Duration* period_max);
  private:
  const ::ros::Duration& _internal_period_max() const;
  ::ros::Duration* _internal_mutable_period_max();
  public:
  void unsafe_arena_set_allocated_period_max(
      ::ros::Duration* period_max);
  ::ros::Duration* unsafe_arena_release_period_max();

  // .ros.Duration stamp_age_mean = 12;
  bool has_stamp_age_mean() const;
  private:
  bool _internal_has_stamp_age_mean() const;
  public:
  void clear_stamp_age_mean();
  const ::ros::Duration& stamp_age_mean() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_stamp_age_mean();
  ::ros::Duration* mutable_stamp_age_mean();
  void set_allocated_stamp_age_mean(::ros::Duration* stamp_age_mean);
  private:
  const ::ros::Duration& _internal_stamp_age_mean() const;
  ::ros::Duration* _internal_mutable_stamp_age_mean();
  public:
  void unsafe_arena_set_allocated_stamp_age_mean(
      ::ros::Duration* stamp_age_mean);
  ::ros::Duration* unsafe_arena_release_stamp_age_mean();

  // .ros.Duration stamp_age_stddev = 13;
  bool has_stamp_age_stddev() const;
  private:
  bool _internal_has_stamp_age_stddev() const;
  public:
  void clear_stamp_age_stddev();
  const ::ros::Duration& stamp_age_stddev() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_stamp_age_stddev();
  ::ros::Duration* mutable_stamp_age_stddev();
  void set_allocated_stamp_age_stddev(::ros::Duration* stamp_age_stddev);
  private:
  const ::ros::Duration& _internal_stamp_age_stddev() const;
  ::ros::Duration* _internal_mutable_stamp_age_stddev();
  public:
  void unsafe_arena_set_allocated_stamp_age_stddev(
      ::ros::Duration* stamp_age_stddev);
  ::ros::Duration* unsafe_arena_release_stamp_age_stddev();

  // .ros.Duration stamp_age_max = 14;
  bool has_stamp_age_max() const;
  private:
  bool _internal_has_stamp_age_max() const;
  public:
  void clear_stamp_age_max();
  const ::ros::Duration& stamp_age_max() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_stamp_age_max();
  ::ros::Duration* mutable_stamp_age_max();
  void set_allocated_stamp_age_max(::ros::Duration* stamp_age_max);
  private:
  const ::ros::Duration& _internal_stamp_age_max() const;
  ::ros::Duration* _internal_mutable_stamp_age_max();
  public:
  void unsafe_arena_set_allocated_stamp_age_max(
      ::ros::Duration* stamp_age_max);
  ::ros::Duration* unsafe_arena_release_stamp_age_max();

  // int32 delivered_msgs = 6;
  void clear_delivered_msgs();
  int32_t delivered_msgs() const;
  void set_delivered_msgs(int32_t value);
  private:
  int32_t _internal_delivered_msgs() const;
  void _internal_set_delivered_msgs(int32_t value);
  public:

  // int32 dropped_msgs = 7;
  void clear_dropped_msgs();
  int32_t dropped_msgs() const;
  void set_dropped_msgs(int32_t value);
  private:
  int32_t _internal_dropped_msgs() const;
  void _internal_set_dropped_msgs(int32_t value);
  public:

  // int32 traffic = 8;
  void clear_traffic();
  int32_t traffic() const;
  void set_traffic(int32_t value);
  private:
  int32_t _internal_traffic() const;
  void _internal_set_traffic(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros.rosgraph_msgs.TopicStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_pub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_sub_;
  ::ros::Time* window_start_;
  ::ros::Time* window_stop_;
  ::ros::Duration* period_mean_;
  ::ros::Duration* period_stddev_;
  ::ros::Duration* period_max_;
  ::ros::Duration* stamp_age_mean_;
  ::ros::Duration* stamp_age_stddev_;
  ::ros::Duration* stamp_age_max_;
  int32_t delivered_msgs_;
  int32_t dropped_msgs_;
  int32_t traffic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicStatistics

// string topic = 1;
inline void TopicStatistics::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& TopicStatistics::topic() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicStatistics::set_topic(ArgT0&& arg0, ArgT... args) {
 
 topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.topic)
}
inline std::string* TopicStatistics::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.topic)
  return _s;
}
inline const std::string& TopicStatistics::_internal_topic() const {
  return topic_.Get();
}
inline void TopicStatistics::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TopicStatistics::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TopicStatistics::release_topic() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TopicStatistics::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (topic_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.topic)
}

// string node_pub = 2;
inline void TopicStatistics::clear_node_pub() {
  node_pub_.ClearToEmpty();
}
inline const std::string& TopicStatistics::node_pub() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.node_pub)
  return _internal_node_pub();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicStatistics::set_node_pub(ArgT0&& arg0, ArgT... args) {
 
 node_pub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.node_pub)
}
inline std::string* TopicStatistics::mutable_node_pub() {
  std::string* _s = _internal_mutable_node_pub();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.node_pub)
  return _s;
}
inline const std::string& TopicStatistics::_internal_node_pub() const {
  return node_pub_.Get();
}
inline void TopicStatistics::_internal_set_node_pub(const std::string& value) {
  
  node_pub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TopicStatistics::_internal_mutable_node_pub() {
  
  return node_pub_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TopicStatistics::release_node_pub() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.node_pub)
  return node_pub_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TopicStatistics::set_allocated_node_pub(std::string* node_pub) {
  if (node_pub != nullptr) {
    
  } else {
    
  }
  node_pub_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_pub,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_pub_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_pub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.node_pub)
}

// string node_sub = 3;
inline void TopicStatistics::clear_node_sub() {
  node_sub_.ClearToEmpty();
}
inline const std::string& TopicStatistics::node_sub() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.node_sub)
  return _internal_node_sub();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicStatistics::set_node_sub(ArgT0&& arg0, ArgT... args) {
 
 node_sub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.node_sub)
}
inline std::string* TopicStatistics::mutable_node_sub() {
  std::string* _s = _internal_mutable_node_sub();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.node_sub)
  return _s;
}
inline const std::string& TopicStatistics::_internal_node_sub() const {
  return node_sub_.Get();
}
inline void TopicStatistics::_internal_set_node_sub(const std::string& value) {
  
  node_sub_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TopicStatistics::_internal_mutable_node_sub() {
  
  return node_sub_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TopicStatistics::release_node_sub() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.node_sub)
  return node_sub_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TopicStatistics::set_allocated_node_sub(std::string* node_sub) {
  if (node_sub != nullptr) {
    
  } else {
    
  }
  node_sub_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_sub,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_sub_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_sub_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.node_sub)
}

// .ros.Time window_start = 4;
inline bool TopicStatistics::_internal_has_window_start() const {
  return this != internal_default_instance() && window_start_ != nullptr;
}
inline bool TopicStatistics::has_window_start() const {
  return _internal_has_window_start();
}
inline const ::ros::Time& TopicStatistics::_internal_window_start() const {
  const ::ros::Time* p = window_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Time&>(
      ::ros::_Time_default_instance_);
}
inline const ::ros::Time& TopicStatistics::window_start() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.window_start)
  return _internal_window_start();
}
inline void TopicStatistics::unsafe_arena_set_allocated_window_start(
    ::ros::Time* window_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_start_);
  }
  window_start_ = window_start;
  if (window_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.window_start)
}
inline ::ros::Time* TopicStatistics::release_window_start() {
  
  ::ros::Time* temp = window_start_;
  window_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Time* TopicStatistics::unsafe_arena_release_window_start() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.window_start)
  
  ::ros::Time* temp = window_start_;
  window_start_ = nullptr;
  return temp;
}
inline ::ros::Time* TopicStatistics::_internal_mutable_window_start() {
  
  if (window_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Time>(GetArenaForAllocation());
    window_start_ = p;
  }
  return window_start_;
}
inline ::ros::Time* TopicStatistics::mutable_window_start() {
  ::ros::Time* _msg = _internal_mutable_window_start();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.window_start)
  return _msg;
}
inline void TopicStatistics::set_allocated_window_start(::ros::Time* window_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_start_);
  }
  if (window_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_start));
    if (message_arena != submessage_arena) {
      window_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_start, submessage_arena);
    }
    
  } else {
    
  }
  window_start_ = window_start;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.window_start)
}

// .ros.Time window_stop = 5;
inline bool TopicStatistics::_internal_has_window_stop() const {
  return this != internal_default_instance() && window_stop_ != nullptr;
}
inline bool TopicStatistics::has_window_stop() const {
  return _internal_has_window_stop();
}
inline const ::ros::Time& TopicStatistics::_internal_window_stop() const {
  const ::ros::Time* p = window_stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Time&>(
      ::ros::_Time_default_instance_);
}
inline const ::ros::Time& TopicStatistics::window_stop() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.window_stop)
  return _internal_window_stop();
}
inline void TopicStatistics::unsafe_arena_set_allocated_window_stop(
    ::ros::Time* window_stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_stop_);
  }
  window_stop_ = window_stop;
  if (window_stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.window_stop)
}
inline ::ros::Time* TopicStatistics::release_window_stop() {
  
  ::ros::Time* temp = window_stop_;
  window_stop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Time* TopicStatistics::unsafe_arena_release_window_stop() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.window_stop)
  
  ::ros::Time* temp = window_stop_;
  window_stop_ = nullptr;
  return temp;
}
inline ::ros::Time* TopicStatistics::_internal_mutable_window_stop() {
  
  if (window_stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Time>(GetArenaForAllocation());
    window_stop_ = p;
  }
  return window_stop_;
}
inline ::ros::Time* TopicStatistics::mutable_window_stop() {
  ::ros::Time* _msg = _internal_mutable_window_stop();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.window_stop)
  return _msg;
}
inline void TopicStatistics::set_allocated_window_stop(::ros::Time* window_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_stop_);
  }
  if (window_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_stop));
    if (message_arena != submessage_arena) {
      window_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_stop, submessage_arena);
    }
    
  } else {
    
  }
  window_stop_ = window_stop;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.window_stop)
}

// int32 delivered_msgs = 6;
inline void TopicStatistics::clear_delivered_msgs() {
  delivered_msgs_ = 0;
}
inline int32_t TopicStatistics::_internal_delivered_msgs() const {
  return delivered_msgs_;
}
inline int32_t TopicStatistics::delivered_msgs() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.delivered_msgs)
  return _internal_delivered_msgs();
}
inline void TopicStatistics::_internal_set_delivered_msgs(int32_t value) {
  
  delivered_msgs_ = value;
}
inline void TopicStatistics::set_delivered_msgs(int32_t value) {
  _internal_set_delivered_msgs(value);
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.delivered_msgs)
}

// int32 dropped_msgs = 7;
inline void TopicStatistics::clear_dropped_msgs() {
  dropped_msgs_ = 0;
}
inline int32_t TopicStatistics::_internal_dropped_msgs() const {
  return dropped_msgs_;
}
inline int32_t TopicStatistics::dropped_msgs() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.dropped_msgs)
  return _internal_dropped_msgs();
}
inline void TopicStatistics::_internal_set_dropped_msgs(int32_t value) {
  
  dropped_msgs_ = value;
}
inline void TopicStatistics::set_dropped_msgs(int32_t value) {
  _internal_set_dropped_msgs(value);
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.dropped_msgs)
}

// int32 traffic = 8;
inline void TopicStatistics::clear_traffic() {
  traffic_ = 0;
}
inline int32_t TopicStatistics::_internal_traffic() const {
  return traffic_;
}
inline int32_t TopicStatistics::traffic() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.traffic)
  return _internal_traffic();
}
inline void TopicStatistics::_internal_set_traffic(int32_t value) {
  
  traffic_ = value;
}
inline void TopicStatistics::set_traffic(int32_t value) {
  _internal_set_traffic(value);
  // @@protoc_insertion_point(field_set:ros.rosgraph_msgs.TopicStatistics.traffic)
}

// .ros.Duration period_mean = 9;
inline bool TopicStatistics::_internal_has_period_mean() const {
  return this != internal_default_instance() && period_mean_ != nullptr;
}
inline bool TopicStatistics::has_period_mean() const {
  return _internal_has_period_mean();
}
inline const ::ros::Duration& TopicStatistics::_internal_period_mean() const {
  const ::ros::Duration* p = period_mean_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::period_mean() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.period_mean)
  return _internal_period_mean();
}
inline void TopicStatistics::unsafe_arena_set_allocated_period_mean(
    ::ros::Duration* period_mean) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_mean_);
  }
  period_mean_ = period_mean;
  if (period_mean) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_mean)
}
inline ::ros::Duration* TopicStatistics::release_period_mean() {
  
  ::ros::Duration* temp = period_mean_;
  period_mean_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_period_mean() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.period_mean)
  
  ::ros::Duration* temp = period_mean_;
  period_mean_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_period_mean() {
  
  if (period_mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    period_mean_ = p;
  }
  return period_mean_;
}
inline ::ros::Duration* TopicStatistics::mutable_period_mean() {
  ::ros::Duration* _msg = _internal_mutable_period_mean();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.period_mean)
  return _msg;
}
inline void TopicStatistics::set_allocated_period_mean(::ros::Duration* period_mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_mean_);
  }
  if (period_mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_mean));
    if (message_arena != submessage_arena) {
      period_mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period_mean, submessage_arena);
    }
    
  } else {
    
  }
  period_mean_ = period_mean;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_mean)
}

// .ros.Duration period_stddev = 10;
inline bool TopicStatistics::_internal_has_period_stddev() const {
  return this != internal_default_instance() && period_stddev_ != nullptr;
}
inline bool TopicStatistics::has_period_stddev() const {
  return _internal_has_period_stddev();
}
inline const ::ros::Duration& TopicStatistics::_internal_period_stddev() const {
  const ::ros::Duration* p = period_stddev_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::period_stddev() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.period_stddev)
  return _internal_period_stddev();
}
inline void TopicStatistics::unsafe_arena_set_allocated_period_stddev(
    ::ros::Duration* period_stddev) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_stddev_);
  }
  period_stddev_ = period_stddev;
  if (period_stddev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_stddev)
}
inline ::ros::Duration* TopicStatistics::release_period_stddev() {
  
  ::ros::Duration* temp = period_stddev_;
  period_stddev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_period_stddev() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.period_stddev)
  
  ::ros::Duration* temp = period_stddev_;
  period_stddev_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_period_stddev() {
  
  if (period_stddev_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    period_stddev_ = p;
  }
  return period_stddev_;
}
inline ::ros::Duration* TopicStatistics::mutable_period_stddev() {
  ::ros::Duration* _msg = _internal_mutable_period_stddev();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.period_stddev)
  return _msg;
}
inline void TopicStatistics::set_allocated_period_stddev(::ros::Duration* period_stddev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_stddev_);
  }
  if (period_stddev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_stddev));
    if (message_arena != submessage_arena) {
      period_stddev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period_stddev, submessage_arena);
    }
    
  } else {
    
  }
  period_stddev_ = period_stddev;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_stddev)
}

// .ros.Duration period_max = 11;
inline bool TopicStatistics::_internal_has_period_max() const {
  return this != internal_default_instance() && period_max_ != nullptr;
}
inline bool TopicStatistics::has_period_max() const {
  return _internal_has_period_max();
}
inline const ::ros::Duration& TopicStatistics::_internal_period_max() const {
  const ::ros::Duration* p = period_max_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::period_max() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.period_max)
  return _internal_period_max();
}
inline void TopicStatistics::unsafe_arena_set_allocated_period_max(
    ::ros::Duration* period_max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_max_);
  }
  period_max_ = period_max;
  if (period_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_max)
}
inline ::ros::Duration* TopicStatistics::release_period_max() {
  
  ::ros::Duration* temp = period_max_;
  period_max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_period_max() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.period_max)
  
  ::ros::Duration* temp = period_max_;
  period_max_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_period_max() {
  
  if (period_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    period_max_ = p;
  }
  return period_max_;
}
inline ::ros::Duration* TopicStatistics::mutable_period_max() {
  ::ros::Duration* _msg = _internal_mutable_period_max();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.period_max)
  return _msg;
}
inline void TopicStatistics::set_allocated_period_max(::ros::Duration* period_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_max_);
  }
  if (period_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_max));
    if (message_arena != submessage_arena) {
      period_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period_max, submessage_arena);
    }
    
  } else {
    
  }
  period_max_ = period_max;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.period_max)
}

// .ros.Duration stamp_age_mean = 12;
inline bool TopicStatistics::_internal_has_stamp_age_mean() const {
  return this != internal_default_instance() && stamp_age_mean_ != nullptr;
}
inline bool TopicStatistics::has_stamp_age_mean() const {
  return _internal_has_stamp_age_mean();
}
inline const ::ros::Duration& TopicStatistics::_internal_stamp_age_mean() const {
  const ::ros::Duration* p = stamp_age_mean_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::stamp_age_mean() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.stamp_age_mean)
  return _internal_stamp_age_mean();
}
inline void TopicStatistics::unsafe_arena_set_allocated_stamp_age_mean(
    ::ros::Duration* stamp_age_mean) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_mean_);
  }
  stamp_age_mean_ = stamp_age_mean;
  if (stamp_age_mean) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_mean)
}
inline ::ros::Duration* TopicStatistics::release_stamp_age_mean() {
  
  ::ros::Duration* temp = stamp_age_mean_;
  stamp_age_mean_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_stamp_age_mean() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.stamp_age_mean)
  
  ::ros::Duration* temp = stamp_age_mean_;
  stamp_age_mean_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_stamp_age_mean() {
  
  if (stamp_age_mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    stamp_age_mean_ = p;
  }
  return stamp_age_mean_;
}
inline ::ros::Duration* TopicStatistics::mutable_stamp_age_mean() {
  ::ros::Duration* _msg = _internal_mutable_stamp_age_mean();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.stamp_age_mean)
  return _msg;
}
inline void TopicStatistics::set_allocated_stamp_age_mean(::ros::Duration* stamp_age_mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_mean_);
  }
  if (stamp_age_mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_mean));
    if (message_arena != submessage_arena) {
      stamp_age_mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp_age_mean, submessage_arena);
    }
    
  } else {
    
  }
  stamp_age_mean_ = stamp_age_mean;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_mean)
}

// .ros.Duration stamp_age_stddev = 13;
inline bool TopicStatistics::_internal_has_stamp_age_stddev() const {
  return this != internal_default_instance() && stamp_age_stddev_ != nullptr;
}
inline bool TopicStatistics::has_stamp_age_stddev() const {
  return _internal_has_stamp_age_stddev();
}
inline const ::ros::Duration& TopicStatistics::_internal_stamp_age_stddev() const {
  const ::ros::Duration* p = stamp_age_stddev_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::stamp_age_stddev() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.stamp_age_stddev)
  return _internal_stamp_age_stddev();
}
inline void TopicStatistics::unsafe_arena_set_allocated_stamp_age_stddev(
    ::ros::Duration* stamp_age_stddev) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_stddev_);
  }
  stamp_age_stddev_ = stamp_age_stddev;
  if (stamp_age_stddev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_stddev)
}
inline ::ros::Duration* TopicStatistics::release_stamp_age_stddev() {
  
  ::ros::Duration* temp = stamp_age_stddev_;
  stamp_age_stddev_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_stamp_age_stddev() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.stamp_age_stddev)
  
  ::ros::Duration* temp = stamp_age_stddev_;
  stamp_age_stddev_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_stamp_age_stddev() {
  
  if (stamp_age_stddev_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    stamp_age_stddev_ = p;
  }
  return stamp_age_stddev_;
}
inline ::ros::Duration* TopicStatistics::mutable_stamp_age_stddev() {
  ::ros::Duration* _msg = _internal_mutable_stamp_age_stddev();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.stamp_age_stddev)
  return _msg;
}
inline void TopicStatistics::set_allocated_stamp_age_stddev(::ros::Duration* stamp_age_stddev) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_stddev_);
  }
  if (stamp_age_stddev) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_stddev));
    if (message_arena != submessage_arena) {
      stamp_age_stddev = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp_age_stddev, submessage_arena);
    }
    
  } else {
    
  }
  stamp_age_stddev_ = stamp_age_stddev;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_stddev)
}

// .ros.Duration stamp_age_max = 14;
inline bool TopicStatistics::_internal_has_stamp_age_max() const {
  return this != internal_default_instance() && stamp_age_max_ != nullptr;
}
inline bool TopicStatistics::has_stamp_age_max() const {
  return _internal_has_stamp_age_max();
}
inline const ::ros::Duration& TopicStatistics::_internal_stamp_age_max() const {
  const ::ros::Duration* p = stamp_age_max_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& TopicStatistics::stamp_age_max() const {
  // @@protoc_insertion_point(field_get:ros.rosgraph_msgs.TopicStatistics.stamp_age_max)
  return _internal_stamp_age_max();
}
inline void TopicStatistics::unsafe_arena_set_allocated_stamp_age_max(
    ::ros::Duration* stamp_age_max) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_max_);
  }
  stamp_age_max_ = stamp_age_max;
  if (stamp_age_max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_max)
}
inline ::ros::Duration* TopicStatistics::release_stamp_age_max() {
  
  ::ros::Duration* temp = stamp_age_max_;
  stamp_age_max_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* TopicStatistics::unsafe_arena_release_stamp_age_max() {
  // @@protoc_insertion_point(field_release:ros.rosgraph_msgs.TopicStatistics.stamp_age_max)
  
  ::ros::Duration* temp = stamp_age_max_;
  stamp_age_max_ = nullptr;
  return temp;
}
inline ::ros::Duration* TopicStatistics::_internal_mutable_stamp_age_max() {
  
  if (stamp_age_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    stamp_age_max_ = p;
  }
  return stamp_age_max_;
}
inline ::ros::Duration* TopicStatistics::mutable_stamp_age_max() {
  ::ros::Duration* _msg = _internal_mutable_stamp_age_max();
  // @@protoc_insertion_point(field_mutable:ros.rosgraph_msgs.TopicStatistics.stamp_age_max)
  return _msg;
}
inline void TopicStatistics::set_allocated_stamp_age_max(::ros::Duration* stamp_age_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_max_);
  }
  if (stamp_age_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_age_max));
    if (message_arena != submessage_arena) {
      stamp_age_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp_age_max, submessage_arena);
    }
    
  } else {
    
  }
  stamp_age_max_ = stamp_age_max;
  // @@protoc_insertion_point(field_set_allocated:ros.rosgraph_msgs.TopicStatistics.stamp_age_max)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rosgraph_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2frosgraph_5fmsgs_2fTopicStatistics_2eproto
