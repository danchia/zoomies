// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/shape_msgs/MeshTriangle.proto

#include "ros/shape_msgs/MeshTriangle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace shape_msgs {
constexpr MeshTriangle::MeshTriangle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertex_indices_()
  , _vertex_indices_cached_byte_size_(0){}
struct MeshTriangleDefaultTypeInternal {
  constexpr MeshTriangleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshTriangleDefaultTypeInternal() {}
  union {
    MeshTriangle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshTriangleDefaultTypeInternal _MeshTriangle_default_instance_;
}  // namespace shape_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto = nullptr;

const uint32_t TableStruct_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::shape_msgs::MeshTriangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::shape_msgs::MeshTriangle, vertex_indices_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::shape_msgs::MeshTriangle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::shape_msgs::_MeshTriangle_default_instance_),
};

const char descriptor_table_protodef_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!ros/shape_msgs/MeshTriangle.proto\022\016ros"
  ".shape_msgs\"&\n\014MeshTriangle\022\026\n\016vertex_in"
  "dices\030\001 \003(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto = {
  false, false, 99, descriptor_table_protodef_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto, "ros/shape_msgs/MeshTriangle.proto", 
  &descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto::offsets,
  file_level_metadata_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto, file_level_enum_descriptors_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto, file_level_service_descriptors_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto_getter() {
  return &descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto(&descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto);
namespace ros {
namespace shape_msgs {

// ===================================================================

class MeshTriangle::_Internal {
 public:
};

MeshTriangle::MeshTriangle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertex_indices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.shape_msgs.MeshTriangle)
}
MeshTriangle::MeshTriangle(const MeshTriangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertex_indices_(from.vertex_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ros.shape_msgs.MeshTriangle)
}

inline void MeshTriangle::SharedCtor() {
}

MeshTriangle::~MeshTriangle() {
  // @@protoc_insertion_point(destructor:ros.shape_msgs.MeshTriangle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeshTriangle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeshTriangle::ArenaDtor(void* object) {
  MeshTriangle* _this = reinterpret_cast< MeshTriangle* >(object);
  (void)_this;
}
void MeshTriangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshTriangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeshTriangle::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.shape_msgs.MeshTriangle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshTriangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 vertex_indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vertex_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_vertex_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeshTriangle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.shape_msgs.MeshTriangle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 vertex_indices = 1;
  {
    int byte_size = _vertex_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_vertex_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.shape_msgs.MeshTriangle)
  return target;
}

size_t MeshTriangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.shape_msgs.MeshTriangle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vertex_indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vertex_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vertex_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeshTriangle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeshTriangle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeshTriangle::GetClassData() const { return &_class_data_; }

void MeshTriangle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeshTriangle *>(to)->MergeFrom(
      static_cast<const MeshTriangle &>(from));
}


void MeshTriangle::MergeFrom(const MeshTriangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.shape_msgs.MeshTriangle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_indices_.MergeFrom(from.vertex_indices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeshTriangle::CopyFrom(const MeshTriangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.shape_msgs.MeshTriangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshTriangle::IsInitialized() const {
  return true;
}

void MeshTriangle::InternalSwap(MeshTriangle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertex_indices_.InternalSwap(&other->vertex_indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshTriangle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto_getter, &descriptor_table_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto_once,
      file_level_metadata_ros_2fshape_5fmsgs_2fMeshTriangle_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace shape_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::shape_msgs::MeshTriangle* Arena::CreateMaybeMessage< ::ros::shape_msgs::MeshTriangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::shape_msgs::MeshTriangle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
