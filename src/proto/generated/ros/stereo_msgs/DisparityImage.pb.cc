// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/stereo_msgs/DisparityImage.proto

#include "ros/stereo_msgs/DisparityImage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace stereo_msgs {
constexpr DisparityImage::DisparityImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , image_(nullptr)
  , valid_window_(nullptr)
  , f_(0)
  , t_(0)
  , min_disparity_(0)
  , max_disparity_(0)
  , delta_d_(0){}
struct DisparityImageDefaultTypeInternal {
  constexpr DisparityImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DisparityImageDefaultTypeInternal() {}
  union {
    DisparityImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DisparityImageDefaultTypeInternal _DisparityImage_default_instance_;
}  // namespace stereo_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto = nullptr;

const uint32_t TableStruct_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, header_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, image_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, f_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, t_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, valid_window_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, min_disparity_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, max_disparity_),
  PROTOBUF_FIELD_OFFSET(::ros::stereo_msgs::DisparityImage, delta_d_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::stereo_msgs::DisparityImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::stereo_msgs::_DisparityImage_default_instance_),
};

const char descriptor_table_protodef_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$ros/stereo_msgs/DisparityImage.proto\022\017"
  "ros.stereo_msgs\032\033ros/sensor_msgs/Image.p"
  "roto\032&ros/sensor_msgs/RegionOfInterest.p"
  "roto\032\031ros/std_msgs/Header.proto\"\353\001\n\016Disp"
  "arityImage\022$\n\006header\030\001 \001(\0132\024.ros.std_msg"
  "s.Header\022%\n\005image\030\002 \001(\0132\026.ros.sensor_msg"
  "s.Image\022\t\n\001f\030\003 \001(\002\022\t\n\001T\030\004 \001(\002\0227\n\014valid_w"
  "indow\030\005 \001(\0132!.ros.sensor_msgs.RegionOfIn"
  "terest\022\025\n\rmin_disparity\030\006 \001(\002\022\025\n\rmax_dis"
  "parity\030\007 \001(\002\022\017\n\007delta_d\030\010 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_deps[3] = {
  &::descriptor_table_ros_2fsensor_5fmsgs_2fImage_2eproto,
  &::descriptor_table_ros_2fsensor_5fmsgs_2fRegionOfInterest_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto = {
  false, false, 397, descriptor_table_protodef_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto, "ros/stereo_msgs/DisparityImage.proto", 
  &descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_once, descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto::offsets,
  file_level_metadata_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto, file_level_enum_descriptors_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto, file_level_service_descriptors_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_getter() {
  return &descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto(&descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto);
namespace ros {
namespace stereo_msgs {

// ===================================================================

class DisparityImage::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const DisparityImage* msg);
  static const ::ros::sensor_msgs::Image& image(const DisparityImage* msg);
  static const ::ros::sensor_msgs::RegionOfInterest& valid_window(const DisparityImage* msg);
};

const ::ros::std_msgs::Header&
DisparityImage::_Internal::header(const DisparityImage* msg) {
  return *msg->header_;
}
const ::ros::sensor_msgs::Image&
DisparityImage::_Internal::image(const DisparityImage* msg) {
  return *msg->image_;
}
const ::ros::sensor_msgs::RegionOfInterest&
DisparityImage::_Internal::valid_window(const DisparityImage* msg) {
  return *msg->valid_window_;
}
void DisparityImage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DisparityImage::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
void DisparityImage::clear_valid_window() {
  if (GetArenaForAllocation() == nullptr && valid_window_ != nullptr) {
    delete valid_window_;
  }
  valid_window_ = nullptr;
}
DisparityImage::DisparityImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.stereo_msgs.DisparityImage)
}
DisparityImage::DisparityImage(const DisparityImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_image()) {
    image_ = new ::ros::sensor_msgs::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_valid_window()) {
    valid_window_ = new ::ros::sensor_msgs::RegionOfInterest(*from.valid_window_);
  } else {
    valid_window_ = nullptr;
  }
  ::memcpy(&f_, &from.f_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_d_) -
    reinterpret_cast<char*>(&f_)) + sizeof(delta_d_));
  // @@protoc_insertion_point(copy_constructor:ros.stereo_msgs.DisparityImage)
}

inline void DisparityImage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delta_d_) -
    reinterpret_cast<char*>(&header_)) + sizeof(delta_d_));
}

DisparityImage::~DisparityImage() {
  // @@protoc_insertion_point(destructor:ros.stereo_msgs.DisparityImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DisparityImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete valid_window_;
}

void DisparityImage::ArenaDtor(void* object) {
  DisparityImage* _this = reinterpret_cast< DisparityImage* >(object);
  (void)_this;
}
void DisparityImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisparityImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DisparityImage::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.stereo_msgs.DisparityImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && valid_window_ != nullptr) {
    delete valid_window_;
  }
  valid_window_ = nullptr;
  ::memset(&f_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_d_) -
      reinterpret_cast<char*>(&f_)) + sizeof(delta_d_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisparityImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.sensor_msgs.Image image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float f = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float T = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ros.sensor_msgs.RegionOfInterest valid_window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid_window(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float min_disparity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          min_disparity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_disparity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          max_disparity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float delta_d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          delta_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DisparityImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.stereo_msgs.DisparityImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .ros.sensor_msgs.Image image = 2;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::image(this), target, stream);
  }

  // float f = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f(), target);
  }

  // float T = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = this->_internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_t(), target);
  }

  // .ros.sensor_msgs.RegionOfInterest valid_window = 5;
  if (this->_internal_has_valid_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::valid_window(this), target, stream);
  }

  // float min_disparity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_disparity = this->_internal_min_disparity();
  uint32_t raw_min_disparity;
  memcpy(&raw_min_disparity, &tmp_min_disparity, sizeof(tmp_min_disparity));
  if (raw_min_disparity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_min_disparity(), target);
  }

  // float max_disparity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_disparity = this->_internal_max_disparity();
  uint32_t raw_max_disparity;
  memcpy(&raw_max_disparity, &tmp_max_disparity, sizeof(tmp_max_disparity));
  if (raw_max_disparity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_max_disparity(), target);
  }

  // float delta_d = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_d = this->_internal_delta_d();
  uint32_t raw_delta_d;
  memcpy(&raw_delta_d, &tmp_delta_d, sizeof(tmp_delta_d));
  if (raw_delta_d != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_delta_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.stereo_msgs.DisparityImage)
  return target;
}

size_t DisparityImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.stereo_msgs.DisparityImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ros.sensor_msgs.Image image = 2;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .ros.sensor_msgs.RegionOfInterest valid_window = 5;
  if (this->_internal_has_valid_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *valid_window_);
  }

  // float f = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    total_size += 1 + 4;
  }

  // float T = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = this->_internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    total_size += 1 + 4;
  }

  // float min_disparity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_disparity = this->_internal_min_disparity();
  uint32_t raw_min_disparity;
  memcpy(&raw_min_disparity, &tmp_min_disparity, sizeof(tmp_min_disparity));
  if (raw_min_disparity != 0) {
    total_size += 1 + 4;
  }

  // float max_disparity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_disparity = this->_internal_max_disparity();
  uint32_t raw_max_disparity;
  memcpy(&raw_max_disparity, &tmp_max_disparity, sizeof(tmp_max_disparity));
  if (raw_max_disparity != 0) {
    total_size += 1 + 4;
  }

  // float delta_d = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_d = this->_internal_delta_d();
  uint32_t raw_delta_d;
  memcpy(&raw_delta_d, &tmp_delta_d, sizeof(tmp_delta_d));
  if (raw_delta_d != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DisparityImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DisparityImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DisparityImage::GetClassData() const { return &_class_data_; }

void DisparityImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DisparityImage *>(to)->MergeFrom(
      static_cast<const DisparityImage &>(from));
}


void DisparityImage::MergeFrom(const DisparityImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.stereo_msgs.DisparityImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_image()) {
    _internal_mutable_image()->::ros::sensor_msgs::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_has_valid_window()) {
    _internal_mutable_valid_window()->::ros::sensor_msgs::RegionOfInterest::MergeFrom(from._internal_valid_window());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_f = from._internal_f();
  uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    _internal_set_f(from._internal_f());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_t = from._internal_t();
  uint32_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    _internal_set_t(from._internal_t());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_min_disparity = from._internal_min_disparity();
  uint32_t raw_min_disparity;
  memcpy(&raw_min_disparity, &tmp_min_disparity, sizeof(tmp_min_disparity));
  if (raw_min_disparity != 0) {
    _internal_set_min_disparity(from._internal_min_disparity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_disparity = from._internal_max_disparity();
  uint32_t raw_max_disparity;
  memcpy(&raw_max_disparity, &tmp_max_disparity, sizeof(tmp_max_disparity));
  if (raw_max_disparity != 0) {
    _internal_set_max_disparity(from._internal_max_disparity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_d = from._internal_delta_d();
  uint32_t raw_delta_d;
  memcpy(&raw_delta_d, &tmp_delta_d, sizeof(tmp_delta_d));
  if (raw_delta_d != 0) {
    _internal_set_delta_d(from._internal_delta_d());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DisparityImage::CopyFrom(const DisparityImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.stereo_msgs.DisparityImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisparityImage::IsInitialized() const {
  return true;
}

void DisparityImage::InternalSwap(DisparityImage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisparityImage, delta_d_)
      + sizeof(DisparityImage::delta_d_)
      - PROTOBUF_FIELD_OFFSET(DisparityImage, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisparityImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_getter, &descriptor_table_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto_once,
      file_level_metadata_ros_2fstereo_5fmsgs_2fDisparityImage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stereo_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::stereo_msgs::DisparityImage* Arena::CreateMaybeMessage< ::ros::stereo_msgs::DisparityImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::stereo_msgs::DisparityImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
