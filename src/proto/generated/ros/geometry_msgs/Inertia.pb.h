// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/geometry_msgs/Inertia.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fgeometry_5fmsgs_2fInertia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fgeometry_5fmsgs_2fInertia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/geometry_msgs/Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fgeometry_5fmsgs_2fInertia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fgeometry_5fmsgs_2fInertia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto;
namespace ros {
namespace geometry_msgs {
class Inertia;
struct InertiaDefaultTypeInternal;
extern InertiaDefaultTypeInternal _Inertia_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::geometry_msgs::Inertia* Arena::CreateMaybeMessage<::ros::geometry_msgs::Inertia>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace geometry_msgs {

// ===================================================================

class Inertia final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.geometry_msgs.Inertia) */ {
 public:
  inline Inertia() : Inertia(nullptr) {}
  ~Inertia() override;
  explicit constexpr Inertia(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inertia(const Inertia& from);
  Inertia(Inertia&& from) noexcept
    : Inertia() {
    *this = ::std::move(from);
  }

  inline Inertia& operator=(const Inertia& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inertia& operator=(Inertia&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inertia& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inertia* internal_default_instance() {
    return reinterpret_cast<const Inertia*>(
               &_Inertia_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Inertia& a, Inertia& b) {
    a.Swap(&b);
  }
  inline void Swap(Inertia* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inertia* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inertia* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Inertia>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Inertia& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Inertia& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inertia* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.geometry_msgs.Inertia";
  }
  protected:
  explicit Inertia(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComFieldNumber = 2,
    kMFieldNumber = 1,
    kIxxFieldNumber = 3,
    kIxyFieldNumber = 4,
    kIxzFieldNumber = 5,
    kIyyFieldNumber = 6,
    kIyzFieldNumber = 7,
    kIzzFieldNumber = 8,
  };
  // .ros.geometry_msgs.Vector3 com = 2;
  bool has_com() const;
  private:
  bool _internal_has_com() const;
  public:
  void clear_com();
  const ::ros::geometry_msgs::Vector3& com() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::Vector3* release_com();
  ::ros::geometry_msgs::Vector3* mutable_com();
  void set_allocated_com(::ros::geometry_msgs::Vector3* com);
  private:
  const ::ros::geometry_msgs::Vector3& _internal_com() const;
  ::ros::geometry_msgs::Vector3* _internal_mutable_com();
  public:
  void unsafe_arena_set_allocated_com(
      ::ros::geometry_msgs::Vector3* com);
  ::ros::geometry_msgs::Vector3* unsafe_arena_release_com();

  // double m = 1;
  void clear_m();
  double m() const;
  void set_m(double value);
  private:
  double _internal_m() const;
  void _internal_set_m(double value);
  public:

  // double ixx = 3;
  void clear_ixx();
  double ixx() const;
  void set_ixx(double value);
  private:
  double _internal_ixx() const;
  void _internal_set_ixx(double value);
  public:

  // double ixy = 4;
  void clear_ixy();
  double ixy() const;
  void set_ixy(double value);
  private:
  double _internal_ixy() const;
  void _internal_set_ixy(double value);
  public:

  // double ixz = 5;
  void clear_ixz();
  double ixz() const;
  void set_ixz(double value);
  private:
  double _internal_ixz() const;
  void _internal_set_ixz(double value);
  public:

  // double iyy = 6;
  void clear_iyy();
  double iyy() const;
  void set_iyy(double value);
  private:
  double _internal_iyy() const;
  void _internal_set_iyy(double value);
  public:

  // double iyz = 7;
  void clear_iyz();
  double iyz() const;
  void set_iyz(double value);
  private:
  double _internal_iyz() const;
  void _internal_set_iyz(double value);
  public:

  // double izz = 8;
  void clear_izz();
  double izz() const;
  void set_izz(double value);
  private:
  double _internal_izz() const;
  void _internal_set_izz(double value);
  public:

  // @@protoc_insertion_point(class_scope:ros.geometry_msgs.Inertia)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ros::geometry_msgs::Vector3* com_;
  double m_;
  double ixx_;
  double ixy_;
  double ixz_;
  double iyy_;
  double iyz_;
  double izz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fgeometry_5fmsgs_2fInertia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Inertia

// double m = 1;
inline void Inertia::clear_m() {
  m_ = 0;
}
inline double Inertia::_internal_m() const {
  return m_;
}
inline double Inertia::m() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.m)
  return _internal_m();
}
inline void Inertia::_internal_set_m(double value) {
  
  m_ = value;
}
inline void Inertia::set_m(double value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.m)
}

// .ros.geometry_msgs.Vector3 com = 2;
inline bool Inertia::_internal_has_com() const {
  return this != internal_default_instance() && com_ != nullptr;
}
inline bool Inertia::has_com() const {
  return _internal_has_com();
}
inline const ::ros::geometry_msgs::Vector3& Inertia::_internal_com() const {
  const ::ros::geometry_msgs::Vector3* p = com_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::Vector3&>(
      ::ros::geometry_msgs::_Vector3_default_instance_);
}
inline const ::ros::geometry_msgs::Vector3& Inertia::com() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.com)
  return _internal_com();
}
inline void Inertia::unsafe_arena_set_allocated_com(
    ::ros::geometry_msgs::Vector3* com) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(com_);
  }
  com_ = com;
  if (com) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.geometry_msgs.Inertia.com)
}
inline ::ros::geometry_msgs::Vector3* Inertia::release_com() {
  
  ::ros::geometry_msgs::Vector3* temp = com_;
  com_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::Vector3* Inertia::unsafe_arena_release_com() {
  // @@protoc_insertion_point(field_release:ros.geometry_msgs.Inertia.com)
  
  ::ros::geometry_msgs::Vector3* temp = com_;
  com_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::Vector3* Inertia::_internal_mutable_com() {
  
  if (com_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::Vector3>(GetArenaForAllocation());
    com_ = p;
  }
  return com_;
}
inline ::ros::geometry_msgs::Vector3* Inertia::mutable_com() {
  ::ros::geometry_msgs::Vector3* _msg = _internal_mutable_com();
  // @@protoc_insertion_point(field_mutable:ros.geometry_msgs.Inertia.com)
  return _msg;
}
inline void Inertia::set_allocated_com(::ros::geometry_msgs::Vector3* com) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(com_);
  }
  if (com) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(com));
    if (message_arena != submessage_arena) {
      com = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, com, submessage_arena);
    }
    
  } else {
    
  }
  com_ = com;
  // @@protoc_insertion_point(field_set_allocated:ros.geometry_msgs.Inertia.com)
}

// double ixx = 3;
inline void Inertia::clear_ixx() {
  ixx_ = 0;
}
inline double Inertia::_internal_ixx() const {
  return ixx_;
}
inline double Inertia::ixx() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.ixx)
  return _internal_ixx();
}
inline void Inertia::_internal_set_ixx(double value) {
  
  ixx_ = value;
}
inline void Inertia::set_ixx(double value) {
  _internal_set_ixx(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.ixx)
}

// double ixy = 4;
inline void Inertia::clear_ixy() {
  ixy_ = 0;
}
inline double Inertia::_internal_ixy() const {
  return ixy_;
}
inline double Inertia::ixy() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.ixy)
  return _internal_ixy();
}
inline void Inertia::_internal_set_ixy(double value) {
  
  ixy_ = value;
}
inline void Inertia::set_ixy(double value) {
  _internal_set_ixy(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.ixy)
}

// double ixz = 5;
inline void Inertia::clear_ixz() {
  ixz_ = 0;
}
inline double Inertia::_internal_ixz() const {
  return ixz_;
}
inline double Inertia::ixz() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.ixz)
  return _internal_ixz();
}
inline void Inertia::_internal_set_ixz(double value) {
  
  ixz_ = value;
}
inline void Inertia::set_ixz(double value) {
  _internal_set_ixz(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.ixz)
}

// double iyy = 6;
inline void Inertia::clear_iyy() {
  iyy_ = 0;
}
inline double Inertia::_internal_iyy() const {
  return iyy_;
}
inline double Inertia::iyy() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.iyy)
  return _internal_iyy();
}
inline void Inertia::_internal_set_iyy(double value) {
  
  iyy_ = value;
}
inline void Inertia::set_iyy(double value) {
  _internal_set_iyy(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.iyy)
}

// double iyz = 7;
inline void Inertia::clear_iyz() {
  iyz_ = 0;
}
inline double Inertia::_internal_iyz() const {
  return iyz_;
}
inline double Inertia::iyz() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.iyz)
  return _internal_iyz();
}
inline void Inertia::_internal_set_iyz(double value) {
  
  iyz_ = value;
}
inline void Inertia::set_iyz(double value) {
  _internal_set_iyz(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.iyz)
}

// double izz = 8;
inline void Inertia::clear_izz() {
  izz_ = 0;
}
inline double Inertia::_internal_izz() const {
  return izz_;
}
inline double Inertia::izz() const {
  // @@protoc_insertion_point(field_get:ros.geometry_msgs.Inertia.izz)
  return _internal_izz();
}
inline void Inertia::_internal_set_izz(double value) {
  
  izz_ = value;
}
inline void Inertia::set_izz(double value) {
  _internal_set_izz(value);
  // @@protoc_insertion_point(field_set:ros.geometry_msgs.Inertia.izz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fgeometry_5fmsgs_2fInertia_2eproto
