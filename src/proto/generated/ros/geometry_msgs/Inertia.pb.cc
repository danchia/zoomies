// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/geometry_msgs/Inertia.proto

#include "ros/geometry_msgs/Inertia.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace geometry_msgs {
constexpr Inertia::Inertia(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : com_(nullptr)
  , m_(0)
  , ixx_(0)
  , ixy_(0)
  , ixz_(0)
  , iyy_(0)
  , iyz_(0)
  , izz_(0){}
struct InertiaDefaultTypeInternal {
  constexpr InertiaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InertiaDefaultTypeInternal() {}
  union {
    Inertia _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InertiaDefaultTypeInternal _Inertia_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fgeometry_5fmsgs_2fInertia_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fInertia_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fInertia_2eproto = nullptr;

const uint32_t TableStruct_ros_2fgeometry_5fmsgs_2fInertia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, m_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, com_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, ixx_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, ixy_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, ixz_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, iyy_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, iyz_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Inertia, izz_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::geometry_msgs::Inertia)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::geometry_msgs::_Inertia_default_instance_),
};

const char descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fInertia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037ros/geometry_msgs/Inertia.proto\022\021ros.g"
  "eometry_msgs\032\037ros/geometry_msgs/Vector3."
  "proto\"\213\001\n\007Inertia\022\t\n\001m\030\001 \001(\001\022\'\n\003com\030\002 \001("
  "\0132\032.ros.geometry_msgs.Vector3\022\013\n\003ixx\030\003 \001"
  "(\001\022\013\n\003ixy\030\004 \001(\001\022\013\n\003ixz\030\005 \001(\001\022\013\n\003iyy\030\006 \001("
  "\001\022\013\n\003iyz\030\007 \001(\001\022\013\n\003izz\030\010 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_deps[1] = {
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fVector3_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto = {
  false, false, 235, descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fInertia_2eproto, "ros/geometry_msgs/Inertia.proto", 
  &descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_once, descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2fgeometry_5fmsgs_2fInertia_2eproto::offsets,
  file_level_metadata_ros_2fgeometry_5fmsgs_2fInertia_2eproto, file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fInertia_2eproto, file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fInertia_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_getter() {
  return &descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fgeometry_5fmsgs_2fInertia_2eproto(&descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto);
namespace ros {
namespace geometry_msgs {

// ===================================================================

class Inertia::_Internal {
 public:
  static const ::ros::geometry_msgs::Vector3& com(const Inertia* msg);
};

const ::ros::geometry_msgs::Vector3&
Inertia::_Internal::com(const Inertia* msg) {
  return *msg->com_;
}
void Inertia::clear_com() {
  if (GetArenaForAllocation() == nullptr && com_ != nullptr) {
    delete com_;
  }
  com_ = nullptr;
}
Inertia::Inertia(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.geometry_msgs.Inertia)
}
Inertia::Inertia(const Inertia& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_com()) {
    com_ = new ::ros::geometry_msgs::Vector3(*from.com_);
  } else {
    com_ = nullptr;
  }
  ::memcpy(&m_, &from.m_,
    static_cast<size_t>(reinterpret_cast<char*>(&izz_) -
    reinterpret_cast<char*>(&m_)) + sizeof(izz_));
  // @@protoc_insertion_point(copy_constructor:ros.geometry_msgs.Inertia)
}

inline void Inertia::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&com_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&izz_) -
    reinterpret_cast<char*>(&com_)) + sizeof(izz_));
}

Inertia::~Inertia() {
  // @@protoc_insertion_point(destructor:ros.geometry_msgs.Inertia)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Inertia::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete com_;
}

void Inertia::ArenaDtor(void* object) {
  Inertia* _this = reinterpret_cast< Inertia* >(object);
  (void)_this;
}
void Inertia::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inertia::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Inertia::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.geometry_msgs.Inertia)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && com_ != nullptr) {
    delete com_;
  }
  com_ = nullptr;
  ::memset(&m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&izz_) -
      reinterpret_cast<char*>(&m_)) + sizeof(izz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inertia::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.Vector3 com = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_com(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ixx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ixx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ixy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ixy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ixz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ixz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double iyy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          iyy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double iyz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          iyz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double izz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          izz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inertia::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.geometry_msgs.Inertia)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double m = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = this->_internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_m(), target);
  }

  // .ros.geometry_msgs.Vector3 com = 2;
  if (this->_internal_has_com()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::com(this), target, stream);
  }

  // double ixx = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixx = this->_internal_ixx();
  uint64_t raw_ixx;
  memcpy(&raw_ixx, &tmp_ixx, sizeof(tmp_ixx));
  if (raw_ixx != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ixx(), target);
  }

  // double ixy = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixy = this->_internal_ixy();
  uint64_t raw_ixy;
  memcpy(&raw_ixy, &tmp_ixy, sizeof(tmp_ixy));
  if (raw_ixy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ixy(), target);
  }

  // double ixz = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixz = this->_internal_ixz();
  uint64_t raw_ixz;
  memcpy(&raw_ixz, &tmp_ixz, sizeof(tmp_ixz));
  if (raw_ixz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ixz(), target);
  }

  // double iyy = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyy = this->_internal_iyy();
  uint64_t raw_iyy;
  memcpy(&raw_iyy, &tmp_iyy, sizeof(tmp_iyy));
  if (raw_iyy != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_iyy(), target);
  }

  // double iyz = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyz = this->_internal_iyz();
  uint64_t raw_iyz;
  memcpy(&raw_iyz, &tmp_iyz, sizeof(tmp_iyz));
  if (raw_iyz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_iyz(), target);
  }

  // double izz = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_izz = this->_internal_izz();
  uint64_t raw_izz;
  memcpy(&raw_izz, &tmp_izz, sizeof(tmp_izz));
  if (raw_izz != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_izz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.geometry_msgs.Inertia)
  return target;
}

size_t Inertia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.geometry_msgs.Inertia)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ros.geometry_msgs.Vector3 com = 2;
  if (this->_internal_has_com()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *com_);
  }

  // double m = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = this->_internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    total_size += 1 + 8;
  }

  // double ixx = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixx = this->_internal_ixx();
  uint64_t raw_ixx;
  memcpy(&raw_ixx, &tmp_ixx, sizeof(tmp_ixx));
  if (raw_ixx != 0) {
    total_size += 1 + 8;
  }

  // double ixy = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixy = this->_internal_ixy();
  uint64_t raw_ixy;
  memcpy(&raw_ixy, &tmp_ixy, sizeof(tmp_ixy));
  if (raw_ixy != 0) {
    total_size += 1 + 8;
  }

  // double ixz = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixz = this->_internal_ixz();
  uint64_t raw_ixz;
  memcpy(&raw_ixz, &tmp_ixz, sizeof(tmp_ixz));
  if (raw_ixz != 0) {
    total_size += 1 + 8;
  }

  // double iyy = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyy = this->_internal_iyy();
  uint64_t raw_iyy;
  memcpy(&raw_iyy, &tmp_iyy, sizeof(tmp_iyy));
  if (raw_iyy != 0) {
    total_size += 1 + 8;
  }

  // double iyz = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyz = this->_internal_iyz();
  uint64_t raw_iyz;
  memcpy(&raw_iyz, &tmp_iyz, sizeof(tmp_iyz));
  if (raw_iyz != 0) {
    total_size += 1 + 8;
  }

  // double izz = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_izz = this->_internal_izz();
  uint64_t raw_izz;
  memcpy(&raw_izz, &tmp_izz, sizeof(tmp_izz));
  if (raw_izz != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inertia::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Inertia::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inertia::GetClassData() const { return &_class_data_; }

void Inertia::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Inertia *>(to)->MergeFrom(
      static_cast<const Inertia &>(from));
}


void Inertia::MergeFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.geometry_msgs.Inertia)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_com()) {
    _internal_mutable_com()->::ros::geometry_msgs::Vector3::MergeFrom(from._internal_com());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_m = from._internal_m();
  uint64_t raw_m;
  memcpy(&raw_m, &tmp_m, sizeof(tmp_m));
  if (raw_m != 0) {
    _internal_set_m(from._internal_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixx = from._internal_ixx();
  uint64_t raw_ixx;
  memcpy(&raw_ixx, &tmp_ixx, sizeof(tmp_ixx));
  if (raw_ixx != 0) {
    _internal_set_ixx(from._internal_ixx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixy = from._internal_ixy();
  uint64_t raw_ixy;
  memcpy(&raw_ixy, &tmp_ixy, sizeof(tmp_ixy));
  if (raw_ixy != 0) {
    _internal_set_ixy(from._internal_ixy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ixz = from._internal_ixz();
  uint64_t raw_ixz;
  memcpy(&raw_ixz, &tmp_ixz, sizeof(tmp_ixz));
  if (raw_ixz != 0) {
    _internal_set_ixz(from._internal_ixz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyy = from._internal_iyy();
  uint64_t raw_iyy;
  memcpy(&raw_iyy, &tmp_iyy, sizeof(tmp_iyy));
  if (raw_iyy != 0) {
    _internal_set_iyy(from._internal_iyy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_iyz = from._internal_iyz();
  uint64_t raw_iyz;
  memcpy(&raw_iyz, &tmp_iyz, sizeof(tmp_iyz));
  if (raw_iyz != 0) {
    _internal_set_iyz(from._internal_iyz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_izz = from._internal_izz();
  uint64_t raw_izz;
  memcpy(&raw_izz, &tmp_izz, sizeof(tmp_izz));
  if (raw_izz != 0) {
    _internal_set_izz(from._internal_izz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inertia::CopyFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.geometry_msgs.Inertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inertia::IsInitialized() const {
  return true;
}

void Inertia::InternalSwap(Inertia* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inertia, izz_)
      + sizeof(Inertia::izz_)
      - PROTOBUF_FIELD_OFFSET(Inertia, com_)>(
          reinterpret_cast<char*>(&com_),
          reinterpret_cast<char*>(&other->com_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inertia::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_getter, &descriptor_table_ros_2fgeometry_5fmsgs_2fInertia_2eproto_once,
      file_level_metadata_ros_2fgeometry_5fmsgs_2fInertia_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::geometry_msgs::Inertia* Arena::CreateMaybeMessage< ::ros::geometry_msgs::Inertia >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::geometry_msgs::Inertia >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
