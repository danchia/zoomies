// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/geometry_msgs/AccelWithCovarianceStamped.proto

#include "ros/geometry_msgs/AccelWithCovarianceStamped.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace geometry_msgs {
constexpr AccelWithCovarianceStamped::AccelWithCovarianceStamped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , accel_(nullptr){}
struct AccelWithCovarianceStampedDefaultTypeInternal {
  constexpr AccelWithCovarianceStampedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccelWithCovarianceStampedDefaultTypeInternal() {}
  union {
    AccelWithCovarianceStamped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccelWithCovarianceStampedDefaultTypeInternal _AccelWithCovarianceStamped_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto = nullptr;

const uint32_t TableStruct_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::AccelWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::AccelWithCovarianceStamped, header_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::AccelWithCovarianceStamped, accel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::geometry_msgs::AccelWithCovarianceStamped)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::geometry_msgs::_AccelWithCovarianceStamped_default_instance_),
};

const char descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2ros/geometry_msgs/AccelWithCovarianceS"
  "tamped.proto\022\021ros.geometry_msgs\032+ros/geo"
  "metry_msgs/AccelWithCovariance.proto\032\031ro"
  "s/std_msgs/Header.proto\"y\n\032AccelWithCova"
  "rianceStamped\022$\n\006header\030\001 \001(\0132\024.ros.std_"
  "msgs.Header\0225\n\005accel\030\002 \001(\0132&.ros.geometr"
  "y_msgs.AccelWithCovarianceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_deps[2] = {
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovariance_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto = {
  false, false, 274, descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto, "ros/geometry_msgs/AccelWithCovarianceStamped.proto", 
  &descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_once, descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto::offsets,
  file_level_metadata_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto, file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto, file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_getter() {
  return &descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto(&descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto);
namespace ros {
namespace geometry_msgs {

// ===================================================================

class AccelWithCovarianceStamped::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const AccelWithCovarianceStamped* msg);
  static const ::ros::geometry_msgs::AccelWithCovariance& accel(const AccelWithCovarianceStamped* msg);
};

const ::ros::std_msgs::Header&
AccelWithCovarianceStamped::_Internal::header(const AccelWithCovarianceStamped* msg) {
  return *msg->header_;
}
const ::ros::geometry_msgs::AccelWithCovariance&
AccelWithCovarianceStamped::_Internal::accel(const AccelWithCovarianceStamped* msg) {
  return *msg->accel_;
}
void AccelWithCovarianceStamped::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void AccelWithCovarianceStamped::clear_accel() {
  if (GetArenaForAllocation() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.geometry_msgs.AccelWithCovarianceStamped)
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(const AccelWithCovarianceStamped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_accel()) {
    accel_ = new ::ros::geometry_msgs::AccelWithCovariance(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ros.geometry_msgs.AccelWithCovarianceStamped)
}

inline void AccelWithCovarianceStamped::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accel_) -
    reinterpret_cast<char*>(&header_)) + sizeof(accel_));
}

AccelWithCovarianceStamped::~AccelWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:ros.geometry_msgs.AccelWithCovarianceStamped)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccelWithCovarianceStamped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete accel_;
}

void AccelWithCovarianceStamped::ArenaDtor(void* object) {
  AccelWithCovarianceStamped* _this = reinterpret_cast< AccelWithCovarianceStamped* >(object);
  (void)_this;
}
void AccelWithCovarianceStamped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelWithCovarianceStamped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccelWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.geometry_msgs.AccelWithCovarianceStamped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelWithCovarianceStamped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.AccelWithCovariance accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelWithCovarianceStamped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.geometry_msgs.AccelWithCovarianceStamped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .ros.geometry_msgs.AccelWithCovariance accel = 2;
  if (this->_internal_has_accel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::accel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.geometry_msgs.AccelWithCovarianceStamped)
  return target;
}

size_t AccelWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.geometry_msgs.AccelWithCovarianceStamped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ros.geometry_msgs.AccelWithCovariance accel = 2;
  if (this->_internal_has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelWithCovarianceStamped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccelWithCovarianceStamped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelWithCovarianceStamped::GetClassData() const { return &_class_data_; }

void AccelWithCovarianceStamped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AccelWithCovarianceStamped *>(to)->MergeFrom(
      static_cast<const AccelWithCovarianceStamped &>(from));
}


void AccelWithCovarianceStamped::MergeFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.geometry_msgs.AccelWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_accel()) {
    _internal_mutable_accel()->::ros::geometry_msgs::AccelWithCovariance::MergeFrom(from._internal_accel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelWithCovarianceStamped::CopyFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.geometry_msgs.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelWithCovarianceStamped::IsInitialized() const {
  return true;
}

void AccelWithCovarianceStamped::InternalSwap(AccelWithCovarianceStamped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, accel_)
      + sizeof(AccelWithCovarianceStamped::accel_)
      - PROTOBUF_FIELD_OFFSET(AccelWithCovarianceStamped, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelWithCovarianceStamped::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_getter, &descriptor_table_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto_once,
      file_level_metadata_ros_2fgeometry_5fmsgs_2fAccelWithCovarianceStamped_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::geometry_msgs::AccelWithCovarianceStamped* Arena::CreateMaybeMessage< ::ros::geometry_msgs::AccelWithCovarianceStamped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::geometry_msgs::AccelWithCovarianceStamped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
