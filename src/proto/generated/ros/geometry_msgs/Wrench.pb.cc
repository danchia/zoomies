// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/geometry_msgs/Wrench.proto

#include "ros/geometry_msgs/Wrench.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace geometry_msgs {
constexpr Wrench::Wrench(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : force_(nullptr)
  , torque_(nullptr){}
struct WrenchDefaultTypeInternal {
  constexpr WrenchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WrenchDefaultTypeInternal() {}
  union {
    Wrench _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WrenchDefaultTypeInternal _Wrench_default_instance_;
}  // namespace geometry_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fgeometry_5fmsgs_2fWrench_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fWrench_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fWrench_2eproto = nullptr;

const uint32_t TableStruct_ros_2fgeometry_5fmsgs_2fWrench_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Wrench, force_),
  PROTOBUF_FIELD_OFFSET(::ros::geometry_msgs::Wrench, torque_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::geometry_msgs::Wrench)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::geometry_msgs::_Wrench_default_instance_),
};

const char descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fWrench_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036ros/geometry_msgs/Wrench.proto\022\021ros.ge"
  "ometry_msgs\032\037ros/geometry_msgs/Vector3.p"
  "roto\"_\n\006Wrench\022)\n\005force\030\001 \001(\0132\032.ros.geom"
  "etry_msgs.Vector3\022*\n\006torque\030\002 \001(\0132\032.ros."
  "geometry_msgs.Vector3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_deps[1] = {
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fVector3_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto = {
  false, false, 189, descriptor_table_protodef_ros_2fgeometry_5fmsgs_2fWrench_2eproto, "ros/geometry_msgs/Wrench.proto", 
  &descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_once, descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2fgeometry_5fmsgs_2fWrench_2eproto::offsets,
  file_level_metadata_ros_2fgeometry_5fmsgs_2fWrench_2eproto, file_level_enum_descriptors_ros_2fgeometry_5fmsgs_2fWrench_2eproto, file_level_service_descriptors_ros_2fgeometry_5fmsgs_2fWrench_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_getter() {
  return &descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fgeometry_5fmsgs_2fWrench_2eproto(&descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto);
namespace ros {
namespace geometry_msgs {

// ===================================================================

class Wrench::_Internal {
 public:
  static const ::ros::geometry_msgs::Vector3& force(const Wrench* msg);
  static const ::ros::geometry_msgs::Vector3& torque(const Wrench* msg);
};

const ::ros::geometry_msgs::Vector3&
Wrench::_Internal::force(const Wrench* msg) {
  return *msg->force_;
}
const ::ros::geometry_msgs::Vector3&
Wrench::_Internal::torque(const Wrench* msg) {
  return *msg->torque_;
}
void Wrench::clear_force() {
  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
void Wrench::clear_torque() {
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
}
Wrench::Wrench(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.geometry_msgs.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_force()) {
    force_ = new ::ros::geometry_msgs::Vector3(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::ros::geometry_msgs::Vector3(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ros.geometry_msgs.Wrench)
}

inline void Wrench::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&force_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:ros.geometry_msgs.Wrench)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Wrench::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void Wrench::ArenaDtor(void* object) {
  Wrench* _this = reinterpret_cast< Wrench* >(object);
  (void)_this;
}
void Wrench::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.geometry_msgs.Wrench)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.geometry_msgs.Vector3 force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.Vector3 torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wrench::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.geometry_msgs.Wrench)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.geometry_msgs.Vector3 force = 1;
  if (this->_internal_has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::force(this), target, stream);
  }

  // .ros.geometry_msgs.Vector3 torque = 2;
  if (this->_internal_has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.geometry_msgs.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.geometry_msgs.Wrench)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ros.geometry_msgs.Vector3 force = 1;
  if (this->_internal_has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .ros.geometry_msgs.Vector3 torque = 2;
  if (this->_internal_has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wrench::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wrench::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wrench::GetClassData() const { return &_class_data_; }

void Wrench::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wrench *>(to)->MergeFrom(
      static_cast<const Wrench &>(from));
}


void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.geometry_msgs.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_force()) {
    _internal_mutable_force()->::ros::geometry_msgs::Vector3::MergeFrom(from._internal_force());
  }
  if (from._internal_has_torque()) {
    _internal_mutable_torque()->::ros::geometry_msgs::Vector3::MergeFrom(from._internal_torque());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.geometry_msgs.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::InternalSwap(Wrench* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wrench, torque_)
      + sizeof(Wrench::torque_)
      - PROTOBUF_FIELD_OFFSET(Wrench, force_)>(
          reinterpret_cast<char*>(&force_),
          reinterpret_cast<char*>(&other->force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrench::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_getter, &descriptor_table_ros_2fgeometry_5fmsgs_2fWrench_2eproto_once,
      file_level_metadata_ros_2fgeometry_5fmsgs_2fWrench_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::geometry_msgs::Wrench* Arena::CreateMaybeMessage< ::ros::geometry_msgs::Wrench >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::geometry_msgs::Wrench >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
