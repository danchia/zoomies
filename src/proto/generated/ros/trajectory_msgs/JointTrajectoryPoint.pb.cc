// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/trajectory_msgs/JointTrajectoryPoint.proto

#include "ros/trajectory_msgs/JointTrajectoryPoint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace trajectory_msgs {
constexpr JointTrajectoryPoint::JointTrajectoryPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_()
  , velocities_()
  , accelerations_()
  , effort_()
  , time_from_start_(nullptr){}
struct JointTrajectoryPointDefaultTypeInternal {
  constexpr JointTrajectoryPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JointTrajectoryPointDefaultTypeInternal() {}
  union {
    JointTrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JointTrajectoryPointDefaultTypeInternal _JointTrajectoryPoint_default_instance_;
}  // namespace trajectory_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto = nullptr;

const uint32_t TableStruct_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, positions_),
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, velocities_),
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, accelerations_),
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, effort_),
  PROTOBUF_FIELD_OFFSET(::ros::trajectory_msgs::JointTrajectoryPoint, time_from_start_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::trajectory_msgs::JointTrajectoryPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::trajectory_msgs::_JointTrajectoryPoint_default_instance_),
};

const char descriptor_table_protodef_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.ros/trajectory_msgs/JointTrajectoryPoi"
  "nt.proto\022\023ros.trajectory_msgs\032\022ros/built"
  "ins.proto\"\214\001\n\024JointTrajectoryPoint\022\021\n\tpo"
  "sitions\030\001 \003(\001\022\022\n\nvelocities\030\002 \003(\001\022\025\n\racc"
  "elerations\030\003 \003(\001\022\016\n\006effort\030\004 \003(\001\022&\n\017time"
  "_from_start\030\005 \001(\0132\r.ros.Durationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_deps[1] = {
  &::descriptor_table_ros_2fbuiltins_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto = {
  false, false, 240, descriptor_table_protodef_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto, "ros/trajectory_msgs/JointTrajectoryPoint.proto", 
  &descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_once, descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto::offsets,
  file_level_metadata_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto, file_level_enum_descriptors_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto, file_level_service_descriptors_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_getter() {
  return &descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto(&descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto);
namespace ros {
namespace trajectory_msgs {

// ===================================================================

class JointTrajectoryPoint::_Internal {
 public:
  static const ::ros::Duration& time_from_start(const JointTrajectoryPoint* msg);
};

const ::ros::Duration&
JointTrajectoryPoint::_Internal::time_from_start(const JointTrajectoryPoint* msg) {
  return *msg->time_from_start_;
}
void JointTrajectoryPoint::clear_time_from_start() {
  if (GetArenaForAllocation() == nullptr && time_from_start_ != nullptr) {
    delete time_from_start_;
  }
  time_from_start_ = nullptr;
}
JointTrajectoryPoint::JointTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  positions_(arena),
  velocities_(arena),
  accelerations_(arena),
  effort_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.trajectory_msgs.JointTrajectoryPoint)
}
JointTrajectoryPoint::JointTrajectoryPoint(const JointTrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_),
      velocities_(from.velocities_),
      accelerations_(from.accelerations_),
      effort_(from.effort_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_from_start()) {
    time_from_start_ = new ::ros::Duration(*from.time_from_start_);
  } else {
    time_from_start_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ros.trajectory_msgs.JointTrajectoryPoint)
}

inline void JointTrajectoryPoint::SharedCtor() {
time_from_start_ = nullptr;
}

JointTrajectoryPoint::~JointTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:ros.trajectory_msgs.JointTrajectoryPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JointTrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_from_start_;
}

void JointTrajectoryPoint::ArenaDtor(void* object) {
  JointTrajectoryPoint* _this = reinterpret_cast< JointTrajectoryPoint* >(object);
  (void)_this;
}
void JointTrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointTrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.trajectory_msgs.JointTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  velocities_.Clear();
  accelerations_.Clear();
  effort_.Clear();
  if (GetArenaForAllocation() == nullptr && time_from_start_ != nullptr) {
    delete time_from_start_;
  }
  time_from_start_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointTrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_positions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double velocities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_velocities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double accelerations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_accelerations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_accelerations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double effort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_effort(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_effort(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration time_from_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_from_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointTrajectoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.trajectory_msgs.JointTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double positions = 1;
  if (this->_internal_positions_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_positions(), target);
  }

  // repeated double velocities = 2;
  if (this->_internal_velocities_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_velocities(), target);
  }

  // repeated double accelerations = 3;
  if (this->_internal_accelerations_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_accelerations(), target);
  }

  // repeated double effort = 4;
  if (this->_internal_effort_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_effort(), target);
  }

  // .ros.Duration time_from_start = 5;
  if (this->_internal_has_time_from_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_from_start(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.trajectory_msgs.JointTrajectoryPoint)
  return target;
}

size_t JointTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.trajectory_msgs.JointTrajectoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double positions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_positions_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocities_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double accelerations = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_accelerations_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double effort = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_effort_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .ros.Duration time_from_start = 5;
  if (this->_internal_has_time_from_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_from_start_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointTrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointTrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointTrajectoryPoint::GetClassData() const { return &_class_data_; }

void JointTrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JointTrajectoryPoint *>(to)->MergeFrom(
      static_cast<const JointTrajectoryPoint &>(from));
}


void JointTrajectoryPoint::MergeFrom(const JointTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.trajectory_msgs.JointTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  velocities_.MergeFrom(from.velocities_);
  accelerations_.MergeFrom(from.accelerations_);
  effort_.MergeFrom(from.effort_);
  if (from._internal_has_time_from_start()) {
    _internal_mutable_time_from_start()->::ros::Duration::MergeFrom(from._internal_time_from_start());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointTrajectoryPoint::CopyFrom(const JointTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.trajectory_msgs.JointTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTrajectoryPoint::IsInitialized() const {
  return true;
}

void JointTrajectoryPoint::InternalSwap(JointTrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
  velocities_.InternalSwap(&other->velocities_);
  accelerations_.InternalSwap(&other->accelerations_);
  effort_.InternalSwap(&other->effort_);
  swap(time_from_start_, other->time_from_start_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointTrajectoryPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_getter, &descriptor_table_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto_once,
      file_level_metadata_ros_2ftrajectory_5fmsgs_2fJointTrajectoryPoint_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trajectory_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::trajectory_msgs::JointTrajectoryPoint* Arena::CreateMaybeMessage< ::ros::trajectory_msgs::JointTrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::trajectory_msgs::JointTrajectoryPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
