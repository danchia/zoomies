// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/diagnostic_msgs/DiagnosticStatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/diagnostic_msgs/KeyValue.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto;
namespace ros {
namespace diagnostic_msgs {
class DiagnosticStatus;
struct DiagnosticStatusDefaultTypeInternal;
extern DiagnosticStatusDefaultTypeInternal _DiagnosticStatus_default_instance_;
}  // namespace diagnostic_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::diagnostic_msgs::DiagnosticStatus* Arena::CreateMaybeMessage<::ros::diagnostic_msgs::DiagnosticStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace diagnostic_msgs {

// ===================================================================

class DiagnosticStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.diagnostic_msgs.DiagnosticStatus) */ {
 public:
  inline DiagnosticStatus() : DiagnosticStatus(nullptr) {}
  ~DiagnosticStatus() override;
  explicit constexpr DiagnosticStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiagnosticStatus(const DiagnosticStatus& from);
  DiagnosticStatus(DiagnosticStatus&& from) noexcept
    : DiagnosticStatus() {
    *this = ::std::move(from);
  }

  inline DiagnosticStatus& operator=(const DiagnosticStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosticStatus& operator=(DiagnosticStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiagnosticStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiagnosticStatus* internal_default_instance() {
    return reinterpret_cast<const DiagnosticStatus*>(
               &_DiagnosticStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiagnosticStatus& a, DiagnosticStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DiagnosticStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiagnosticStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiagnosticStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiagnosticStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiagnosticStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiagnosticStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.diagnostic_msgs.DiagnosticStatus";
  }
  protected:
  explicit DiagnosticStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 5,
    kNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kHardwareIdFieldNumber = 4,
    kLevelFieldNumber = 1,
  };
  // repeated .ros.diagnostic_msgs.KeyValue values = 5;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::ros::diagnostic_msgs::KeyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::diagnostic_msgs::KeyValue >*
      mutable_values();
  private:
  const ::ros::diagnostic_msgs::KeyValue& _internal_values(int index) const;
  ::ros::diagnostic_msgs::KeyValue* _internal_add_values();
  public:
  const ::ros::diagnostic_msgs::KeyValue& values(int index) const;
  ::ros::diagnostic_msgs::KeyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::diagnostic_msgs::KeyValue >&
      values() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string hardware_id = 4;
  void clear_hardware_id();
  const std::string& hardware_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hardware_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hardware_id();
  PROTOBUF_NODISCARD std::string* release_hardware_id();
  void set_allocated_hardware_id(std::string* hardware_id);
  private:
  const std::string& _internal_hardware_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hardware_id(const std::string& value);
  std::string* _internal_mutable_hardware_id();
  public:

  // sint32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros.diagnostic_msgs.DiagnosticStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::diagnostic_msgs::KeyValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hardware_id_;
  int32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiagnosticStatus

// sint32 level = 1;
inline void DiagnosticStatus::clear_level() {
  level_ = 0;
}
inline int32_t DiagnosticStatus::_internal_level() const {
  return level_;
}
inline int32_t DiagnosticStatus::level() const {
  // @@protoc_insertion_point(field_get:ros.diagnostic_msgs.DiagnosticStatus.level)
  return _internal_level();
}
inline void DiagnosticStatus::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void DiagnosticStatus::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:ros.diagnostic_msgs.DiagnosticStatus.level)
}

// string name = 2;
inline void DiagnosticStatus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::name() const {
  // @@protoc_insertion_point(field_get:ros.diagnostic_msgs.DiagnosticStatus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiagnosticStatus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.diagnostic_msgs.DiagnosticStatus.name)
}
inline std::string* DiagnosticStatus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ros.diagnostic_msgs.DiagnosticStatus.name)
  return _s;
}
inline const std::string& DiagnosticStatus::_internal_name() const {
  return name_.Get();
}
inline void DiagnosticStatus::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::release_name() {
  // @@protoc_insertion_point(field_release:ros.diagnostic_msgs.DiagnosticStatus.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiagnosticStatus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.diagnostic_msgs.DiagnosticStatus.name)
}

// string message = 3;
inline void DiagnosticStatus::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::message() const {
  // @@protoc_insertion_point(field_get:ros.diagnostic_msgs.DiagnosticStatus.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiagnosticStatus::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.diagnostic_msgs.DiagnosticStatus.message)
}
inline std::string* DiagnosticStatus::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ros.diagnostic_msgs.DiagnosticStatus.message)
  return _s;
}
inline const std::string& DiagnosticStatus::_internal_message() const {
  return message_.Get();
}
inline void DiagnosticStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::release_message() {
  // @@protoc_insertion_point(field_release:ros.diagnostic_msgs.DiagnosticStatus.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiagnosticStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.diagnostic_msgs.DiagnosticStatus.message)
}

// string hardware_id = 4;
inline void DiagnosticStatus::clear_hardware_id() {
  hardware_id_.ClearToEmpty();
}
inline const std::string& DiagnosticStatus::hardware_id() const {
  // @@protoc_insertion_point(field_get:ros.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return _internal_hardware_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiagnosticStatus::set_hardware_id(ArgT0&& arg0, ArgT... args) {
 
 hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.diagnostic_msgs.DiagnosticStatus.hardware_id)
}
inline std::string* DiagnosticStatus::mutable_hardware_id() {
  std::string* _s = _internal_mutable_hardware_id();
  // @@protoc_insertion_point(field_mutable:ros.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return _s;
}
inline const std::string& DiagnosticStatus::_internal_hardware_id() const {
  return hardware_id_.Get();
}
inline void DiagnosticStatus::_internal_set_hardware_id(const std::string& value) {
  
  hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::_internal_mutable_hardware_id() {
  
  return hardware_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiagnosticStatus::release_hardware_id() {
  // @@protoc_insertion_point(field_release:ros.diagnostic_msgs.DiagnosticStatus.hardware_id)
  return hardware_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiagnosticStatus::set_allocated_hardware_id(std::string* hardware_id) {
  if (hardware_id != nullptr) {
    
  } else {
    
  }
  hardware_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hardware_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hardware_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hardware_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.diagnostic_msgs.DiagnosticStatus.hardware_id)
}

// repeated .ros.diagnostic_msgs.KeyValue values = 5;
inline int DiagnosticStatus::_internal_values_size() const {
  return values_.size();
}
inline int DiagnosticStatus::values_size() const {
  return _internal_values_size();
}
inline ::ros::diagnostic_msgs::KeyValue* DiagnosticStatus::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ros.diagnostic_msgs.DiagnosticStatus.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::diagnostic_msgs::KeyValue >*
DiagnosticStatus::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ros.diagnostic_msgs.DiagnosticStatus.values)
  return &values_;
}
inline const ::ros::diagnostic_msgs::KeyValue& DiagnosticStatus::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::ros::diagnostic_msgs::KeyValue& DiagnosticStatus::values(int index) const {
  // @@protoc_insertion_point(field_get:ros.diagnostic_msgs.DiagnosticStatus.values)
  return _internal_values(index);
}
inline ::ros::diagnostic_msgs::KeyValue* DiagnosticStatus::_internal_add_values() {
  return values_.Add();
}
inline ::ros::diagnostic_msgs::KeyValue* DiagnosticStatus::add_values() {
  ::ros::diagnostic_msgs::KeyValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:ros.diagnostic_msgs.DiagnosticStatus.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::diagnostic_msgs::KeyValue >&
DiagnosticStatus::values() const {
  // @@protoc_insertion_point(field_list:ros.diagnostic_msgs.DiagnosticStatus.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace diagnostic_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto
