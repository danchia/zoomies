// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/diagnostic_msgs/DiagnosticStatus.proto

#include "ros/diagnostic_msgs/DiagnosticStatus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace diagnostic_msgs {
constexpr DiagnosticStatus::DiagnosticStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hardware_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0){}
struct DiagnosticStatusDefaultTypeInternal {
  constexpr DiagnosticStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagnosticStatusDefaultTypeInternal() {}
  union {
    DiagnosticStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagnosticStatusDefaultTypeInternal _DiagnosticStatus_default_instance_;
}  // namespace diagnostic_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto = nullptr;

const uint32_t TableStruct_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, level_),
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, name_),
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, message_),
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, hardware_id_),
  PROTOBUF_FIELD_OFFSET(::ros::diagnostic_msgs::DiagnosticStatus, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::diagnostic_msgs::DiagnosticStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::diagnostic_msgs::_DiagnosticStatus_default_instance_),
};

const char descriptor_table_protodef_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*ros/diagnostic_msgs/DiagnosticStatus.p"
  "roto\022\023ros.diagnostic_msgs\032\"ros/diagnosti"
  "c_msgs/KeyValue.proto\"\204\001\n\020DiagnosticStat"
  "us\022\r\n\005level\030\001 \001(\021\022\014\n\004name\030\002 \001(\t\022\017\n\007messa"
  "ge\030\003 \001(\t\022\023\n\013hardware_id\030\004 \001(\t\022-\n\006values\030"
  "\005 \003(\0132\035.ros.diagnostic_msgs.KeyValueb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_deps[1] = {
  &::descriptor_table_ros_2fdiagnostic_5fmsgs_2fKeyValue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto = {
  false, false, 244, descriptor_table_protodef_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto, "ros/diagnostic_msgs/DiagnosticStatus.proto", 
  &descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_once, descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto::offsets,
  file_level_metadata_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto, file_level_enum_descriptors_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto, file_level_service_descriptors_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_getter() {
  return &descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto(&descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto);
namespace ros {
namespace diagnostic_msgs {

// ===================================================================

class DiagnosticStatus::_Internal {
 public:
};

void DiagnosticStatus::clear_values() {
  values_.Clear();
}
DiagnosticStatus::DiagnosticStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.diagnostic_msgs.DiagnosticStatus)
}
DiagnosticStatus::DiagnosticStatus(const DiagnosticStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  hardware_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hardware_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardware_id().empty()) {
    hardware_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hardware_id(), 
      GetArenaForAllocation());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:ros.diagnostic_msgs.DiagnosticStatus)
}

inline void DiagnosticStatus::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hardware_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hardware_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
level_ = 0;
}

DiagnosticStatus::~DiagnosticStatus() {
  // @@protoc_insertion_point(destructor:ros.diagnostic_msgs.DiagnosticStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiagnosticStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosticStatus::ArenaDtor(void* object) {
  DiagnosticStatus* _this = reinterpret_cast< DiagnosticStatus* >(object);
  (void)_this;
}
void DiagnosticStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiagnosticStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiagnosticStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.diagnostic_msgs.DiagnosticStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  name_.ClearToEmpty();
  message_.ClearToEmpty();
  hardware_id_.ClearToEmpty();
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiagnosticStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.diagnostic_msgs.DiagnosticStatus.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.diagnostic_msgs.DiagnosticStatus.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hardware_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hardware_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.diagnostic_msgs.DiagnosticStatus.hardware_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ros.diagnostic_msgs.KeyValue values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiagnosticStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.diagnostic_msgs.DiagnosticStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_level(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.diagnostic_msgs.DiagnosticStatus.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.diagnostic_msgs.DiagnosticStatus.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // string hardware_id = 4;
  if (!this->_internal_hardware_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_id().data(), static_cast<int>(this->_internal_hardware_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.diagnostic_msgs.DiagnosticStatus.hardware_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hardware_id(), target);
  }

  // repeated .ros.diagnostic_msgs.KeyValue values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.diagnostic_msgs.DiagnosticStatus)
  return target;
}

size_t DiagnosticStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.diagnostic_msgs.DiagnosticStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ros.diagnostic_msgs.KeyValue values = 5;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string hardware_id = 4;
  if (!this->_internal_hardware_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_id());
  }

  // sint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiagnosticStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiagnosticStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiagnosticStatus::GetClassData() const { return &_class_data_; }

void DiagnosticStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiagnosticStatus *>(to)->MergeFrom(
      static_cast<const DiagnosticStatus &>(from));
}


void DiagnosticStatus::MergeFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.diagnostic_msgs.DiagnosticStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_hardware_id().empty()) {
    _internal_set_hardware_id(from._internal_hardware_id());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiagnosticStatus::CopyFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.diagnostic_msgs.DiagnosticStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticStatus::IsInitialized() const {
  return true;
}

void DiagnosticStatus::InternalSwap(DiagnosticStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hardware_id_, lhs_arena,
      &other->hardware_id_, rhs_arena
  );
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_getter, &descriptor_table_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto_once,
      file_level_metadata_ros_2fdiagnostic_5fmsgs_2fDiagnosticStatus_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace diagnostic_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::diagnostic_msgs::DiagnosticStatus* Arena::CreateMaybeMessage< ::ros::diagnostic_msgs::DiagnosticStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::diagnostic_msgs::DiagnosticStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
