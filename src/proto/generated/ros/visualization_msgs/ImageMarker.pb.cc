// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/visualization_msgs/ImageMarker.proto

#include "ros/visualization_msgs/ImageMarker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace visualization_msgs {
constexpr ImageMarker::ImageMarker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , outline_colors_()
  , ns_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , position_(nullptr)
  , outline_color_(nullptr)
  , fill_color_(nullptr)
  , lifetime_(nullptr)
  , id_(0)
  , type_(0)
  , action_(0)
  , scale_(0)
  , filled_(0){}
struct ImageMarkerDefaultTypeInternal {
  constexpr ImageMarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageMarkerDefaultTypeInternal() {}
  union {
    ImageMarker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageMarkerDefaultTypeInternal _ImageMarker_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto = nullptr;

const uint32_t TableStruct_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, header_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, ns_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, id_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, type_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, action_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, position_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, scale_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, outline_color_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, filled_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, fill_color_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, lifetime_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, points_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::ImageMarker, outline_colors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::visualization_msgs::ImageMarker)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::visualization_msgs::_ImageMarker_default_instance_),
};

const char descriptor_table_protodef_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(ros/visualization_msgs/ImageMarker.pro"
  "to\022\026ros.visualization_msgs\032\022ros/builtins"
  ".proto\032\035ros/geometry_msgs/Point.proto\032\034r"
  "os/std_msgs/ColorRGBA.proto\032\031ros/std_msg"
  "s/Header.proto\"\215\003\n\013ImageMarker\022$\n\006header"
  "\030\001 \001(\0132\024.ros.std_msgs.Header\022\n\n\002ns\030\002 \001(\t"
  "\022\n\n\002id\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\016\n\006action\030\005 \001"
  "(\005\022*\n\010position\030\006 \001(\0132\030.ros.geometry_msgs"
  ".Point\022\r\n\005scale\030\007 \001(\002\022.\n\routline_color\030\010"
  " \001(\0132\027.ros.std_msgs.ColorRGBA\022\016\n\006filled\030"
  "\t \001(\005\022+\n\nfill_color\030\n \001(\0132\027.ros.std_msgs"
  ".ColorRGBA\022\037\n\010lifetime\030\013 \001(\0132\r.ros.Durat"
  "ion\022(\n\006points\030\014 \003(\0132\030.ros.geometry_msgs."
  "Point\022/\n\016outline_colors\030\r \003(\0132\027.ros.std_"
  "msgs.ColorRGBAb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_deps[4] = {
  &::descriptor_table_ros_2fbuiltins_2eproto,
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fPoint_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fColorRGBA_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto = {
  false, false, 582, descriptor_table_protodef_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto, "ros/visualization_msgs/ImageMarker.proto", 
  &descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_once, descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto::offsets,
  file_level_metadata_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto, file_level_enum_descriptors_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto, file_level_service_descriptors_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_getter() {
  return &descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto(&descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto);
namespace ros {
namespace visualization_msgs {

// ===================================================================

class ImageMarker::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const ImageMarker* msg);
  static const ::ros::geometry_msgs::Point& position(const ImageMarker* msg);
  static const ::ros::std_msgs::ColorRGBA& outline_color(const ImageMarker* msg);
  static const ::ros::std_msgs::ColorRGBA& fill_color(const ImageMarker* msg);
  static const ::ros::Duration& lifetime(const ImageMarker* msg);
};

const ::ros::std_msgs::Header&
ImageMarker::_Internal::header(const ImageMarker* msg) {
  return *msg->header_;
}
const ::ros::geometry_msgs::Point&
ImageMarker::_Internal::position(const ImageMarker* msg) {
  return *msg->position_;
}
const ::ros::std_msgs::ColorRGBA&
ImageMarker::_Internal::outline_color(const ImageMarker* msg) {
  return *msg->outline_color_;
}
const ::ros::std_msgs::ColorRGBA&
ImageMarker::_Internal::fill_color(const ImageMarker* msg) {
  return *msg->fill_color_;
}
const ::ros::Duration&
ImageMarker::_Internal::lifetime(const ImageMarker* msg) {
  return *msg->lifetime_;
}
void ImageMarker::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ImageMarker::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void ImageMarker::clear_outline_color() {
  if (GetArenaForAllocation() == nullptr && outline_color_ != nullptr) {
    delete outline_color_;
  }
  outline_color_ = nullptr;
}
void ImageMarker::clear_fill_color() {
  if (GetArenaForAllocation() == nullptr && fill_color_ != nullptr) {
    delete fill_color_;
  }
  fill_color_ = nullptr;
}
void ImageMarker::clear_lifetime() {
  if (GetArenaForAllocation() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
}
void ImageMarker::clear_points() {
  points_.Clear();
}
void ImageMarker::clear_outline_colors() {
  outline_colors_.Clear();
}
ImageMarker::ImageMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena),
  outline_colors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.visualization_msgs.ImageMarker)
}
ImageMarker::ImageMarker(const ImageMarker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      outline_colors_(from.outline_colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ns().empty()) {
    ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ns(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::ros::geometry_msgs::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_outline_color()) {
    outline_color_ = new ::ros::std_msgs::ColorRGBA(*from.outline_color_);
  } else {
    outline_color_ = nullptr;
  }
  if (from._internal_has_fill_color()) {
    fill_color_ = new ::ros::std_msgs::ColorRGBA(*from.fill_color_);
  } else {
    fill_color_ = nullptr;
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new ::ros::Duration(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
    reinterpret_cast<char*>(&id_)) + sizeof(filled_));
  // @@protoc_insertion_point(copy_constructor:ros.visualization_msgs.ImageMarker)
}

inline void ImageMarker::SharedCtor() {
ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filled_) -
    reinterpret_cast<char*>(&header_)) + sizeof(filled_));
}

ImageMarker::~ImageMarker() {
  // @@protoc_insertion_point(destructor:ros.visualization_msgs.ImageMarker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImageMarker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete outline_color_;
  if (this != internal_default_instance()) delete fill_color_;
  if (this != internal_default_instance()) delete lifetime_;
}

void ImageMarker::ArenaDtor(void* object) {
  ImageMarker* _this = reinterpret_cast< ImageMarker* >(object);
  (void)_this;
}
void ImageMarker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageMarker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.visualization_msgs.ImageMarker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  outline_colors_.Clear();
  ns_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && outline_color_ != nullptr) {
    delete outline_color_;
  }
  outline_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fill_color_ != nullptr) {
    delete fill_color_;
  }
  fill_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filled_) -
      reinterpret_cast<char*>(&id_)) + sizeof(filled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMarker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.visualization_msgs.ImageMarker.ns"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.Point position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ros.std_msgs.ColorRGBA outline_color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_outline_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 filled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.std_msgs.ColorRGBA fill_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration lifetime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ros.geometry_msgs.Point points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ros.std_msgs.ColorRGBA outline_colors = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outline_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageMarker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.visualization_msgs.ImageMarker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string ns = 2;
  if (!this->_internal_ns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns().data(), static_cast<int>(this->_internal_ns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.visualization_msgs.ImageMarker.ns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  // .ros.geometry_msgs.Point position = 6;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // float scale = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_scale(), target);
  }

  // .ros.std_msgs.ColorRGBA outline_color = 8;
  if (this->_internal_has_outline_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::outline_color(this), target, stream);
  }

  // int32 filled = 9;
  if (this->_internal_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_filled(), target);
  }

  // .ros.std_msgs.ColorRGBA fill_color = 10;
  if (this->_internal_has_fill_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::fill_color(this), target, stream);
  }

  // .ros.Duration lifetime = 11;
  if (this->_internal_has_lifetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::lifetime(this), target, stream);
  }

  // repeated .ros.geometry_msgs.Point points = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_points(i), target, stream);
  }

  // repeated .ros.std_msgs.ColorRGBA outline_colors = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outline_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_outline_colors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.visualization_msgs.ImageMarker)
  return target;
}

size_t ImageMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.visualization_msgs.ImageMarker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ros.geometry_msgs.Point points = 12;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ros.std_msgs.ColorRGBA outline_colors = 13;
  total_size += 1UL * this->_internal_outline_colors_size();
  for (const auto& msg : this->outline_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ns = 2;
  if (!this->_internal_ns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns());
  }

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ros.geometry_msgs.Point position = 6;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ros.std_msgs.ColorRGBA outline_color = 8;
  if (this->_internal_has_outline_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outline_color_);
  }

  // .ros.std_msgs.ColorRGBA fill_color = 10;
  if (this->_internal_has_fill_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_color_);
  }

  // .ros.Duration lifetime = 11;
  if (this->_internal_has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  // float scale = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    total_size += 1 + 4;
  }

  // int32 filled = 9;
  if (this->_internal_filled() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_filled());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageMarker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImageMarker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageMarker::GetClassData() const { return &_class_data_; }

void ImageMarker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImageMarker *>(to)->MergeFrom(
      static_cast<const ImageMarker &>(from));
}


void ImageMarker::MergeFrom(const ImageMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.visualization_msgs.ImageMarker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  outline_colors_.MergeFrom(from.outline_colors_);
  if (!from._internal_ns().empty()) {
    _internal_set_ns(from._internal_ns());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::ros::geometry_msgs::Point::MergeFrom(from._internal_position());
  }
  if (from._internal_has_outline_color()) {
    _internal_mutable_outline_color()->::ros::std_msgs::ColorRGBA::MergeFrom(from._internal_outline_color());
  }
  if (from._internal_has_fill_color()) {
    _internal_mutable_fill_color()->::ros::std_msgs::ColorRGBA::MergeFrom(from._internal_fill_color());
  }
  if (from._internal_has_lifetime()) {
    _internal_mutable_lifetime()->::ros::Duration::MergeFrom(from._internal_lifetime());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = from._internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from._internal_filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageMarker::CopyFrom(const ImageMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.visualization_msgs.ImageMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMarker::IsInitialized() const {
  return true;
}

void ImageMarker::InternalSwap(ImageMarker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  outline_colors_.InternalSwap(&other->outline_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ns_, lhs_arena,
      &other->ns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMarker, filled_)
      + sizeof(ImageMarker::filled_)
      - PROTOBUF_FIELD_OFFSET(ImageMarker, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMarker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_getter, &descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto_once,
      file_level_metadata_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace visualization_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::visualization_msgs::ImageMarker* Arena::CreateMaybeMessage< ::ros::visualization_msgs::ImageMarker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::visualization_msgs::ImageMarker >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
