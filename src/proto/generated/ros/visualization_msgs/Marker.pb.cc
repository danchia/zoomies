// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/visualization_msgs/Marker.proto

#include "ros/visualization_msgs/Marker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace visualization_msgs {
constexpr Marker::Marker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , colors_()
  , ns_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mesh_resource_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , pose_(nullptr)
  , scale_(nullptr)
  , color_(nullptr)
  , lifetime_(nullptr)
  , id_(0)
  , type_(0)
  , action_(0)
  , frame_locked_(false)
  , mesh_use_embedded_materials_(false){}
struct MarkerDefaultTypeInternal {
  constexpr MarkerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MarkerDefaultTypeInternal() {}
  union {
    Marker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MarkerDefaultTypeInternal _Marker_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fvisualization_5fmsgs_2fMarker_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fvisualization_5fmsgs_2fMarker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fvisualization_5fmsgs_2fMarker_2eproto = nullptr;

const uint32_t TableStruct_ros_2fvisualization_5fmsgs_2fMarker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, header_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, ns_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, id_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, type_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, action_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, pose_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, scale_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, color_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, lifetime_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, frame_locked_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, points_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, colors_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, text_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, mesh_resource_),
  PROTOBUF_FIELD_OFFSET(::ros::visualization_msgs::Marker, mesh_use_embedded_materials_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::visualization_msgs::Marker)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::visualization_msgs::_Marker_default_instance_),
};

const char descriptor_table_protodef_ros_2fvisualization_5fmsgs_2fMarker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#ros/visualization_msgs/Marker.proto\022\026r"
  "os.visualization_msgs\032\022ros/builtins.prot"
  "o\032\035ros/geometry_msgs/Point.proto\032\034ros/ge"
  "ometry_msgs/Pose.proto\032\037ros/geometry_msg"
  "s/Vector3.proto\032\034ros/std_msgs/ColorRGBA."
  "proto\032\031ros/std_msgs/Header.proto\"\262\003\n\006Mar"
  "ker\022$\n\006header\030\001 \001(\0132\024.ros.std_msgs.Heade"
  "r\022\n\n\002ns\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022"
  "\016\n\006action\030\005 \001(\005\022%\n\004pose\030\006 \001(\0132\027.ros.geom"
  "etry_msgs.Pose\022)\n\005scale\030\007 \001(\0132\032.ros.geom"
  "etry_msgs.Vector3\022&\n\005color\030\010 \001(\0132\027.ros.s"
  "td_msgs.ColorRGBA\022\037\n\010lifetime\030\t \001(\0132\r.ro"
  "s.Duration\022\024\n\014frame_locked\030\n \001(\010\022(\n\006poin"
  "ts\030\013 \003(\0132\030.ros.geometry_msgs.Point\022\'\n\006co"
  "lors\030\014 \003(\0132\027.ros.std_msgs.ColorRGBA\022\014\n\004t"
  "ext\030\r \001(\t\022\025\n\rmesh_resource\030\016 \001(\t\022#\n\033mesh"
  "_use_embedded_materials\030\017 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_deps[6] = {
  &::descriptor_table_ros_2fbuiltins_2eproto,
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fPoint_2eproto,
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fPose_2eproto,
  &::descriptor_table_ros_2fgeometry_5fmsgs_2fVector3_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fColorRGBA_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto = {
  false, false, 677, descriptor_table_protodef_ros_2fvisualization_5fmsgs_2fMarker_2eproto, "ros/visualization_msgs/Marker.proto", 
  &descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_once, descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_ros_2fvisualization_5fmsgs_2fMarker_2eproto::offsets,
  file_level_metadata_ros_2fvisualization_5fmsgs_2fMarker_2eproto, file_level_enum_descriptors_ros_2fvisualization_5fmsgs_2fMarker_2eproto, file_level_service_descriptors_ros_2fvisualization_5fmsgs_2fMarker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_getter() {
  return &descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fvisualization_5fmsgs_2fMarker_2eproto(&descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto);
namespace ros {
namespace visualization_msgs {

// ===================================================================

class Marker::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const Marker* msg);
  static const ::ros::geometry_msgs::Pose& pose(const Marker* msg);
  static const ::ros::geometry_msgs::Vector3& scale(const Marker* msg);
  static const ::ros::std_msgs::ColorRGBA& color(const Marker* msg);
  static const ::ros::Duration& lifetime(const Marker* msg);
};

const ::ros::std_msgs::Header&
Marker::_Internal::header(const Marker* msg) {
  return *msg->header_;
}
const ::ros::geometry_msgs::Pose&
Marker::_Internal::pose(const Marker* msg) {
  return *msg->pose_;
}
const ::ros::geometry_msgs::Vector3&
Marker::_Internal::scale(const Marker* msg) {
  return *msg->scale_;
}
const ::ros::std_msgs::ColorRGBA&
Marker::_Internal::color(const Marker* msg) {
  return *msg->color_;
}
const ::ros::Duration&
Marker::_Internal::lifetime(const Marker* msg) {
  return *msg->lifetime_;
}
void Marker::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Marker::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Marker::clear_scale() {
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void Marker::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
void Marker::clear_lifetime() {
  if (GetArenaForAllocation() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
}
void Marker::clear_points() {
  points_.Clear();
}
void Marker::clear_colors() {
  colors_.Clear();
}
Marker::Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena),
  colors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.visualization_msgs.Marker)
}
Marker::Marker(const Marker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ns().empty()) {
    ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ns(), 
      GetArenaForAllocation());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  mesh_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mesh_resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mesh_resource().empty()) {
    mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mesh_resource(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::ros::geometry_msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::ros::geometry_msgs::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::ros::std_msgs::ColorRGBA(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new ::ros::Duration(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mesh_use_embedded_materials_));
  // @@protoc_insertion_point(copy_constructor:ros.visualization_msgs.Marker)
}

inline void Marker::SharedCtor() {
ns_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mesh_resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mesh_resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
    reinterpret_cast<char*>(&header_)) + sizeof(mesh_use_embedded_materials_));
}

Marker::~Marker() {
  // @@protoc_insertion_point(destructor:ros.visualization_msgs.Marker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Marker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ns_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mesh_resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete lifetime_;
}

void Marker::ArenaDtor(void* object) {
  Marker* _this = reinterpret_cast< Marker* >(object);
  (void)_this;
}
void Marker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Marker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Marker::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.visualization_msgs.Marker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  colors_.Clear();
  ns_.ClearToEmpty();
  text_.ClearToEmpty();
  mesh_resource_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mesh_use_embedded_materials_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ns();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.visualization_msgs.Marker.ns"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.Pose pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.geometry_msgs.Vector3 scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.std_msgs.ColorRGBA color = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.Duration lifetime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool frame_locked = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          frame_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ros.geometry_msgs.Point points = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ros.std_msgs.ColorRGBA colors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.visualization_msgs.Marker.text"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mesh_resource = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_mesh_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.visualization_msgs.Marker.mesh_resource"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mesh_use_embedded_materials = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          mesh_use_embedded_materials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.visualization_msgs.Marker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string ns = 2;
  if (!this->_internal_ns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns().data(), static_cast<int>(this->_internal_ns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.visualization_msgs.Marker.ns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(), target);
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  // .ros.geometry_msgs.Pose pose = 6;
  if (this->_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pose(this), target, stream);
  }

  // .ros.geometry_msgs.Vector3 scale = 7;
  if (this->_internal_has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scale(this), target, stream);
  }

  // .ros.std_msgs.ColorRGBA color = 8;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::color(this), target, stream);
  }

  // .ros.Duration lifetime = 9;
  if (this->_internal_has_lifetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lifetime(this), target, stream);
  }

  // bool frame_locked = 10;
  if (this->_internal_frame_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_frame_locked(), target);
  }

  // repeated .ros.geometry_msgs.Point points = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_points(i), target, stream);
  }

  // repeated .ros.std_msgs.ColorRGBA colors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_colors(i), target, stream);
  }

  // string text = 13;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.visualization_msgs.Marker.text");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_text(), target);
  }

  // string mesh_resource = 14;
  if (!this->_internal_mesh_resource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesh_resource().data(), static_cast<int>(this->_internal_mesh_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.visualization_msgs.Marker.mesh_resource");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_mesh_resource(), target);
  }

  // bool mesh_use_embedded_materials = 15;
  if (this->_internal_mesh_use_embedded_materials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_mesh_use_embedded_materials(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.visualization_msgs.Marker)
  return target;
}

size_t Marker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.visualization_msgs.Marker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ros.geometry_msgs.Point points = 11;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ros.std_msgs.ColorRGBA colors = 12;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ns = 2;
  if (!this->_internal_ns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns());
  }

  // string text = 13;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string mesh_resource = 14;
  if (!this->_internal_mesh_resource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesh_resource());
  }

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ros.geometry_msgs.Pose pose = 6;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .ros.geometry_msgs.Vector3 scale = 7;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .ros.std_msgs.ColorRGBA color = 8;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .ros.Duration lifetime = 9;
  if (this->_internal_has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 action = 5;
  if (this->_internal_action() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  // bool frame_locked = 10;
  if (this->_internal_frame_locked() != 0) {
    total_size += 1 + 1;
  }

  // bool mesh_use_embedded_materials = 15;
  if (this->_internal_mesh_use_embedded_materials() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Marker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker::GetClassData() const { return &_class_data_; }

void Marker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Marker *>(to)->MergeFrom(
      static_cast<const Marker &>(from));
}


void Marker::MergeFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.visualization_msgs.Marker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  colors_.MergeFrom(from.colors_);
  if (!from._internal_ns().empty()) {
    _internal_set_ns(from._internal_ns());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_mesh_resource().empty()) {
    _internal_set_mesh_resource(from._internal_mesh_resource());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::ros::geometry_msgs::Pose::MergeFrom(from._internal_pose());
  }
  if (from._internal_has_scale()) {
    _internal_mutable_scale()->::ros::geometry_msgs::Vector3::MergeFrom(from._internal_scale());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::ros::std_msgs::ColorRGBA::MergeFrom(from._internal_color());
  }
  if (from._internal_has_lifetime()) {
    _internal_mutable_lifetime()->::ros::Duration::MergeFrom(from._internal_lifetime());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_frame_locked() != 0) {
    _internal_set_frame_locked(from._internal_frame_locked());
  }
  if (from._internal_mesh_use_embedded_materials() != 0) {
    _internal_set_mesh_use_embedded_materials(from._internal_mesh_use_embedded_materials());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker::CopyFrom(const Marker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.visualization_msgs.Marker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker::IsInitialized() const {
  return true;
}

void Marker::InternalSwap(Marker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  colors_.InternalSwap(&other->colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ns_, lhs_arena,
      &other->ns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mesh_resource_, lhs_arena,
      &other->mesh_resource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Marker, mesh_use_embedded_materials_)
      + sizeof(Marker::mesh_use_embedded_materials_)
      - PROTOBUF_FIELD_OFFSET(Marker, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_getter, &descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto_once,
      file_level_metadata_ros_2fvisualization_5fmsgs_2fMarker_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace visualization_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::visualization_msgs::Marker* Arena::CreateMaybeMessage< ::ros::visualization_msgs::Marker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::visualization_msgs::Marker >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
