// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/visualization_msgs/Marker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fMarker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fMarker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/builtins.pb.h"
#include "ros/geometry_msgs/Point.pb.h"
#include "ros/geometry_msgs/Pose.pb.h"
#include "ros/geometry_msgs/Vector3.pb.h"
#include "ros/std_msgs/ColorRGBA.pb.h"
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fvisualization_5fmsgs_2fMarker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fvisualization_5fmsgs_2fMarker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fvisualization_5fmsgs_2fMarker_2eproto;
namespace ros {
namespace visualization_msgs {
class Marker;
struct MarkerDefaultTypeInternal;
extern MarkerDefaultTypeInternal _Marker_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::visualization_msgs::Marker* Arena::CreateMaybeMessage<::ros::visualization_msgs::Marker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace visualization_msgs {

// ===================================================================

class Marker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.visualization_msgs.Marker) */ {
 public:
  inline Marker() : Marker(nullptr) {}
  ~Marker() override;
  explicit constexpr Marker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker(const Marker& from);
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker& operator=(Marker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Marker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Marker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Marker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.visualization_msgs.Marker";
  }
  protected:
  explicit Marker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 11,
    kColorsFieldNumber = 12,
    kNsFieldNumber = 2,
    kTextFieldNumber = 13,
    kMeshResourceFieldNumber = 14,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 6,
    kScaleFieldNumber = 7,
    kColorFieldNumber = 8,
    kLifetimeFieldNumber = 9,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kActionFieldNumber = 5,
    kFrameLockedFieldNumber = 10,
    kMeshUseEmbeddedMaterialsFieldNumber = 15,
  };
  // repeated .ros.geometry_msgs.Point points = 11;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::ros::geometry_msgs::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >*
      mutable_points();
  private:
  const ::ros::geometry_msgs::Point& _internal_points(int index) const;
  ::ros::geometry_msgs::Point* _internal_add_points();
  public:
  const ::ros::geometry_msgs::Point& points(int index) const;
  ::ros::geometry_msgs::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >&
      points() const;

  // repeated .ros.std_msgs.ColorRGBA colors = 12;
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::ros::std_msgs::ColorRGBA* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >*
      mutable_colors();
  private:
  const ::ros::std_msgs::ColorRGBA& _internal_colors(int index) const;
  ::ros::std_msgs::ColorRGBA* _internal_add_colors();
  public:
  const ::ros::std_msgs::ColorRGBA& colors(int index) const;
  ::ros::std_msgs::ColorRGBA* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >&
      colors() const;

  // string ns = 2;
  void clear_ns();
  const std::string& ns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ns();
  PROTOBUF_NODISCARD std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // string text = 13;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string mesh_resource = 14;
  void clear_mesh_resource();
  const std::string& mesh_resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mesh_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mesh_resource();
  PROTOBUF_NODISCARD std::string* release_mesh_resource();
  void set_allocated_mesh_resource(std::string* mesh_resource);
  private:
  const std::string& _internal_mesh_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mesh_resource(const std::string& value);
  std::string* _internal_mutable_mesh_resource();
  public:

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // .ros.geometry_msgs.Pose pose = 6;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::ros::geometry_msgs::Pose& pose() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::Pose* release_pose();
  ::ros::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::ros::geometry_msgs::Pose* pose);
  private:
  const ::ros::geometry_msgs::Pose& _internal_pose() const;
  ::ros::geometry_msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::ros::geometry_msgs::Pose* pose);
  ::ros::geometry_msgs::Pose* unsafe_arena_release_pose();

  // .ros.geometry_msgs.Vector3 scale = 7;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::ros::geometry_msgs::Vector3& scale() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::Vector3* release_scale();
  ::ros::geometry_msgs::Vector3* mutable_scale();
  void set_allocated_scale(::ros::geometry_msgs::Vector3* scale);
  private:
  const ::ros::geometry_msgs::Vector3& _internal_scale() const;
  ::ros::geometry_msgs::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::ros::geometry_msgs::Vector3* scale);
  ::ros::geometry_msgs::Vector3* unsafe_arena_release_scale();

  // .ros.std_msgs.ColorRGBA color = 8;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::ros::std_msgs::ColorRGBA& color() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::ColorRGBA* release_color();
  ::ros::std_msgs::ColorRGBA* mutable_color();
  void set_allocated_color(::ros::std_msgs::ColorRGBA* color);
  private:
  const ::ros::std_msgs::ColorRGBA& _internal_color() const;
  ::ros::std_msgs::ColorRGBA* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::ros::std_msgs::ColorRGBA* color);
  ::ros::std_msgs::ColorRGBA* unsafe_arena_release_color();

  // .ros.Duration lifetime = 9;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const ::ros::Duration& lifetime() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_lifetime();
  ::ros::Duration* mutable_lifetime();
  void set_allocated_lifetime(::ros::Duration* lifetime);
  private:
  const ::ros::Duration& _internal_lifetime() const;
  ::ros::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      ::ros::Duration* lifetime);
  ::ros::Duration* unsafe_arena_release_lifetime();

  // int32 id = 3;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 4;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 action = 5;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // bool frame_locked = 10;
  void clear_frame_locked();
  bool frame_locked() const;
  void set_frame_locked(bool value);
  private:
  bool _internal_frame_locked() const;
  void _internal_set_frame_locked(bool value);
  public:

  // bool mesh_use_embedded_materials = 15;
  void clear_mesh_use_embedded_materials();
  bool mesh_use_embedded_materials() const;
  void set_mesh_use_embedded_materials(bool value);
  private:
  bool _internal_mesh_use_embedded_materials() const;
  void _internal_set_mesh_use_embedded_materials(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ros.visualization_msgs.Marker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA > colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_resource_;
  ::ros::std_msgs::Header* header_;
  ::ros::geometry_msgs::Pose* pose_;
  ::ros::geometry_msgs::Vector3* scale_;
  ::ros::std_msgs::ColorRGBA* color_;
  ::ros::Duration* lifetime_;
  int32_t id_;
  int32_t type_;
  int32_t action_;
  bool frame_locked_;
  bool mesh_use_embedded_materials_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fvisualization_5fmsgs_2fMarker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Marker

// .ros.std_msgs.Header header = 1;
inline bool Marker::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Marker::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& Marker::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& Marker::header() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.header)
  return _internal_header();
}
inline void Marker::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.Marker.header)
}
inline ::ros::std_msgs::Header* Marker::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* Marker::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* Marker::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* Marker::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.header)
  return _msg;
}
inline void Marker::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.header)
}

// string ns = 2;
inline void Marker::clear_ns() {
  ns_.ClearToEmpty();
}
inline const std::string& Marker::ns() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.ns)
  return _internal_ns();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker::set_ns(ArgT0&& arg0, ArgT... args) {
 
 ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.ns)
}
inline std::string* Marker::mutable_ns() {
  std::string* _s = _internal_mutable_ns();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.ns)
  return _s;
}
inline const std::string& Marker::_internal_ns() const {
  return ns_.Get();
}
inline void Marker::_internal_set_ns(const std::string& value) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker::_internal_mutable_ns() {
  
  return ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker::release_ns() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.ns)
  return ns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ns_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.ns)
}

// int32 id = 3;
inline void Marker::clear_id() {
  id_ = 0;
}
inline int32_t Marker::_internal_id() const {
  return id_;
}
inline int32_t Marker::id() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.id)
  return _internal_id();
}
inline void Marker::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void Marker::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.id)
}

// int32 type = 4;
inline void Marker::clear_type() {
  type_ = 0;
}
inline int32_t Marker::_internal_type() const {
  return type_;
}
inline int32_t Marker::type() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.type)
  return _internal_type();
}
inline void Marker::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void Marker::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.type)
}

// int32 action = 5;
inline void Marker::clear_action() {
  action_ = 0;
}
inline int32_t Marker::_internal_action() const {
  return action_;
}
inline int32_t Marker::action() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.action)
  return _internal_action();
}
inline void Marker::_internal_set_action(int32_t value) {
  
  action_ = value;
}
inline void Marker::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.action)
}

// .ros.geometry_msgs.Pose pose = 6;
inline bool Marker::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Marker::has_pose() const {
  return _internal_has_pose();
}
inline const ::ros::geometry_msgs::Pose& Marker::_internal_pose() const {
  const ::ros::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::Pose&>(
      ::ros::geometry_msgs::_Pose_default_instance_);
}
inline const ::ros::geometry_msgs::Pose& Marker::pose() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.pose)
  return _internal_pose();
}
inline void Marker::unsafe_arena_set_allocated_pose(
    ::ros::geometry_msgs::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.Marker.pose)
}
inline ::ros::geometry_msgs::Pose* Marker::release_pose() {
  
  ::ros::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::Pose* Marker::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.pose)
  
  ::ros::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::Pose* Marker::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::ros::geometry_msgs::Pose* Marker::mutable_pose() {
  ::ros::geometry_msgs::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.pose)
  return _msg;
}
inline void Marker::set_allocated_pose(::ros::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.pose)
}

// .ros.geometry_msgs.Vector3 scale = 7;
inline bool Marker::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Marker::has_scale() const {
  return _internal_has_scale();
}
inline const ::ros::geometry_msgs::Vector3& Marker::_internal_scale() const {
  const ::ros::geometry_msgs::Vector3* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::Vector3&>(
      ::ros::geometry_msgs::_Vector3_default_instance_);
}
inline const ::ros::geometry_msgs::Vector3& Marker::scale() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.scale)
  return _internal_scale();
}
inline void Marker::unsafe_arena_set_allocated_scale(
    ::ros::geometry_msgs::Vector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.Marker.scale)
}
inline ::ros::geometry_msgs::Vector3* Marker::release_scale() {
  
  ::ros::geometry_msgs::Vector3* temp = scale_;
  scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::Vector3* Marker::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.scale)
  
  ::ros::geometry_msgs::Vector3* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::Vector3* Marker::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::Vector3>(GetArenaForAllocation());
    scale_ = p;
  }
  return scale_;
}
inline ::ros::geometry_msgs::Vector3* Marker::mutable_scale() {
  ::ros::geometry_msgs::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.scale)
  return _msg;
}
inline void Marker::set_allocated_scale(::ros::geometry_msgs::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.scale)
}

// .ros.std_msgs.ColorRGBA color = 8;
inline bool Marker::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Marker::has_color() const {
  return _internal_has_color();
}
inline const ::ros::std_msgs::ColorRGBA& Marker::_internal_color() const {
  const ::ros::std_msgs::ColorRGBA* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::ColorRGBA&>(
      ::ros::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::ros::std_msgs::ColorRGBA& Marker::color() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.color)
  return _internal_color();
}
inline void Marker::unsafe_arena_set_allocated_color(
    ::ros::std_msgs::ColorRGBA* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.Marker.color)
}
inline ::ros::std_msgs::ColorRGBA* Marker::release_color() {
  
  ::ros::std_msgs::ColorRGBA* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* Marker::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.color)
  
  ::ros::std_msgs::ColorRGBA* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* Marker::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::ColorRGBA>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::ros::std_msgs::ColorRGBA* Marker::mutable_color() {
  ::ros::std_msgs::ColorRGBA* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.color)
  return _msg;
}
inline void Marker::set_allocated_color(::ros::std_msgs::ColorRGBA* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.color)
}

// .ros.Duration lifetime = 9;
inline bool Marker::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool Marker::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const ::ros::Duration& Marker::_internal_lifetime() const {
  const ::ros::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& Marker::lifetime() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.lifetime)
  return _internal_lifetime();
}
inline void Marker::unsafe_arena_set_allocated_lifetime(
    ::ros::Duration* lifetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.Marker.lifetime)
}
inline ::ros::Duration* Marker::release_lifetime() {
  
  ::ros::Duration* temp = lifetime_;
  lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* Marker::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.lifetime)
  
  ::ros::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::ros::Duration* Marker::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    lifetime_ = p;
  }
  return lifetime_;
}
inline ::ros::Duration* Marker::mutable_lifetime() {
  ::ros::Duration* _msg = _internal_mutable_lifetime();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.lifetime)
  return _msg;
}
inline void Marker::set_allocated_lifetime(::ros::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime));
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.lifetime)
}

// bool frame_locked = 10;
inline void Marker::clear_frame_locked() {
  frame_locked_ = false;
}
inline bool Marker::_internal_frame_locked() const {
  return frame_locked_;
}
inline bool Marker::frame_locked() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.frame_locked)
  return _internal_frame_locked();
}
inline void Marker::_internal_set_frame_locked(bool value) {
  
  frame_locked_ = value;
}
inline void Marker::set_frame_locked(bool value) {
  _internal_set_frame_locked(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.frame_locked)
}

// repeated .ros.geometry_msgs.Point points = 11;
inline int Marker::_internal_points_size() const {
  return points_.size();
}
inline int Marker::points_size() const {
  return _internal_points_size();
}
inline ::ros::geometry_msgs::Point* Marker::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >*
Marker::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ros.visualization_msgs.Marker.points)
  return &points_;
}
inline const ::ros::geometry_msgs::Point& Marker::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::ros::geometry_msgs::Point& Marker::points(int index) const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.points)
  return _internal_points(index);
}
inline ::ros::geometry_msgs::Point* Marker::_internal_add_points() {
  return points_.Add();
}
inline ::ros::geometry_msgs::Point* Marker::add_points() {
  ::ros::geometry_msgs::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:ros.visualization_msgs.Marker.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >&
Marker::points() const {
  // @@protoc_insertion_point(field_list:ros.visualization_msgs.Marker.points)
  return points_;
}

// repeated .ros.std_msgs.ColorRGBA colors = 12;
inline int Marker::_internal_colors_size() const {
  return colors_.size();
}
inline int Marker::colors_size() const {
  return _internal_colors_size();
}
inline ::ros::std_msgs::ColorRGBA* Marker::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >*
Marker::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:ros.visualization_msgs.Marker.colors)
  return &colors_;
}
inline const ::ros::std_msgs::ColorRGBA& Marker::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::ros::std_msgs::ColorRGBA& Marker::colors(int index) const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.colors)
  return _internal_colors(index);
}
inline ::ros::std_msgs::ColorRGBA* Marker::_internal_add_colors() {
  return colors_.Add();
}
inline ::ros::std_msgs::ColorRGBA* Marker::add_colors() {
  ::ros::std_msgs::ColorRGBA* _add = _internal_add_colors();
  // @@protoc_insertion_point(field_add:ros.visualization_msgs.Marker.colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >&
Marker::colors() const {
  // @@protoc_insertion_point(field_list:ros.visualization_msgs.Marker.colors)
  return colors_;
}

// string text = 13;
inline void Marker::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Marker::text() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.text)
}
inline std::string* Marker::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.text)
  return _s;
}
inline const std::string& Marker::_internal_text() const {
  return text_.Get();
}
inline void Marker::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker::release_text() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.text)
}

// string mesh_resource = 14;
inline void Marker::clear_mesh_resource() {
  mesh_resource_.ClearToEmpty();
}
inline const std::string& Marker::mesh_resource() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.mesh_resource)
  return _internal_mesh_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker::set_mesh_resource(ArgT0&& arg0, ArgT... args) {
 
 mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.mesh_resource)
}
inline std::string* Marker::mutable_mesh_resource() {
  std::string* _s = _internal_mutable_mesh_resource();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.Marker.mesh_resource)
  return _s;
}
inline const std::string& Marker::_internal_mesh_resource() const {
  return mesh_resource_.Get();
}
inline void Marker::_internal_set_mesh_resource(const std::string& value) {
  
  mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker::_internal_mutable_mesh_resource() {
  
  return mesh_resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker::release_mesh_resource() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.Marker.mesh_resource)
  return mesh_resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker::set_allocated_mesh_resource(std::string* mesh_resource) {
  if (mesh_resource != nullptr) {
    
  } else {
    
  }
  mesh_resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh_resource,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mesh_resource_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mesh_resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.Marker.mesh_resource)
}

// bool mesh_use_embedded_materials = 15;
inline void Marker::clear_mesh_use_embedded_materials() {
  mesh_use_embedded_materials_ = false;
}
inline bool Marker::_internal_mesh_use_embedded_materials() const {
  return mesh_use_embedded_materials_;
}
inline bool Marker::mesh_use_embedded_materials() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.Marker.mesh_use_embedded_materials)
  return _internal_mesh_use_embedded_materials();
}
inline void Marker::_internal_set_mesh_use_embedded_materials(bool value) {
  
  mesh_use_embedded_materials_ = value;
}
inline void Marker::set_mesh_use_embedded_materials(bool value) {
  _internal_set_mesh_use_embedded_materials(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.Marker.mesh_use_embedded_materials)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace visualization_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fMarker_2eproto
