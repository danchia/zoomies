// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/visualization_msgs/ImageMarker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/builtins.pb.h"
#include "ros/geometry_msgs/Point.pb.h"
#include "ros/std_msgs/ColorRGBA.pb.h"
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto;
namespace ros {
namespace visualization_msgs {
class ImageMarker;
struct ImageMarkerDefaultTypeInternal;
extern ImageMarkerDefaultTypeInternal _ImageMarker_default_instance_;
}  // namespace visualization_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::visualization_msgs::ImageMarker* Arena::CreateMaybeMessage<::ros::visualization_msgs::ImageMarker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace visualization_msgs {

// ===================================================================

class ImageMarker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.visualization_msgs.ImageMarker) */ {
 public:
  inline ImageMarker() : ImageMarker(nullptr) {}
  ~ImageMarker() override;
  explicit constexpr ImageMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMarker(const ImageMarker& from);
  ImageMarker(ImageMarker&& from) noexcept
    : ImageMarker() {
    *this = ::std::move(from);
  }

  inline ImageMarker& operator=(const ImageMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMarker& operator=(ImageMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMarker* internal_default_instance() {
    return reinterpret_cast<const ImageMarker*>(
               &_ImageMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageMarker& a, ImageMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMarker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImageMarker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.visualization_msgs.ImageMarker";
  }
  protected:
  explicit ImageMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 12,
    kOutlineColorsFieldNumber = 13,
    kNsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 6,
    kOutlineColorFieldNumber = 8,
    kFillColorFieldNumber = 10,
    kLifetimeFieldNumber = 11,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 4,
    kActionFieldNumber = 5,
    kScaleFieldNumber = 7,
    kFilledFieldNumber = 9,
  };
  // repeated .ros.geometry_msgs.Point points = 12;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::ros::geometry_msgs::Point* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >*
      mutable_points();
  private:
  const ::ros::geometry_msgs::Point& _internal_points(int index) const;
  ::ros::geometry_msgs::Point* _internal_add_points();
  public:
  const ::ros::geometry_msgs::Point& points(int index) const;
  ::ros::geometry_msgs::Point* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >&
      points() const;

  // repeated .ros.std_msgs.ColorRGBA outline_colors = 13;
  int outline_colors_size() const;
  private:
  int _internal_outline_colors_size() const;
  public:
  void clear_outline_colors();
  ::ros::std_msgs::ColorRGBA* mutable_outline_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >*
      mutable_outline_colors();
  private:
  const ::ros::std_msgs::ColorRGBA& _internal_outline_colors(int index) const;
  ::ros::std_msgs::ColorRGBA* _internal_add_outline_colors();
  public:
  const ::ros::std_msgs::ColorRGBA& outline_colors(int index) const;
  ::ros::std_msgs::ColorRGBA* add_outline_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >&
      outline_colors() const;

  // string ns = 2;
  void clear_ns();
  const std::string& ns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ns();
  PROTOBUF_NODISCARD std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // .ros.geometry_msgs.Point position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ros::geometry_msgs::Point& position() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::Point* release_position();
  ::ros::geometry_msgs::Point* mutable_position();
  void set_allocated_position(::ros::geometry_msgs::Point* position);
  private:
  const ::ros::geometry_msgs::Point& _internal_position() const;
  ::ros::geometry_msgs::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ros::geometry_msgs::Point* position);
  ::ros::geometry_msgs::Point* unsafe_arena_release_position();

  // .ros.std_msgs.ColorRGBA outline_color = 8;
  bool has_outline_color() const;
  private:
  bool _internal_has_outline_color() const;
  public:
  void clear_outline_color();
  const ::ros::std_msgs::ColorRGBA& outline_color() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::ColorRGBA* release_outline_color();
  ::ros::std_msgs::ColorRGBA* mutable_outline_color();
  void set_allocated_outline_color(::ros::std_msgs::ColorRGBA* outline_color);
  private:
  const ::ros::std_msgs::ColorRGBA& _internal_outline_color() const;
  ::ros::std_msgs::ColorRGBA* _internal_mutable_outline_color();
  public:
  void unsafe_arena_set_allocated_outline_color(
      ::ros::std_msgs::ColorRGBA* outline_color);
  ::ros::std_msgs::ColorRGBA* unsafe_arena_release_outline_color();

  // .ros.std_msgs.ColorRGBA fill_color = 10;
  bool has_fill_color() const;
  private:
  bool _internal_has_fill_color() const;
  public:
  void clear_fill_color();
  const ::ros::std_msgs::ColorRGBA& fill_color() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::ColorRGBA* release_fill_color();
  ::ros::std_msgs::ColorRGBA* mutable_fill_color();
  void set_allocated_fill_color(::ros::std_msgs::ColorRGBA* fill_color);
  private:
  const ::ros::std_msgs::ColorRGBA& _internal_fill_color() const;
  ::ros::std_msgs::ColorRGBA* _internal_mutable_fill_color();
  public:
  void unsafe_arena_set_allocated_fill_color(
      ::ros::std_msgs::ColorRGBA* fill_color);
  ::ros::std_msgs::ColorRGBA* unsafe_arena_release_fill_color();

  // .ros.Duration lifetime = 11;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const ::ros::Duration& lifetime() const;
  PROTOBUF_NODISCARD ::ros::Duration* release_lifetime();
  ::ros::Duration* mutable_lifetime();
  void set_allocated_lifetime(::ros::Duration* lifetime);
  private:
  const ::ros::Duration& _internal_lifetime() const;
  ::ros::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      ::ros::Duration* lifetime);
  ::ros::Duration* unsafe_arena_release_lifetime();

  // int32 id = 3;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 type = 4;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 action = 5;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // float scale = 7;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 filled = 9;
  void clear_filled();
  int32_t filled() const;
  void set_filled(int32_t value);
  private:
  int32_t _internal_filled() const;
  void _internal_set_filled(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros.visualization_msgs.ImageMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA > outline_colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::ros::std_msgs::Header* header_;
  ::ros::geometry_msgs::Point* position_;
  ::ros::std_msgs::ColorRGBA* outline_color_;
  ::ros::std_msgs::ColorRGBA* fill_color_;
  ::ros::Duration* lifetime_;
  int32_t id_;
  int32_t type_;
  int32_t action_;
  float scale_;
  int32_t filled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageMarker

// .ros.std_msgs.Header header = 1;
inline bool ImageMarker::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ImageMarker::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& ImageMarker::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& ImageMarker::header() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.header)
  return _internal_header();
}
inline void ImageMarker::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.ImageMarker.header)
}
inline ::ros::std_msgs::Header* ImageMarker::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* ImageMarker::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* ImageMarker::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* ImageMarker::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.header)
  return _msg;
}
inline void ImageMarker::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.header)
}

// string ns = 2;
inline void ImageMarker::clear_ns() {
  ns_.ClearToEmpty();
}
inline const std::string& ImageMarker::ns() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.ns)
  return _internal_ns();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageMarker::set_ns(ArgT0&& arg0, ArgT... args) {
 
 ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.ns)
}
inline std::string* ImageMarker::mutable_ns() {
  std::string* _s = _internal_mutable_ns();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.ns)
  return _s;
}
inline const std::string& ImageMarker::_internal_ns() const {
  return ns_.Get();
}
inline void ImageMarker::_internal_set_ns(const std::string& value) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ImageMarker::_internal_mutable_ns() {
  
  return ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ImageMarker::release_ns() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.ns)
  return ns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ImageMarker::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ns_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ns_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.ns)
}

// int32 id = 3;
inline void ImageMarker::clear_id() {
  id_ = 0;
}
inline int32_t ImageMarker::_internal_id() const {
  return id_;
}
inline int32_t ImageMarker::id() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.id)
  return _internal_id();
}
inline void ImageMarker::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ImageMarker::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.id)
}

// int32 type = 4;
inline void ImageMarker::clear_type() {
  type_ = 0;
}
inline int32_t ImageMarker::_internal_type() const {
  return type_;
}
inline int32_t ImageMarker::type() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.type)
  return _internal_type();
}
inline void ImageMarker::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void ImageMarker::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.type)
}

// int32 action = 5;
inline void ImageMarker::clear_action() {
  action_ = 0;
}
inline int32_t ImageMarker::_internal_action() const {
  return action_;
}
inline int32_t ImageMarker::action() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.action)
  return _internal_action();
}
inline void ImageMarker::_internal_set_action(int32_t value) {
  
  action_ = value;
}
inline void ImageMarker::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.action)
}

// .ros.geometry_msgs.Point position = 6;
inline bool ImageMarker::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ImageMarker::has_position() const {
  return _internal_has_position();
}
inline const ::ros::geometry_msgs::Point& ImageMarker::_internal_position() const {
  const ::ros::geometry_msgs::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::Point&>(
      ::ros::geometry_msgs::_Point_default_instance_);
}
inline const ::ros::geometry_msgs::Point& ImageMarker::position() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.position)
  return _internal_position();
}
inline void ImageMarker::unsafe_arena_set_allocated_position(
    ::ros::geometry_msgs::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.ImageMarker.position)
}
inline ::ros::geometry_msgs::Point* ImageMarker::release_position() {
  
  ::ros::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::Point* ImageMarker::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.position)
  
  ::ros::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::Point* ImageMarker::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::Point>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ros::geometry_msgs::Point* ImageMarker::mutable_position() {
  ::ros::geometry_msgs::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.position)
  return _msg;
}
inline void ImageMarker::set_allocated_position(::ros::geometry_msgs::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.position)
}

// float scale = 7;
inline void ImageMarker::clear_scale() {
  scale_ = 0;
}
inline float ImageMarker::_internal_scale() const {
  return scale_;
}
inline float ImageMarker::scale() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.scale)
  return _internal_scale();
}
inline void ImageMarker::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void ImageMarker::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.scale)
}

// .ros.std_msgs.ColorRGBA outline_color = 8;
inline bool ImageMarker::_internal_has_outline_color() const {
  return this != internal_default_instance() && outline_color_ != nullptr;
}
inline bool ImageMarker::has_outline_color() const {
  return _internal_has_outline_color();
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::_internal_outline_color() const {
  const ::ros::std_msgs::ColorRGBA* p = outline_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::ColorRGBA&>(
      ::ros::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::outline_color() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.outline_color)
  return _internal_outline_color();
}
inline void ImageMarker::unsafe_arena_set_allocated_outline_color(
    ::ros::std_msgs::ColorRGBA* outline_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  outline_color_ = outline_color;
  if (outline_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.ImageMarker.outline_color)
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::release_outline_color() {
  
  ::ros::std_msgs::ColorRGBA* temp = outline_color_;
  outline_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::unsafe_arena_release_outline_color() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.outline_color)
  
  ::ros::std_msgs::ColorRGBA* temp = outline_color_;
  outline_color_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::_internal_mutable_outline_color() {
  
  if (outline_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::ColorRGBA>(GetArenaForAllocation());
    outline_color_ = p;
  }
  return outline_color_;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::mutable_outline_color() {
  ::ros::std_msgs::ColorRGBA* _msg = _internal_mutable_outline_color();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.outline_color)
  return _msg;
}
inline void ImageMarker::set_allocated_outline_color(::ros::std_msgs::ColorRGBA* outline_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color_);
  }
  if (outline_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outline_color));
    if (message_arena != submessage_arena) {
      outline_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outline_color, submessage_arena);
    }
    
  } else {
    
  }
  outline_color_ = outline_color;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.outline_color)
}

// int32 filled = 9;
inline void ImageMarker::clear_filled() {
  filled_ = 0;
}
inline int32_t ImageMarker::_internal_filled() const {
  return filled_;
}
inline int32_t ImageMarker::filled() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.filled)
  return _internal_filled();
}
inline void ImageMarker::_internal_set_filled(int32_t value) {
  
  filled_ = value;
}
inline void ImageMarker::set_filled(int32_t value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:ros.visualization_msgs.ImageMarker.filled)
}

// .ros.std_msgs.ColorRGBA fill_color = 10;
inline bool ImageMarker::_internal_has_fill_color() const {
  return this != internal_default_instance() && fill_color_ != nullptr;
}
inline bool ImageMarker::has_fill_color() const {
  return _internal_has_fill_color();
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::_internal_fill_color() const {
  const ::ros::std_msgs::ColorRGBA* p = fill_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::ColorRGBA&>(
      ::ros::std_msgs::_ColorRGBA_default_instance_);
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::fill_color() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.fill_color)
  return _internal_fill_color();
}
inline void ImageMarker::unsafe_arena_set_allocated_fill_color(
    ::ros::std_msgs::ColorRGBA* fill_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color_);
  }
  fill_color_ = fill_color;
  if (fill_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.ImageMarker.fill_color)
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::release_fill_color() {
  
  ::ros::std_msgs::ColorRGBA* temp = fill_color_;
  fill_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::unsafe_arena_release_fill_color() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.fill_color)
  
  ::ros::std_msgs::ColorRGBA* temp = fill_color_;
  fill_color_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::_internal_mutable_fill_color() {
  
  if (fill_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::ColorRGBA>(GetArenaForAllocation());
    fill_color_ = p;
  }
  return fill_color_;
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::mutable_fill_color() {
  ::ros::std_msgs::ColorRGBA* _msg = _internal_mutable_fill_color();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.fill_color)
  return _msg;
}
inline void ImageMarker::set_allocated_fill_color(::ros::std_msgs::ColorRGBA* fill_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color_);
  }
  if (fill_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fill_color));
    if (message_arena != submessage_arena) {
      fill_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_color, submessage_arena);
    }
    
  } else {
    
  }
  fill_color_ = fill_color;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.fill_color)
}

// .ros.Duration lifetime = 11;
inline bool ImageMarker::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool ImageMarker::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const ::ros::Duration& ImageMarker::_internal_lifetime() const {
  const ::ros::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::Duration&>(
      ::ros::_Duration_default_instance_);
}
inline const ::ros::Duration& ImageMarker::lifetime() const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.lifetime)
  return _internal_lifetime();
}
inline void ImageMarker::unsafe_arena_set_allocated_lifetime(
    ::ros::Duration* lifetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.visualization_msgs.ImageMarker.lifetime)
}
inline ::ros::Duration* ImageMarker::release_lifetime() {
  
  ::ros::Duration* temp = lifetime_;
  lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::Duration* ImageMarker::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:ros.visualization_msgs.ImageMarker.lifetime)
  
  ::ros::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::ros::Duration* ImageMarker::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::Duration>(GetArenaForAllocation());
    lifetime_ = p;
  }
  return lifetime_;
}
inline ::ros::Duration* ImageMarker::mutable_lifetime() {
  ::ros::Duration* _msg = _internal_mutable_lifetime();
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.lifetime)
  return _msg;
}
inline void ImageMarker::set_allocated_lifetime(::ros::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime));
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:ros.visualization_msgs.ImageMarker.lifetime)
}

// repeated .ros.geometry_msgs.Point points = 12;
inline int ImageMarker::_internal_points_size() const {
  return points_.size();
}
inline int ImageMarker::points_size() const {
  return _internal_points_size();
}
inline ::ros::geometry_msgs::Point* ImageMarker::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >*
ImageMarker::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ros.visualization_msgs.ImageMarker.points)
  return &points_;
}
inline const ::ros::geometry_msgs::Point& ImageMarker::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::ros::geometry_msgs::Point& ImageMarker::points(int index) const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.points)
  return _internal_points(index);
}
inline ::ros::geometry_msgs::Point* ImageMarker::_internal_add_points() {
  return points_.Add();
}
inline ::ros::geometry_msgs::Point* ImageMarker::add_points() {
  ::ros::geometry_msgs::Point* _add = _internal_add_points();
  // @@protoc_insertion_point(field_add:ros.visualization_msgs.ImageMarker.points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::geometry_msgs::Point >&
ImageMarker::points() const {
  // @@protoc_insertion_point(field_list:ros.visualization_msgs.ImageMarker.points)
  return points_;
}

// repeated .ros.std_msgs.ColorRGBA outline_colors = 13;
inline int ImageMarker::_internal_outline_colors_size() const {
  return outline_colors_.size();
}
inline int ImageMarker::outline_colors_size() const {
  return _internal_outline_colors_size();
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::mutable_outline_colors(int index) {
  // @@protoc_insertion_point(field_mutable:ros.visualization_msgs.ImageMarker.outline_colors)
  return outline_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >*
ImageMarker::mutable_outline_colors() {
  // @@protoc_insertion_point(field_mutable_list:ros.visualization_msgs.ImageMarker.outline_colors)
  return &outline_colors_;
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::_internal_outline_colors(int index) const {
  return outline_colors_.Get(index);
}
inline const ::ros::std_msgs::ColorRGBA& ImageMarker::outline_colors(int index) const {
  // @@protoc_insertion_point(field_get:ros.visualization_msgs.ImageMarker.outline_colors)
  return _internal_outline_colors(index);
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::_internal_add_outline_colors() {
  return outline_colors_.Add();
}
inline ::ros::std_msgs::ColorRGBA* ImageMarker::add_outline_colors() {
  ::ros::std_msgs::ColorRGBA* _add = _internal_add_outline_colors();
  // @@protoc_insertion_point(field_add:ros.visualization_msgs.ImageMarker.outline_colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ros::std_msgs::ColorRGBA >&
ImageMarker::outline_colors() const {
  // @@protoc_insertion_point(field_list:ros.visualization_msgs.ImageMarker.outline_colors)
  return outline_colors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace visualization_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fvisualization_5fmsgs_2fImageMarker_2eproto
