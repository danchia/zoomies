// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/sensor_msgs/CameraInfo.proto

#include "ros/sensor_msgs/CameraInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace sensor_msgs {
constexpr CameraInfo::CameraInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d_()
  , k_()
  , r_()
  , p_()
  , distortion_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , roi_(nullptr)
  , height_(0u)
  , width_(0u)
  , binning_x_(0u)
  , binning_y_(0u){}
struct CameraInfoDefaultTypeInternal {
  constexpr CameraInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraInfoDefaultTypeInternal() {}
  union {
    CameraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto = nullptr;

const uint32_t TableStruct_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, header_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, height_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, width_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, distortion_model_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, d_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, k_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, r_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, p_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, binning_x_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, binning_y_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::CameraInfo, roi_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::sensor_msgs::CameraInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::sensor_msgs::_CameraInfo_default_instance_),
};

const char descriptor_table_protodef_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ros/sensor_msgs/CameraInfo.proto\022\017ros."
  "sensor_msgs\032&ros/sensor_msgs/RegionOfInt"
  "erest.proto\032\031ros/std_msgs/Header.proto\"\355"
  "\001\n\nCameraInfo\022$\n\006header\030\001 \001(\0132\024.ros.std_"
  "msgs.Header\022\016\n\006height\030\002 \001(\r\022\r\n\005width\030\003 \001"
  "(\r\022\030\n\020distortion_model\030\004 \001(\t\022\t\n\001D\030\005 \003(\001\022"
  "\t\n\001K\030\006 \003(\001\022\t\n\001R\030\007 \003(\001\022\t\n\001P\030\010 \003(\001\022\021\n\tbinn"
  "ing_x\030\t \001(\r\022\021\n\tbinning_y\030\n \001(\r\022.\n\003roi\030\013 "
  "\001(\0132!.ros.sensor_msgs.RegionOfInterestb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_deps[2] = {
  &::descriptor_table_ros_2fsensor_5fmsgs_2fRegionOfInterest_2eproto,
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto = {
  false, false, 366, descriptor_table_protodef_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto, "ros/sensor_msgs/CameraInfo.proto", 
  &descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_once, descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto::offsets,
  file_level_metadata_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto, file_level_enum_descriptors_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto, file_level_service_descriptors_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_getter() {
  return &descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto(&descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto);
namespace ros {
namespace sensor_msgs {

// ===================================================================

class CameraInfo::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const CameraInfo* msg);
  static const ::ros::sensor_msgs::RegionOfInterest& roi(const CameraInfo* msg);
};

const ::ros::std_msgs::Header&
CameraInfo::_Internal::header(const CameraInfo* msg) {
  return *msg->header_;
}
const ::ros::sensor_msgs::RegionOfInterest&
CameraInfo::_Internal::roi(const CameraInfo* msg) {
  return *msg->roi_;
}
void CameraInfo::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CameraInfo::clear_roi() {
  if (GetArenaForAllocation() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
CameraInfo::CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  d_(arena),
  k_(arena),
  r_(arena),
  p_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.sensor_msgs.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      d_(from.d_),
      k_(from.k_),
      r_(from.r_),
      p_(from.p_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distortion_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    distortion_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_distortion_model().empty()) {
    distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_distortion_model(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_roi()) {
    roi_ = new ::ros::sensor_msgs::RegionOfInterest(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&binning_y_) -
    reinterpret_cast<char*>(&height_)) + sizeof(binning_y_));
  // @@protoc_insertion_point(copy_constructor:ros.sensor_msgs.CameraInfo)
}

inline void CameraInfo::SharedCtor() {
distortion_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  distortion_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&binning_y_) -
    reinterpret_cast<char*>(&header_)) + sizeof(binning_y_));
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:ros.sensor_msgs.CameraInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  distortion_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete roi_;
}

void CameraInfo::ArenaDtor(void* object) {
  CameraInfo* _this = reinterpret_cast< CameraInfo* >(object);
  (void)_this;
}
void CameraInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.sensor_msgs.CameraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.Clear();
  k_.Clear();
  r_.Clear();
  p_.Clear();
  distortion_model_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&binning_y_) -
      reinterpret_cast<char*>(&height_)) + sizeof(binning_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string distortion_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_distortion_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.sensor_msgs.CameraInfo.distortion_model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double D = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double K = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_k(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_k(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double R = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_r(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_r(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double P = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 binning_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          binning_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 binning_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          binning_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ros.sensor_msgs.RegionOfInterest roi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.sensor_msgs.CameraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // string distortion_model = 4;
  if (!this->_internal_distortion_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_distortion_model().data(), static_cast<int>(this->_internal_distortion_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.sensor_msgs.CameraInfo.distortion_model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_distortion_model(), target);
  }

  // repeated double D = 5;
  if (this->_internal_d_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_d(), target);
  }

  // repeated double K = 6;
  if (this->_internal_k_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_k(), target);
  }

  // repeated double R = 7;
  if (this->_internal_r_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_r(), target);
  }

  // repeated double P = 8;
  if (this->_internal_p_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_p(), target);
  }

  // uint32 binning_x = 9;
  if (this->_internal_binning_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_binning_x(), target);
  }

  // uint32 binning_y = 10;
  if (this->_internal_binning_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_binning_y(), target);
  }

  // .ros.sensor_msgs.RegionOfInterest roi = 11;
  if (this->_internal_has_roi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::roi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.sensor_msgs.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.sensor_msgs.CameraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double D = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double K = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_k_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double R = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_r_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double P = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string distortion_model = 4;
  if (!this->_internal_distortion_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_distortion_model());
  }

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .ros.sensor_msgs.RegionOfInterest roi = 11;
  if (this->_internal_has_roi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 binning_x = 9;
  if (this->_internal_binning_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_binning_x());
  }

  // uint32 binning_y = 10;
  if (this->_internal_binning_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_binning_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraInfo::GetClassData() const { return &_class_data_; }

void CameraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraInfo *>(to)->MergeFrom(
      static_cast<const CameraInfo &>(from));
}


void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.sensor_msgs.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  d_.MergeFrom(from.d_);
  k_.MergeFrom(from.k_);
  r_.MergeFrom(from.r_);
  p_.MergeFrom(from.p_);
  if (!from._internal_distortion_model().empty()) {
    _internal_set_distortion_model(from._internal_distortion_model());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_roi()) {
    _internal_mutable_roi()->::ros::sensor_msgs::RegionOfInterest::MergeFrom(from._internal_roi());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_binning_x() != 0) {
    _internal_set_binning_x(from._internal_binning_x());
  }
  if (from._internal_binning_y() != 0) {
    _internal_set_binning_y(from._internal_binning_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.sensor_msgs.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  d_.InternalSwap(&other->d_);
  k_.InternalSwap(&other->k_);
  r_.InternalSwap(&other->r_);
  p_.InternalSwap(&other->p_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &distortion_model_, lhs_arena,
      &other->distortion_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraInfo, binning_y_)
      + sizeof(CameraInfo::binning_y_)
      - PROTOBUF_FIELD_OFFSET(CameraInfo, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_getter, &descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto_once,
      file_level_metadata_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::sensor_msgs::CameraInfo* Arena::CreateMaybeMessage< ::ros::sensor_msgs::CameraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::sensor_msgs::CameraInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
