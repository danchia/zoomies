// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/sensor_msgs/CameraInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/sensor_msgs/RegionOfInterest.pb.h"
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto;
namespace ros {
namespace sensor_msgs {
class CameraInfo;
struct CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::sensor_msgs::CameraInfo* Arena::CreateMaybeMessage<::ros::sensor_msgs::CameraInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace sensor_msgs {

// ===================================================================

class CameraInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.sensor_msgs.CameraInfo) */ {
 public:
  inline CameraInfo() : CameraInfo(nullptr) {}
  ~CameraInfo() override;
  explicit constexpr CameraInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraInfo(const CameraInfo& from);
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.sensor_msgs.CameraInfo";
  }
  protected:
  explicit CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 5,
    kKFieldNumber = 6,
    kRFieldNumber = 7,
    kPFieldNumber = 8,
    kDistortionModelFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kRoiFieldNumber = 11,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kBinningXFieldNumber = 9,
    kBinningYFieldNumber = 10,
  };
  // repeated double D = 5;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  private:
  double _internal_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_d() const;
  void _internal_add_d(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_d();
  public:
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_d();

  // repeated double K = 6;
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  private:
  double _internal_k(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_k() const;
  void _internal_add_k(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_k();
  public:
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      k() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_k();

  // repeated double R = 7;
  int r_size() const;
  private:
  int _internal_r_size() const;
  public:
  void clear_r();
  private:
  double _internal_r(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_r() const;
  void _internal_add_r(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_r();
  public:
  double r(int index) const;
  void set_r(int index, double value);
  void add_r(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      r() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_r();

  // repeated double P = 8;
  int p_size() const;
  private:
  int _internal_p_size() const;
  public:
  void clear_p();
  private:
  double _internal_p(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_p() const;
  void _internal_add_p(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_p();
  public:
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_p();

  // string distortion_model = 4;
  void clear_distortion_model();
  const std::string& distortion_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distortion_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distortion_model();
  PROTOBUF_NODISCARD std::string* release_distortion_model();
  void set_allocated_distortion_model(std::string* distortion_model);
  private:
  const std::string& _internal_distortion_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_model(const std::string& value);
  std::string* _internal_mutable_distortion_model();
  public:

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // .ros.sensor_msgs.RegionOfInterest roi = 11;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::ros::sensor_msgs::RegionOfInterest& roi() const;
  PROTOBUF_NODISCARD ::ros::sensor_msgs::RegionOfInterest* release_roi();
  ::ros::sensor_msgs::RegionOfInterest* mutable_roi();
  void set_allocated_roi(::ros::sensor_msgs::RegionOfInterest* roi);
  private:
  const ::ros::sensor_msgs::RegionOfInterest& _internal_roi() const;
  ::ros::sensor_msgs::RegionOfInterest* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::ros::sensor_msgs::RegionOfInterest* roi);
  ::ros::sensor_msgs::RegionOfInterest* unsafe_arena_release_roi();

  // uint32 height = 2;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 width = 3;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 binning_x = 9;
  void clear_binning_x();
  uint32_t binning_x() const;
  void set_binning_x(uint32_t value);
  private:
  uint32_t _internal_binning_x() const;
  void _internal_set_binning_x(uint32_t value);
  public:

  // uint32 binning_y = 10;
  void clear_binning_y();
  uint32_t binning_y() const;
  void set_binning_y(uint32_t value);
  private:
  uint32_t _internal_binning_y() const;
  void _internal_set_binning_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ros.sensor_msgs.CameraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > k_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > r_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > p_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_model_;
  ::ros::std_msgs::Header* header_;
  ::ros::sensor_msgs::RegionOfInterest* roi_;
  uint32_t height_;
  uint32_t width_;
  uint32_t binning_x_;
  uint32_t binning_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo

// .ros.std_msgs.Header header = 1;
inline bool CameraInfo::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CameraInfo::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& CameraInfo::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& CameraInfo::header() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.header)
  return _internal_header();
}
inline void CameraInfo::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.sensor_msgs.CameraInfo.header)
}
inline ::ros::std_msgs::Header* CameraInfo::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* CameraInfo::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.CameraInfo.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* CameraInfo::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* CameraInfo::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.CameraInfo.header)
  return _msg;
}
inline void CameraInfo::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.CameraInfo.header)
}

// uint32 height = 2;
inline void CameraInfo::clear_height() {
  height_ = 0u;
}
inline uint32_t CameraInfo::_internal_height() const {
  return height_;
}
inline uint32_t CameraInfo::height() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.height)
  return _internal_height();
}
inline void CameraInfo::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void CameraInfo::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.height)
}

// uint32 width = 3;
inline void CameraInfo::clear_width() {
  width_ = 0u;
}
inline uint32_t CameraInfo::_internal_width() const {
  return width_;
}
inline uint32_t CameraInfo::width() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.width)
  return _internal_width();
}
inline void CameraInfo::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void CameraInfo::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.width)
}

// string distortion_model = 4;
inline void CameraInfo::clear_distortion_model() {
  distortion_model_.ClearToEmpty();
}
inline const std::string& CameraInfo::distortion_model() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.distortion_model)
  return _internal_distortion_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CameraInfo::set_distortion_model(ArgT0&& arg0, ArgT... args) {
 
 distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.distortion_model)
}
inline std::string* CameraInfo::mutable_distortion_model() {
  std::string* _s = _internal_mutable_distortion_model();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.CameraInfo.distortion_model)
  return _s;
}
inline const std::string& CameraInfo::_internal_distortion_model() const {
  return distortion_model_.Get();
}
inline void CameraInfo::_internal_set_distortion_model(const std::string& value) {
  
  distortion_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CameraInfo::_internal_mutable_distortion_model() {
  
  return distortion_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CameraInfo::release_distortion_model() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.CameraInfo.distortion_model)
  return distortion_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CameraInfo::set_allocated_distortion_model(std::string* distortion_model) {
  if (distortion_model != nullptr) {
    
  } else {
    
  }
  distortion_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (distortion_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    distortion_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.CameraInfo.distortion_model)
}

// repeated double D = 5;
inline int CameraInfo::_internal_d_size() const {
  return d_.size();
}
inline int CameraInfo::d_size() const {
  return _internal_d_size();
}
inline void CameraInfo::clear_d() {
  d_.Clear();
}
inline double CameraInfo::_internal_d(int index) const {
  return d_.Get(index);
}
inline double CameraInfo::d(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.D)
  return _internal_d(index);
}
inline void CameraInfo::set_d(int index, double value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.D)
}
inline void CameraInfo::_internal_add_d(double value) {
  d_.Add(value);
}
inline void CameraInfo::add_d(double value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.CameraInfo.D)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_d() const {
  return d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::d() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.CameraInfo.D)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_d() {
  return &d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.CameraInfo.D)
  return _internal_mutable_d();
}

// repeated double K = 6;
inline int CameraInfo::_internal_k_size() const {
  return k_.size();
}
inline int CameraInfo::k_size() const {
  return _internal_k_size();
}
inline void CameraInfo::clear_k() {
  k_.Clear();
}
inline double CameraInfo::_internal_k(int index) const {
  return k_.Get(index);
}
inline double CameraInfo::k(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.K)
  return _internal_k(index);
}
inline void CameraInfo::set_k(int index, double value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.K)
}
inline void CameraInfo::_internal_add_k(double value) {
  k_.Add(value);
}
inline void CameraInfo::add_k(double value) {
  _internal_add_k(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.CameraInfo.K)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_k() const {
  return k_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::k() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.CameraInfo.K)
  return _internal_k();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_k() {
  return &k_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.CameraInfo.K)
  return _internal_mutable_k();
}

// repeated double R = 7;
inline int CameraInfo::_internal_r_size() const {
  return r_.size();
}
inline int CameraInfo::r_size() const {
  return _internal_r_size();
}
inline void CameraInfo::clear_r() {
  r_.Clear();
}
inline double CameraInfo::_internal_r(int index) const {
  return r_.Get(index);
}
inline double CameraInfo::r(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.R)
  return _internal_r(index);
}
inline void CameraInfo::set_r(int index, double value) {
  r_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.R)
}
inline void CameraInfo::_internal_add_r(double value) {
  r_.Add(value);
}
inline void CameraInfo::add_r(double value) {
  _internal_add_r(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.CameraInfo.R)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_r() const {
  return r_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::r() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.CameraInfo.R)
  return _internal_r();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_r() {
  return &r_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_r() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.CameraInfo.R)
  return _internal_mutable_r();
}

// repeated double P = 8;
inline int CameraInfo::_internal_p_size() const {
  return p_.size();
}
inline int CameraInfo::p_size() const {
  return _internal_p_size();
}
inline void CameraInfo::clear_p() {
  p_.Clear();
}
inline double CameraInfo::_internal_p(int index) const {
  return p_.Get(index);
}
inline double CameraInfo::p(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.P)
  return _internal_p(index);
}
inline void CameraInfo::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.P)
}
inline void CameraInfo::_internal_add_p(double value) {
  p_.Add(value);
}
inline void CameraInfo::add_p(double value) {
  _internal_add_p(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.CameraInfo.P)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::_internal_p() const {
  return p_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraInfo::p() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.CameraInfo.P)
  return _internal_p();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::_internal_mutable_p() {
  return &p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraInfo::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.CameraInfo.P)
  return _internal_mutable_p();
}

// uint32 binning_x = 9;
inline void CameraInfo::clear_binning_x() {
  binning_x_ = 0u;
}
inline uint32_t CameraInfo::_internal_binning_x() const {
  return binning_x_;
}
inline uint32_t CameraInfo::binning_x() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.binning_x)
  return _internal_binning_x();
}
inline void CameraInfo::_internal_set_binning_x(uint32_t value) {
  
  binning_x_ = value;
}
inline void CameraInfo::set_binning_x(uint32_t value) {
  _internal_set_binning_x(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.binning_x)
}

// uint32 binning_y = 10;
inline void CameraInfo::clear_binning_y() {
  binning_y_ = 0u;
}
inline uint32_t CameraInfo::_internal_binning_y() const {
  return binning_y_;
}
inline uint32_t CameraInfo::binning_y() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.binning_y)
  return _internal_binning_y();
}
inline void CameraInfo::_internal_set_binning_y(uint32_t value) {
  
  binning_y_ = value;
}
inline void CameraInfo::set_binning_y(uint32_t value) {
  _internal_set_binning_y(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.CameraInfo.binning_y)
}

// .ros.sensor_msgs.RegionOfInterest roi = 11;
inline bool CameraInfo::_internal_has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline bool CameraInfo::has_roi() const {
  return _internal_has_roi();
}
inline const ::ros::sensor_msgs::RegionOfInterest& CameraInfo::_internal_roi() const {
  const ::ros::sensor_msgs::RegionOfInterest* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::sensor_msgs::RegionOfInterest&>(
      ::ros::sensor_msgs::_RegionOfInterest_default_instance_);
}
inline const ::ros::sensor_msgs::RegionOfInterest& CameraInfo::roi() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.CameraInfo.roi)
  return _internal_roi();
}
inline void CameraInfo::unsafe_arena_set_allocated_roi(
    ::ros::sensor_msgs::RegionOfInterest* roi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.sensor_msgs.CameraInfo.roi)
}
inline ::ros::sensor_msgs::RegionOfInterest* CameraInfo::release_roi() {
  
  ::ros::sensor_msgs::RegionOfInterest* temp = roi_;
  roi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::sensor_msgs::RegionOfInterest* CameraInfo::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.CameraInfo.roi)
  
  ::ros::sensor_msgs::RegionOfInterest* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::ros::sensor_msgs::RegionOfInterest* CameraInfo::_internal_mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::sensor_msgs::RegionOfInterest>(GetArenaForAllocation());
    roi_ = p;
  }
  return roi_;
}
inline ::ros::sensor_msgs::RegionOfInterest* CameraInfo::mutable_roi() {
  ::ros::sensor_msgs::RegionOfInterest* _msg = _internal_mutable_roi();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.CameraInfo.roi)
  return _msg;
}
inline void CameraInfo::set_allocated_roi(::ros::sensor_msgs::RegionOfInterest* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi));
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.CameraInfo.roi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fCameraInfo_2eproto
