// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/sensor_msgs/JointState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fJointState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fJointState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fsensor_5fmsgs_2fJointState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fsensor_5fmsgs_2fJointState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fsensor_5fmsgs_2fJointState_2eproto;
namespace ros {
namespace sensor_msgs {
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::sensor_msgs::JointState* Arena::CreateMaybeMessage<::ros::sensor_msgs::JointState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace sensor_msgs {

// ===================================================================

class JointState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.sensor_msgs.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {}
  ~JointState() override;
  explicit constexpr JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JointState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.sensor_msgs.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kEffortFieldNumber = 5,
    kHeaderFieldNumber = 1,
  };
  // repeated string name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated double position = 3;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 4;
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double effort = 5;
  int effort_size() const;
  private:
  int _internal_effort_size() const;
  public:
  void clear_effort();
  private:
  double _internal_effort(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_effort() const;
  void _internal_add_effort(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_effort();
  public:
  double effort(int index) const;
  void set_effort(int index, double value);
  void add_effort(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      effort() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_effort();

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:ros.sensor_msgs.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > effort_;
  ::ros::std_msgs::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fsensor_5fmsgs_2fJointState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointState

// .ros.std_msgs.Header header = 1;
inline bool JointState::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool JointState::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& JointState::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& JointState::header() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.JointState.header)
  return _internal_header();
}
inline void JointState::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.sensor_msgs.JointState.header)
}
inline ::ros::std_msgs::Header* JointState::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* JointState::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.JointState.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* JointState::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* JointState::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.JointState.header)
  return _msg;
}
inline void JointState::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.JointState.header)
}

// repeated string name = 2;
inline int JointState::_internal_name_size() const {
  return name_.size();
}
inline int JointState::name_size() const {
  return _internal_name_size();
}
inline void JointState::clear_name() {
  name_.Clear();
}
inline std::string* JointState::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:ros.sensor_msgs.JointState.name)
  return _s;
}
inline const std::string& JointState::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& JointState::name(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.JointState.name)
  return _internal_name(index);
}
inline std::string* JointState::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.JointState.name)
  return name_.Mutable(index);
}
inline void JointState::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.JointState.name)
}
inline void JointState::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.JointState.name)
}
inline void JointState::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ros.sensor_msgs.JointState.name)
}
inline void JointState::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ros.sensor_msgs.JointState.name)
}
inline std::string* JointState::_internal_add_name() {
  return name_.Add();
}
inline void JointState::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.JointState.name)
}
inline void JointState::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.JointState.name)
}
inline void JointState::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ros.sensor_msgs.JointState.name)
}
inline void JointState::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ros.sensor_msgs.JointState.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointState::name() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.JointState.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointState::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.JointState.name)
  return &name_;
}

// repeated double position = 3;
inline int JointState::_internal_position_size() const {
  return position_.size();
}
inline int JointState::position_size() const {
  return _internal_position_size();
}
inline void JointState::clear_position() {
  position_.Clear();
}
inline double JointState::_internal_position(int index) const {
  return position_.Get(index);
}
inline double JointState::position(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.JointState.position)
  return _internal_position(index);
}
inline void JointState::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.JointState.position)
}
inline void JointState::_internal_add_position(double value) {
  position_.Add(value);
}
inline void JointState::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.JointState.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::position() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.JointState.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.JointState.position)
  return _internal_mutable_position();
}

// repeated double velocity = 4;
inline int JointState::_internal_velocity_size() const {
  return velocity_.size();
}
inline int JointState::velocity_size() const {
  return _internal_velocity_size();
}
inline void JointState::clear_velocity() {
  velocity_.Clear();
}
inline double JointState::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double JointState::velocity(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.JointState.velocity)
  return _internal_velocity(index);
}
inline void JointState::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.JointState.velocity)
}
inline void JointState::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void JointState::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.JointState.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::velocity() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.JointState.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.JointState.velocity)
  return _internal_mutable_velocity();
}

// repeated double effort = 5;
inline int JointState::_internal_effort_size() const {
  return effort_.size();
}
inline int JointState::effort_size() const {
  return _internal_effort_size();
}
inline void JointState::clear_effort() {
  effort_.Clear();
}
inline double JointState::_internal_effort(int index) const {
  return effort_.Get(index);
}
inline double JointState::effort(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.JointState.effort)
  return _internal_effort(index);
}
inline void JointState::set_effort(int index, double value) {
  effort_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.JointState.effort)
}
inline void JointState::_internal_add_effort(double value) {
  effort_.Add(value);
}
inline void JointState::add_effort(double value) {
  _internal_add_effort(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.JointState.effort)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_effort() const {
  return effort_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::effort() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.JointState.effort)
  return _internal_effort();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_effort() {
  return &effort_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_effort() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.JointState.effort)
  return _internal_mutable_effort();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fJointState_2eproto
