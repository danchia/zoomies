// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/sensor_msgs/BatteryState.proto

#include "ros/sensor_msgs/BatteryState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ros {
namespace sensor_msgs {
constexpr BatteryState::BatteryState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_voltage_()
  , cell_temperature_()
  , location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , voltage_(0)
  , temperature_(0)
  , current_(0)
  , charge_(0)
  , capacity_(0)
  , design_capacity_(0)
  , percentage_(0)
  , power_supply_status_(0)
  , power_supply_health_(0)
  , power_supply_technology_(0)
  , present_(false){}
struct BatteryStateDefaultTypeInternal {
  constexpr BatteryStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryStateDefaultTypeInternal() {}
  union {
    BatteryState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ros_2fsensor_5fmsgs_2fBatteryState_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ros_2fsensor_5fmsgs_2fBatteryState_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ros_2fsensor_5fmsgs_2fBatteryState_2eproto = nullptr;

const uint32_t TableStruct_ros_2fsensor_5fmsgs_2fBatteryState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, header_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, voltage_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, temperature_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, current_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, charge_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, capacity_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, design_capacity_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, percentage_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, power_supply_status_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, power_supply_health_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, power_supply_technology_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, present_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, cell_voltage_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, cell_temperature_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, location_),
  PROTOBUF_FIELD_OFFSET(::ros::sensor_msgs::BatteryState, serial_number_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ros::sensor_msgs::BatteryState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ros::sensor_msgs::_BatteryState_default_instance_),
};

const char descriptor_table_protodef_ros_2fsensor_5fmsgs_2fBatteryState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ros/sensor_msgs/BatteryState.proto\022\017ro"
  "s.sensor_msgs\032\031ros/std_msgs/Header.proto"
  "\"\377\002\n\014BatteryState\022$\n\006header\030\001 \001(\0132\024.ros."
  "std_msgs.Header\022\017\n\007voltage\030\002 \001(\002\022\023\n\013temp"
  "erature\030\003 \001(\002\022\017\n\007current\030\004 \001(\002\022\016\n\006charge"
  "\030\005 \001(\002\022\020\n\010capacity\030\006 \001(\002\022\027\n\017design_capac"
  "ity\030\007 \001(\002\022\022\n\npercentage\030\010 \001(\002\022\033\n\023power_s"
  "upply_status\030\t \001(\005\022\033\n\023power_supply_healt"
  "h\030\n \001(\005\022\037\n\027power_supply_technology\030\013 \001(\005"
  "\022\017\n\007present\030\014 \001(\010\022\024\n\014cell_voltage\030\r \003(\002\022"
  "\030\n\020cell_temperature\030\016 \003(\002\022\020\n\010location\030\017 "
  "\001(\t\022\025\n\rserial_number\030\020 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_deps[1] = {
  &::descriptor_table_ros_2fstd_5fmsgs_2fHeader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto = {
  false, false, 474, descriptor_table_protodef_ros_2fsensor_5fmsgs_2fBatteryState_2eproto, "ros/sensor_msgs/BatteryState.proto", 
  &descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_once, descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ros_2fsensor_5fmsgs_2fBatteryState_2eproto::offsets,
  file_level_metadata_ros_2fsensor_5fmsgs_2fBatteryState_2eproto, file_level_enum_descriptors_ros_2fsensor_5fmsgs_2fBatteryState_2eproto, file_level_service_descriptors_ros_2fsensor_5fmsgs_2fBatteryState_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_getter() {
  return &descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ros_2fsensor_5fmsgs_2fBatteryState_2eproto(&descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto);
namespace ros {
namespace sensor_msgs {

// ===================================================================

class BatteryState::_Internal {
 public:
  static const ::ros::std_msgs::Header& header(const BatteryState* msg);
};

const ::ros::std_msgs::Header&
BatteryState::_Internal::header(const BatteryState* msg) {
  return *msg->header_;
}
void BatteryState::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
BatteryState::BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cell_voltage_(arena),
  cell_temperature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ros.sensor_msgs.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_voltage_(from.cell_voltage_),
      cell_temperature_(from.cell_temperature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_location(), 
      GetArenaForAllocation());
  }
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial_number(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::ros::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&voltage_, &from.voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&present_) -
    reinterpret_cast<char*>(&voltage_)) + sizeof(present_));
  // @@protoc_insertion_point(copy_constructor:ros.sensor_msgs.BatteryState)
}

inline void BatteryState::SharedCtor() {
location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&present_) -
    reinterpret_cast<char*>(&header_)) + sizeof(present_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:ros.sensor_msgs.BatteryState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatteryState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void BatteryState::ArenaDtor(void* object) {
  BatteryState* _this = reinterpret_cast< BatteryState* >(object);
  (void)_this;
}
void BatteryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:ros.sensor_msgs.BatteryState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_voltage_.Clear();
  cell_temperature_.Clear();
  location_.ClearToEmpty();
  serial_number_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&present_) -
      reinterpret_cast<char*>(&voltage_)) + sizeof(present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ros.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float temperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float charge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          charge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float design_capacity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          design_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float percentage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 power_supply_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          power_supply_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_supply_health = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          power_supply_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_supply_technology = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          power_supply_technology_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool present = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float cell_voltage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cell_voltage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 109) {
          _internal_add_cell_voltage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float cell_temperature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cell_temperature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 117) {
          _internal_add_cell_temperature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string location = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.sensor_msgs.BatteryState.location"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ros.sensor_msgs.BatteryState.serial_number"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ros.sensor_msgs.BatteryState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // float voltage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage = this->_internal_voltage();
  uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voltage(), target);
  }

  // float temperature = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_temperature(), target);
  }

  // float current = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current = this->_internal_current();
  uint32_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_current(), target);
  }

  // float charge = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_charge = this->_internal_charge();
  uint32_t raw_charge;
  memcpy(&raw_charge, &tmp_charge, sizeof(tmp_charge));
  if (raw_charge != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_charge(), target);
  }

  // float capacity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_capacity(), target);
  }

  // float design_capacity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_design_capacity = this->_internal_design_capacity();
  uint32_t raw_design_capacity;
  memcpy(&raw_design_capacity, &tmp_design_capacity, sizeof(tmp_design_capacity));
  if (raw_design_capacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_design_capacity(), target);
  }

  // float percentage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = this->_internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_percentage(), target);
  }

  // int32 power_supply_status = 9;
  if (this->_internal_power_supply_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_power_supply_status(), target);
  }

  // int32 power_supply_health = 10;
  if (this->_internal_power_supply_health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_power_supply_health(), target);
  }

  // int32 power_supply_technology = 11;
  if (this->_internal_power_supply_technology() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_power_supply_technology(), target);
  }

  // bool present = 12;
  if (this->_internal_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_present(), target);
  }

  // repeated float cell_voltage = 13;
  if (this->_internal_cell_voltage_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_cell_voltage(), target);
  }

  // repeated float cell_temperature = 14;
  if (this->_internal_cell_temperature_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_cell_temperature(), target);
  }

  // string location = 15;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.sensor_msgs.BatteryState.location");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_location(), target);
  }

  // string serial_number = 16;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ros.sensor_msgs.BatteryState.serial_number");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ros.sensor_msgs.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ros.sensor_msgs.BatteryState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float cell_voltage = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_voltage_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float cell_temperature = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_temperature_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string location = 15;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string serial_number = 16;
  if (!this->_internal_serial_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // .ros.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float voltage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage = this->_internal_voltage();
  uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    total_size += 1 + 4;
  }

  // float temperature = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = this->_internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 1 + 4;
  }

  // float current = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current = this->_internal_current();
  uint32_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    total_size += 1 + 4;
  }

  // float charge = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_charge = this->_internal_charge();
  uint32_t raw_charge;
  memcpy(&raw_charge, &tmp_charge, sizeof(tmp_charge));
  if (raw_charge != 0) {
    total_size += 1 + 4;
  }

  // float capacity = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = this->_internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    total_size += 1 + 4;
  }

  // float design_capacity = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_design_capacity = this->_internal_design_capacity();
  uint32_t raw_design_capacity;
  memcpy(&raw_design_capacity, &tmp_design_capacity, sizeof(tmp_design_capacity));
  if (raw_design_capacity != 0) {
    total_size += 1 + 4;
  }

  // float percentage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = this->_internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    total_size += 1 + 4;
  }

  // int32 power_supply_status = 9;
  if (this->_internal_power_supply_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power_supply_status());
  }

  // int32 power_supply_health = 10;
  if (this->_internal_power_supply_health() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power_supply_health());
  }

  // int32 power_supply_technology = 11;
  if (this->_internal_power_supply_technology() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power_supply_technology());
  }

  // bool present = 12;
  if (this->_internal_present() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatteryState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryState::GetClassData() const { return &_class_data_; }

void BatteryState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatteryState *>(to)->MergeFrom(
      static_cast<const BatteryState &>(from));
}


void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ros.sensor_msgs.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cell_voltage_.MergeFrom(from.cell_voltage_);
  cell_temperature_.MergeFrom(from.cell_temperature_);
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (!from._internal_serial_number().empty()) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::ros::std_msgs::Header::MergeFrom(from._internal_header());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage = from._internal_voltage();
  uint32_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    _internal_set_voltage(from._internal_voltage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_temperature = from._internal_temperature();
  uint32_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _internal_set_temperature(from._internal_temperature());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current = from._internal_current();
  uint32_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    _internal_set_current(from._internal_current());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_charge = from._internal_charge();
  uint32_t raw_charge;
  memcpy(&raw_charge, &tmp_charge, sizeof(tmp_charge));
  if (raw_charge != 0) {
    _internal_set_charge(from._internal_charge());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_capacity = from._internal_capacity();
  uint32_t raw_capacity;
  memcpy(&raw_capacity, &tmp_capacity, sizeof(tmp_capacity));
  if (raw_capacity != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_design_capacity = from._internal_design_capacity();
  uint32_t raw_design_capacity;
  memcpy(&raw_design_capacity, &tmp_design_capacity, sizeof(tmp_design_capacity));
  if (raw_design_capacity != 0) {
    _internal_set_design_capacity(from._internal_design_capacity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = from._internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (from._internal_power_supply_status() != 0) {
    _internal_set_power_supply_status(from._internal_power_supply_status());
  }
  if (from._internal_power_supply_health() != 0) {
    _internal_set_power_supply_health(from._internal_power_supply_health());
  }
  if (from._internal_power_supply_technology() != 0) {
    _internal_set_power_supply_technology(from._internal_power_supply_technology());
  }
  if (from._internal_present() != 0) {
    _internal_set_present(from._internal_present());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ros.sensor_msgs.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_voltage_.InternalSwap(&other->cell_voltage_);
  cell_temperature_.InternalSwap(&other->cell_temperature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_number_, lhs_arena,
      &other->serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryState, present_)
      + sizeof(BatteryState::present_)
      - PROTOBUF_FIELD_OFFSET(BatteryState, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_getter, &descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto_once,
      file_level_metadata_ros_2fsensor_5fmsgs_2fBatteryState_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ros::sensor_msgs::BatteryState* Arena::CreateMaybeMessage< ::ros::sensor_msgs::BatteryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ros::sensor_msgs::BatteryState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
