// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/sensor_msgs/BatteryState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fBatteryState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fBatteryState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fsensor_5fmsgs_2fBatteryState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fsensor_5fmsgs_2fBatteryState_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fsensor_5fmsgs_2fBatteryState_2eproto;
namespace ros {
namespace sensor_msgs {
class BatteryState;
struct BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace sensor_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::sensor_msgs::BatteryState* Arena::CreateMaybeMessage<::ros::sensor_msgs::BatteryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace sensor_msgs {

// ===================================================================

class BatteryState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.sensor_msgs.BatteryState) */ {
 public:
  inline BatteryState() : BatteryState(nullptr) {}
  ~BatteryState() override;
  explicit constexpr BatteryState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryState(const BatteryState& from);
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatteryState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.sensor_msgs.BatteryState";
  }
  protected:
  explicit BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellVoltageFieldNumber = 13,
    kCellTemperatureFieldNumber = 14,
    kLocationFieldNumber = 15,
    kSerialNumberFieldNumber = 16,
    kHeaderFieldNumber = 1,
    kVoltageFieldNumber = 2,
    kTemperatureFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kChargeFieldNumber = 5,
    kCapacityFieldNumber = 6,
    kDesignCapacityFieldNumber = 7,
    kPercentageFieldNumber = 8,
    kPowerSupplyStatusFieldNumber = 9,
    kPowerSupplyHealthFieldNumber = 10,
    kPowerSupplyTechnologyFieldNumber = 11,
    kPresentFieldNumber = 12,
  };
  // repeated float cell_voltage = 13;
  int cell_voltage_size() const;
  private:
  int _internal_cell_voltage_size() const;
  public:
  void clear_cell_voltage();
  private:
  float _internal_cell_voltage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cell_voltage() const;
  void _internal_add_cell_voltage(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cell_voltage();
  public:
  float cell_voltage(int index) const;
  void set_cell_voltage(int index, float value);
  void add_cell_voltage(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cell_voltage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cell_voltage();

  // repeated float cell_temperature = 14;
  int cell_temperature_size() const;
  private:
  int _internal_cell_temperature_size() const;
  public:
  void clear_cell_temperature();
  private:
  float _internal_cell_temperature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cell_temperature() const;
  void _internal_add_cell_temperature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cell_temperature();
  public:
  float cell_temperature(int index) const;
  void set_cell_temperature(int index, float value);
  void add_cell_temperature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cell_temperature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cell_temperature();

  // string location = 15;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string serial_number = 16;
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // float voltage = 2;
  void clear_voltage();
  float voltage() const;
  void set_voltage(float value);
  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);
  public:

  // float temperature = 3;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float current = 4;
  void clear_current();
  float current() const;
  void set_current(float value);
  private:
  float _internal_current() const;
  void _internal_set_current(float value);
  public:

  // float charge = 5;
  void clear_charge();
  float charge() const;
  void set_charge(float value);
  private:
  float _internal_charge() const;
  void _internal_set_charge(float value);
  public:

  // float capacity = 6;
  void clear_capacity();
  float capacity() const;
  void set_capacity(float value);
  private:
  float _internal_capacity() const;
  void _internal_set_capacity(float value);
  public:

  // float design_capacity = 7;
  void clear_design_capacity();
  float design_capacity() const;
  void set_design_capacity(float value);
  private:
  float _internal_design_capacity() const;
  void _internal_set_design_capacity(float value);
  public:

  // float percentage = 8;
  void clear_percentage();
  float percentage() const;
  void set_percentage(float value);
  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);
  public:

  // int32 power_supply_status = 9;
  void clear_power_supply_status();
  int32_t power_supply_status() const;
  void set_power_supply_status(int32_t value);
  private:
  int32_t _internal_power_supply_status() const;
  void _internal_set_power_supply_status(int32_t value);
  public:

  // int32 power_supply_health = 10;
  void clear_power_supply_health();
  int32_t power_supply_health() const;
  void set_power_supply_health(int32_t value);
  private:
  int32_t _internal_power_supply_health() const;
  void _internal_set_power_supply_health(int32_t value);
  public:

  // int32 power_supply_technology = 11;
  void clear_power_supply_technology();
  int32_t power_supply_technology() const;
  void set_power_supply_technology(int32_t value);
  private:
  int32_t _internal_power_supply_technology() const;
  void _internal_set_power_supply_technology(int32_t value);
  public:

  // bool present = 12;
  void clear_present();
  bool present() const;
  void set_present(bool value);
  private:
  bool _internal_present() const;
  void _internal_set_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ros.sensor_msgs.BatteryState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cell_voltage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cell_temperature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::ros::std_msgs::Header* header_;
  float voltage_;
  float temperature_;
  float current_;
  float charge_;
  float capacity_;
  float design_capacity_;
  float percentage_;
  int32_t power_supply_status_;
  int32_t power_supply_health_;
  int32_t power_supply_technology_;
  bool present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fsensor_5fmsgs_2fBatteryState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// .ros.std_msgs.Header header = 1;
inline bool BatteryState::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool BatteryState::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& BatteryState::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& BatteryState::header() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.header)
  return _internal_header();
}
inline void BatteryState::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.sensor_msgs.BatteryState.header)
}
inline ::ros::std_msgs::Header* BatteryState::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* BatteryState::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.BatteryState.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* BatteryState::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* BatteryState::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.BatteryState.header)
  return _msg;
}
inline void BatteryState::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.BatteryState.header)
}

// float voltage = 2;
inline void BatteryState::clear_voltage() {
  voltage_ = 0;
}
inline float BatteryState::_internal_voltage() const {
  return voltage_;
}
inline float BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.voltage)
  return _internal_voltage();
}
inline void BatteryState::_internal_set_voltage(float value) {
  
  voltage_ = value;
}
inline void BatteryState::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.voltage)
}

// float temperature = 3;
inline void BatteryState::clear_temperature() {
  temperature_ = 0;
}
inline float BatteryState::_internal_temperature() const {
  return temperature_;
}
inline float BatteryState::temperature() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.temperature)
  return _internal_temperature();
}
inline void BatteryState::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void BatteryState::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.temperature)
}

// float current = 4;
inline void BatteryState::clear_current() {
  current_ = 0;
}
inline float BatteryState::_internal_current() const {
  return current_;
}
inline float BatteryState::current() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.current)
  return _internal_current();
}
inline void BatteryState::_internal_set_current(float value) {
  
  current_ = value;
}
inline void BatteryState::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.current)
}

// float charge = 5;
inline void BatteryState::clear_charge() {
  charge_ = 0;
}
inline float BatteryState::_internal_charge() const {
  return charge_;
}
inline float BatteryState::charge() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.charge)
  return _internal_charge();
}
inline void BatteryState::_internal_set_charge(float value) {
  
  charge_ = value;
}
inline void BatteryState::set_charge(float value) {
  _internal_set_charge(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.charge)
}

// float capacity = 6;
inline void BatteryState::clear_capacity() {
  capacity_ = 0;
}
inline float BatteryState::_internal_capacity() const {
  return capacity_;
}
inline float BatteryState::capacity() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.capacity)
  return _internal_capacity();
}
inline void BatteryState::_internal_set_capacity(float value) {
  
  capacity_ = value;
}
inline void BatteryState::set_capacity(float value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.capacity)
}

// float design_capacity = 7;
inline void BatteryState::clear_design_capacity() {
  design_capacity_ = 0;
}
inline float BatteryState::_internal_design_capacity() const {
  return design_capacity_;
}
inline float BatteryState::design_capacity() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.design_capacity)
  return _internal_design_capacity();
}
inline void BatteryState::_internal_set_design_capacity(float value) {
  
  design_capacity_ = value;
}
inline void BatteryState::set_design_capacity(float value) {
  _internal_set_design_capacity(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.design_capacity)
}

// float percentage = 8;
inline void BatteryState::clear_percentage() {
  percentage_ = 0;
}
inline float BatteryState::_internal_percentage() const {
  return percentage_;
}
inline float BatteryState::percentage() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.percentage)
  return _internal_percentage();
}
inline void BatteryState::_internal_set_percentage(float value) {
  
  percentage_ = value;
}
inline void BatteryState::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.percentage)
}

// int32 power_supply_status = 9;
inline void BatteryState::clear_power_supply_status() {
  power_supply_status_ = 0;
}
inline int32_t BatteryState::_internal_power_supply_status() const {
  return power_supply_status_;
}
inline int32_t BatteryState::power_supply_status() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.power_supply_status)
  return _internal_power_supply_status();
}
inline void BatteryState::_internal_set_power_supply_status(int32_t value) {
  
  power_supply_status_ = value;
}
inline void BatteryState::set_power_supply_status(int32_t value) {
  _internal_set_power_supply_status(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.power_supply_status)
}

// int32 power_supply_health = 10;
inline void BatteryState::clear_power_supply_health() {
  power_supply_health_ = 0;
}
inline int32_t BatteryState::_internal_power_supply_health() const {
  return power_supply_health_;
}
inline int32_t BatteryState::power_supply_health() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.power_supply_health)
  return _internal_power_supply_health();
}
inline void BatteryState::_internal_set_power_supply_health(int32_t value) {
  
  power_supply_health_ = value;
}
inline void BatteryState::set_power_supply_health(int32_t value) {
  _internal_set_power_supply_health(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.power_supply_health)
}

// int32 power_supply_technology = 11;
inline void BatteryState::clear_power_supply_technology() {
  power_supply_technology_ = 0;
}
inline int32_t BatteryState::_internal_power_supply_technology() const {
  return power_supply_technology_;
}
inline int32_t BatteryState::power_supply_technology() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.power_supply_technology)
  return _internal_power_supply_technology();
}
inline void BatteryState::_internal_set_power_supply_technology(int32_t value) {
  
  power_supply_technology_ = value;
}
inline void BatteryState::set_power_supply_technology(int32_t value) {
  _internal_set_power_supply_technology(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.power_supply_technology)
}

// bool present = 12;
inline void BatteryState::clear_present() {
  present_ = false;
}
inline bool BatteryState::_internal_present() const {
  return present_;
}
inline bool BatteryState::present() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.present)
  return _internal_present();
}
inline void BatteryState::_internal_set_present(bool value) {
  
  present_ = value;
}
inline void BatteryState::set_present(bool value) {
  _internal_set_present(value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.present)
}

// repeated float cell_voltage = 13;
inline int BatteryState::_internal_cell_voltage_size() const {
  return cell_voltage_.size();
}
inline int BatteryState::cell_voltage_size() const {
  return _internal_cell_voltage_size();
}
inline void BatteryState::clear_cell_voltage() {
  cell_voltage_.Clear();
}
inline float BatteryState::_internal_cell_voltage(int index) const {
  return cell_voltage_.Get(index);
}
inline float BatteryState::cell_voltage(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.cell_voltage)
  return _internal_cell_voltage(index);
}
inline void BatteryState::set_cell_voltage(int index, float value) {
  cell_voltage_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.cell_voltage)
}
inline void BatteryState::_internal_add_cell_voltage(float value) {
  cell_voltage_.Add(value);
}
inline void BatteryState::add_cell_voltage(float value) {
  _internal_add_cell_voltage(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.BatteryState.cell_voltage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BatteryState::_internal_cell_voltage() const {
  return cell_voltage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BatteryState::cell_voltage() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.BatteryState.cell_voltage)
  return _internal_cell_voltage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BatteryState::_internal_mutable_cell_voltage() {
  return &cell_voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BatteryState::mutable_cell_voltage() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.BatteryState.cell_voltage)
  return _internal_mutable_cell_voltage();
}

// repeated float cell_temperature = 14;
inline int BatteryState::_internal_cell_temperature_size() const {
  return cell_temperature_.size();
}
inline int BatteryState::cell_temperature_size() const {
  return _internal_cell_temperature_size();
}
inline void BatteryState::clear_cell_temperature() {
  cell_temperature_.Clear();
}
inline float BatteryState::_internal_cell_temperature(int index) const {
  return cell_temperature_.Get(index);
}
inline float BatteryState::cell_temperature(int index) const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.cell_temperature)
  return _internal_cell_temperature(index);
}
inline void BatteryState::set_cell_temperature(int index, float value) {
  cell_temperature_.Set(index, value);
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.cell_temperature)
}
inline void BatteryState::_internal_add_cell_temperature(float value) {
  cell_temperature_.Add(value);
}
inline void BatteryState::add_cell_temperature(float value) {
  _internal_add_cell_temperature(value);
  // @@protoc_insertion_point(field_add:ros.sensor_msgs.BatteryState.cell_temperature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BatteryState::_internal_cell_temperature() const {
  return cell_temperature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BatteryState::cell_temperature() const {
  // @@protoc_insertion_point(field_list:ros.sensor_msgs.BatteryState.cell_temperature)
  return _internal_cell_temperature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BatteryState::_internal_mutable_cell_temperature() {
  return &cell_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BatteryState::mutable_cell_temperature() {
  // @@protoc_insertion_point(field_mutable_list:ros.sensor_msgs.BatteryState.cell_temperature)
  return _internal_mutable_cell_temperature();
}

// string location = 15;
inline void BatteryState::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& BatteryState::location() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatteryState::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.location)
}
inline std::string* BatteryState::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.BatteryState.location)
  return _s;
}
inline const std::string& BatteryState::_internal_location() const {
  return location_.Get();
}
inline void BatteryState::_internal_set_location(const std::string& value) {
  
  location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatteryState::_internal_mutable_location() {
  
  return location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatteryState::release_location() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.BatteryState.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatteryState::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.BatteryState.location)
}

// string serial_number = 16;
inline void BatteryState::clear_serial_number() {
  serial_number_.ClearToEmpty();
}
inline const std::string& BatteryState::serial_number() const {
  // @@protoc_insertion_point(field_get:ros.sensor_msgs.BatteryState.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatteryState::set_serial_number(ArgT0&& arg0, ArgT... args) {
 
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.sensor_msgs.BatteryState.serial_number)
}
inline std::string* BatteryState::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:ros.sensor_msgs.BatteryState.serial_number)
  return _s;
}
inline const std::string& BatteryState::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void BatteryState::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatteryState::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatteryState::release_serial_number() {
  // @@protoc_insertion_point(field_release:ros.sensor_msgs.BatteryState.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatteryState::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.sensor_msgs.BatteryState.serial_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fsensor_5fmsgs_2fBatteryState_2eproto
