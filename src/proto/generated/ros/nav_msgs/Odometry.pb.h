// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros/nav_msgs/Odometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_2fnav_5fmsgs_2fOdometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_2fnav_5fmsgs_2fOdometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ros/geometry_msgs/PoseWithCovariance.pb.h"
#include "ros/geometry_msgs/TwistWithCovariance.pb.h"
#include "ros/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_2fnav_5fmsgs_2fOdometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_2fnav_5fmsgs_2fOdometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_2fnav_5fmsgs_2fOdometry_2eproto;
namespace ros {
namespace nav_msgs {
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace nav_msgs
}  // namespace ros
PROTOBUF_NAMESPACE_OPEN
template<> ::ros::nav_msgs::Odometry* Arena::CreateMaybeMessage<::ros::nav_msgs::Odometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ros {
namespace nav_msgs {

// ===================================================================

class Odometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ros.nav_msgs.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  explicit constexpr Odometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Odometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Odometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ros.nav_msgs.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 3,
    kTwistFieldNumber = 4,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .ros.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::ros::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::ros::std_msgs::Header* release_header();
  ::ros::std_msgs::Header* mutable_header();
  void set_allocated_header(::ros::std_msgs::Header* header);
  private:
  const ::ros::std_msgs::Header& _internal_header() const;
  ::ros::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::ros::std_msgs::Header* header);
  ::ros::std_msgs::Header* unsafe_arena_release_header();

  // .ros.geometry_msgs.PoseWithCovariance pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::ros::geometry_msgs::PoseWithCovariance& pose() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::PoseWithCovariance* release_pose();
  ::ros::geometry_msgs::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::ros::geometry_msgs::PoseWithCovariance* pose);
  private:
  const ::ros::geometry_msgs::PoseWithCovariance& _internal_pose() const;
  ::ros::geometry_msgs::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::ros::geometry_msgs::PoseWithCovariance* pose);
  ::ros::geometry_msgs::PoseWithCovariance* unsafe_arena_release_pose();

  // .ros.geometry_msgs.TwistWithCovariance twist = 4;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::ros::geometry_msgs::TwistWithCovariance& twist() const;
  PROTOBUF_NODISCARD ::ros::geometry_msgs::TwistWithCovariance* release_twist();
  ::ros::geometry_msgs::TwistWithCovariance* mutable_twist();
  void set_allocated_twist(::ros::geometry_msgs::TwistWithCovariance* twist);
  private:
  const ::ros::geometry_msgs::TwistWithCovariance& _internal_twist() const;
  ::ros::geometry_msgs::TwistWithCovariance* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::ros::geometry_msgs::TwistWithCovariance* twist);
  ::ros::geometry_msgs::TwistWithCovariance* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:ros.nav_msgs.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
  ::ros::std_msgs::Header* header_;
  ::ros::geometry_msgs::PoseWithCovariance* pose_;
  ::ros::geometry_msgs::TwistWithCovariance* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ros_2fnav_5fmsgs_2fOdometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odometry

// .ros.std_msgs.Header header = 1;
inline bool Odometry::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Odometry::has_header() const {
  return _internal_has_header();
}
inline const ::ros::std_msgs::Header& Odometry::_internal_header() const {
  const ::ros::std_msgs::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::std_msgs::Header&>(
      ::ros::std_msgs::_Header_default_instance_);
}
inline const ::ros::std_msgs::Header& Odometry::header() const {
  // @@protoc_insertion_point(field_get:ros.nav_msgs.Odometry.header)
  return _internal_header();
}
inline void Odometry::unsafe_arena_set_allocated_header(
    ::ros::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.nav_msgs.Odometry.header)
}
inline ::ros::std_msgs::Header* Odometry::release_header() {
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::std_msgs::Header* Odometry::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:ros.nav_msgs.Odometry.header)
  
  ::ros::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ros::std_msgs::Header* Odometry::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::std_msgs::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::ros::std_msgs::Header* Odometry::mutable_header() {
  ::ros::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:ros.nav_msgs.Odometry.header)
  return _msg;
}
inline void Odometry::set_allocated_header(::ros::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ros.nav_msgs.Odometry.header)
}

// string child_frame_id = 2;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_.ClearToEmpty();
}
inline const std::string& Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:ros.nav_msgs.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Odometry::set_child_frame_id(ArgT0&& arg0, ArgT... args) {
 
 child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ros.nav_msgs.Odometry.child_frame_id)
}
inline std::string* Odometry::mutable_child_frame_id() {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:ros.nav_msgs.Odometry.child_frame_id)
  return _s;
}
inline const std::string& Odometry::_internal_child_frame_id() const {
  return child_frame_id_.Get();
}
inline void Odometry::_internal_set_child_frame_id(const std::string& value) {
  
  child_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Odometry::_internal_mutable_child_frame_id() {
  
  return child_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Odometry::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:ros.nav_msgs.Odometry.child_frame_id)
  return child_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Odometry::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  child_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_frame_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (child_frame_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    child_frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ros.nav_msgs.Odometry.child_frame_id)
}

// .ros.geometry_msgs.PoseWithCovariance pose = 3;
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline const ::ros::geometry_msgs::PoseWithCovariance& Odometry::_internal_pose() const {
  const ::ros::geometry_msgs::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::PoseWithCovariance&>(
      ::ros::geometry_msgs::_PoseWithCovariance_default_instance_);
}
inline const ::ros::geometry_msgs::PoseWithCovariance& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:ros.nav_msgs.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(
    ::ros::geometry_msgs::PoseWithCovariance* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.nav_msgs.Odometry.pose)
}
inline ::ros::geometry_msgs::PoseWithCovariance* Odometry::release_pose() {
  
  ::ros::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::PoseWithCovariance* Odometry::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:ros.nav_msgs.Odometry.pose)
  
  ::ros::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::PoseWithCovariance* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::PoseWithCovariance>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::ros::geometry_msgs::PoseWithCovariance* Odometry::mutable_pose() {
  ::ros::geometry_msgs::PoseWithCovariance* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:ros.nav_msgs.Odometry.pose)
  return _msg;
}
inline void Odometry::set_allocated_pose(::ros::geometry_msgs::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ros.nav_msgs.Odometry.pose)
}

// .ros.geometry_msgs.TwistWithCovariance twist = 4;
inline bool Odometry::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Odometry::has_twist() const {
  return _internal_has_twist();
}
inline const ::ros::geometry_msgs::TwistWithCovariance& Odometry::_internal_twist() const {
  const ::ros::geometry_msgs::TwistWithCovariance* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::ros::geometry_msgs::TwistWithCovariance&>(
      ::ros::geometry_msgs::_TwistWithCovariance_default_instance_);
}
inline const ::ros::geometry_msgs::TwistWithCovariance& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:ros.nav_msgs.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(
    ::ros::geometry_msgs::TwistWithCovariance* twist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ros.nav_msgs.Odometry.twist)
}
inline ::ros::geometry_msgs::TwistWithCovariance* Odometry::release_twist() {
  
  ::ros::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ros::geometry_msgs::TwistWithCovariance* Odometry::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:ros.nav_msgs.Odometry.twist)
  
  ::ros::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::ros::geometry_msgs::TwistWithCovariance* Odometry::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::ros::geometry_msgs::TwistWithCovariance>(GetArenaForAllocation());
    twist_ = p;
  }
  return twist_;
}
inline ::ros::geometry_msgs::TwistWithCovariance* Odometry::mutable_twist() {
  ::ros::geometry_msgs::TwistWithCovariance* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:ros.nav_msgs.Odometry.twist)
  return _msg;
}
inline void Odometry::set_allocated_twist(::ros::geometry_msgs::TwistWithCovariance* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:ros.nav_msgs.Odometry.twist)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace nav_msgs
}  // namespace ros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_2fnav_5fmsgs_2fOdometry_2eproto
